
TRY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fa4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800913c  0800913c  0001913c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009158  08009158  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009158  08009158  00019158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009160  08009160  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009164  08009164  00019164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000890  20000090  080091f8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000920  080091f8  00020920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb27  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003eef  00000000  00000000  0003ebe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018a8  00000000  00000000  00042ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001700  00000000  00000000  00044380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a57d  00000000  00000000  00045a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000156d3  00000000  00000000  0005fffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000980ea  00000000  00000000  000756d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d7ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a28  00000000  00000000  0010d838  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009124 	.word	0x08009124

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08009124 	.word	0x08009124

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fda2 	bl	8001024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f81a 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f9ec 	bl	80008c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e8:	f000 f89a 	bl	8000620 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004ec:	f000 f8c6 	bl	800067c <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f0:	f000 f8f2 	bl	80006d8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f4:	f000 f920 	bl	8000738 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004f8:	f008 fa10 	bl	800891c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004fc:	f000 f9b6 	bl	800086c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000500:	f000 f950 	bl	80007a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <main+0x3c>)
 8000506:	f004 fa14 	bl	8004932 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */



    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800050a:	f008 fa2d 	bl	8008968 <MX_USB_HOST_Process>
 800050e:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */


  /* USER CODE END 3 */
}
 8000510:	4618      	mov	r0, r3
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000114 	.word	0x20000114

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b09a      	sub	sp, #104	; 0x68
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f008 fd3a 	bl	8008fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
 800054c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b31      	ldr	r3, [pc, #196]	; (8000618 <SystemClock_Config+0x100>)
 8000554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000556:	4a30      	ldr	r2, [pc, #192]	; (8000618 <SystemClock_Config+0x100>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055c:	6413      	str	r3, [r2, #64]	; 0x40
 800055e:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <SystemClock_Config+0x100>)
 8000560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b2b      	ldr	r3, [pc, #172]	; (800061c <SystemClock_Config+0x104>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a2a      	ldr	r2, [pc, #168]	; (800061c <SystemClock_Config+0x104>)
 8000574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000578:	6013      	str	r3, [r2, #0]
 800057a:	4b28      	ldr	r3, [pc, #160]	; (800061c <SystemClock_Config+0x104>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058a:	2301      	movs	r3, #1
 800058c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058e:	2310      	movs	r3, #16
 8000590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000596:	2300      	movs	r3, #0
 8000598:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059a:	2308      	movs	r3, #8
 800059c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800059e:	23c0      	movs	r3, #192	; 0xc0
 80005a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a2:	2304      	movs	r3, #4
 80005a4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005a6:	2308      	movs	r3, #8
 80005a8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fb80 	bl	8003cb4 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005ba:	f000 fa6b 	bl	8000a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2302      	movs	r3, #2
 80005c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d8:	2103      	movs	r1, #3
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 fdda 	bl	8004194 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005e6:	f000 fa55 	bl	8000a94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005ea:	2301      	movs	r3, #1
 80005ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80005ee:	2332      	movs	r3, #50	; 0x32
 80005f0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80005f2:	2308      	movs	r3, #8
 80005f4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 80005f6:	2303      	movs	r3, #3
 80005f8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 ffba 	bl	8004578 <HAL_RCCEx_PeriphCLKConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800060a:	f000 fa43 	bl	8000a94 <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3768      	adds	r7, #104	; 0x68
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_I2C1_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <MX_I2C1_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_I2C1_Init+0x50>)
 800062c:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_I2C1_Init+0x58>)
 800062e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_I2C1_Init+0x50>)
 800063e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_I2C1_Init+0x50>)
 800065e:	f002 fd51 	bl	8003104 <HAL_I2C_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 fa14 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200000c0 	.word	0x200000c0
 8000674:	40005400 	.word	0x40005400
 8000678:	000186a0 	.word	0x000186a0

0800067c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_I2S2_Init+0x50>)
 8000682:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <MX_I2S2_Init+0x54>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_I2S2_Init+0x50>)
 8000688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800068c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_I2S2_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000694:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_I2S2_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_I2S2_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <MX_I2S2_Init+0x50>)
 80006a2:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <MX_I2S2_Init+0x58>)
 80006a4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_I2S2_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <MX_I2S2_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_I2S2_Init+0x50>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_I2S2_Init+0x50>)
 80006ba:	f002 fe5b 	bl	8003374 <HAL_I2S_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006c4:	f000 f9e6 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200001ec 	.word	0x200001ec
 80006d0:	40003800 	.word	0x40003800
 80006d4:	00017700 	.word	0x00017700

080006d8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_I2S3_Init+0x54>)
 80006de:	4a14      	ldr	r2, [pc, #80]	; (8000730 <MX_I2S3_Init+0x58>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_I2S3_Init+0x54>)
 80006e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_I2S3_Init+0x54>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_I2S3_Init+0x54>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <MX_I2S3_Init+0x54>)
 80006f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006fc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_I2S3_Init+0x54>)
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <MX_I2S3_Init+0x5c>)
 8000702:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_I2S3_Init+0x54>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_I2S3_Init+0x54>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_I2S3_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_I2S3_Init+0x54>)
 8000718:	f002 fe2c 	bl	8003374 <HAL_I2S_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000722:	f000 f9b7 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000234 	.word	0x20000234
 8000730:	40003c00 	.word	0x40003c00
 8000734:	00017700 	.word	0x00017700

08000738 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_SPI1_Init+0x64>)
 800073e:	4a18      	ldr	r2, [pc, #96]	; (80007a0 <MX_SPI1_Init+0x68>)
 8000740:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_SPI1_Init+0x64>)
 8000744:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000748:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_SPI1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_SPI1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_SPI1_Init+0x64>)
 8000764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000768:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_SPI1_Init+0x64>)
 8000784:	220a      	movs	r2, #10
 8000786:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_SPI1_Init+0x64>)
 800078a:	f004 f843 	bl	8004814 <HAL_SPI_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000794:	f000 f97e 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000154 	.word	0x20000154
 80007a0:	40013000 	.word	0x40013000

080007a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
	 __TIM1_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <MX_TIM1_Init+0xbc>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	4a2b      	ldr	r2, [pc, #172]	; (8000860 <MX_TIM1_Init+0xbc>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ba:	4b29      	ldr	r3, [pc, #164]	; (8000860 <MX_TIM1_Init+0xbc>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <MX_TIM1_Init+0xc0>)
 80007e0:	4a21      	ldr	r2, [pc, #132]	; (8000868 <MX_TIM1_Init+0xc4>)
 80007e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24000;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_TIM1_Init+0xc0>)
 80007e6:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80007ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_TIM1_Init+0xc0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_TIM1_Init+0xc0>)
 80007f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_TIM1_Init+0xc0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_TIM1_Init+0xc0>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_TIM1_Init+0xc0>)
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800080c:	4815      	ldr	r0, [pc, #84]	; (8000864 <MX_TIM1_Init+0xc0>)
 800080e:	f004 f865 	bl	80048dc <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000818:	f000 f93c 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	4619      	mov	r1, r3
 8000828:	480e      	ldr	r0, [pc, #56]	; (8000864 <MX_TIM1_Init+0xc0>)
 800082a:	f004 f9ae 	bl	8004b8a <HAL_TIM_ConfigClockSource>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000834:	f000 f92e 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	4619      	mov	r1, r3
 8000846:	4807      	ldr	r0, [pc, #28]	; (8000864 <MX_TIM1_Init+0xc0>)
 8000848:	f004 fb98 	bl	8004f7c <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8000852:	f000 f91f 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	20000114 	.word	0x20000114
 8000868:	40010000 	.word	0x40010000

0800086c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_USART2_UART_Init+0x50>)
 8000874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 80008a4:	f004 fbec 	bl	8005080 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ae:	f000 f8f1 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200001ac 	.word	0x200001ac
 80008bc:	40004400 	.word	0x40004400

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
 80008da:	4b60      	ldr	r3, [pc, #384]	; (8000a5c <MX_GPIO_Init+0x19c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a5f      	ldr	r2, [pc, #380]	; (8000a5c <MX_GPIO_Init+0x19c>)
 80008e0:	f043 0310 	orr.w	r3, r3, #16
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b5d      	ldr	r3, [pc, #372]	; (8000a5c <MX_GPIO_Init+0x19c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0310 	and.w	r3, r3, #16
 80008ee:	61bb      	str	r3, [r7, #24]
 80008f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	4b59      	ldr	r3, [pc, #356]	; (8000a5c <MX_GPIO_Init+0x19c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a58      	ldr	r2, [pc, #352]	; (8000a5c <MX_GPIO_Init+0x19c>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b56      	ldr	r3, [pc, #344]	; (8000a5c <MX_GPIO_Init+0x19c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b52      	ldr	r3, [pc, #328]	; (8000a5c <MX_GPIO_Init+0x19c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a51      	ldr	r2, [pc, #324]	; (8000a5c <MX_GPIO_Init+0x19c>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b4f      	ldr	r3, [pc, #316]	; (8000a5c <MX_GPIO_Init+0x19c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b4b      	ldr	r3, [pc, #300]	; (8000a5c <MX_GPIO_Init+0x19c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a4a      	ldr	r2, [pc, #296]	; (8000a5c <MX_GPIO_Init+0x19c>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b48      	ldr	r3, [pc, #288]	; (8000a5c <MX_GPIO_Init+0x19c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b44      	ldr	r3, [pc, #272]	; (8000a5c <MX_GPIO_Init+0x19c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a43      	ldr	r2, [pc, #268]	; (8000a5c <MX_GPIO_Init+0x19c>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b41      	ldr	r3, [pc, #260]	; (8000a5c <MX_GPIO_Init+0x19c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b3d      	ldr	r3, [pc, #244]	; (8000a5c <MX_GPIO_Init+0x19c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a3c      	ldr	r2, [pc, #240]	; (8000a5c <MX_GPIO_Init+0x19c>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <MX_GPIO_Init+0x19c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2108      	movs	r1, #8
 8000982:	4837      	ldr	r0, [pc, #220]	; (8000a60 <MX_GPIO_Init+0x1a0>)
 8000984:	f000 fe98 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2101      	movs	r1, #1
 800098c:	4835      	ldr	r0, [pc, #212]	; (8000a64 <MX_GPIO_Init+0x1a4>)
 800098e:	f000 fe93 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|GPIO_PIN_14|LD6_Pin
 8000992:	2200      	movs	r2, #0
 8000994:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000998:	4833      	ldr	r0, [pc, #204]	; (8000a68 <MX_GPIO_Init+0x1a8>)
 800099a:	f000 fe8d 	bl	80016b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800099e:	2304      	movs	r3, #4
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	482b      	ldr	r0, [pc, #172]	; (8000a60 <MX_GPIO_Init+0x1a0>)
 80009b2:	f000 fcff 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009b6:	2308      	movs	r3, #8
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4824      	ldr	r0, [pc, #144]	; (8000a60 <MX_GPIO_Init+0x1a0>)
 80009ce:	f000 fcf1 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80009d2:	2332      	movs	r3, #50	; 0x32
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d6:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <MX_GPIO_Init+0x1ac>)
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	481e      	ldr	r0, [pc, #120]	; (8000a60 <MX_GPIO_Init+0x1a0>)
 80009e6:	f000 fce5 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4818      	ldr	r0, [pc, #96]	; (8000a64 <MX_GPIO_Init+0x1a4>)
 8000a02:	f000 fcd7 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_GPIO_Init+0x1ac>)
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4815      	ldr	r0, [pc, #84]	; (8000a70 <MX_GPIO_Init+0x1b0>)
 8000a1a:	f000 fccb 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin PD14 LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|GPIO_PIN_14|LD6_Pin
 8000a1e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a22:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MX_GPIO_Init+0x1a8>)
 8000a38:	f000 fcbc 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <MX_GPIO_Init+0x1a8>)
 8000a50:	f000 fcb0 	bl	80013b4 <HAL_GPIO_Init>

}
 8000a54:	bf00      	nop
 8000a56:	3730      	adds	r7, #48	; 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40020800 	.word	0x40020800
 8000a68:	40020c00 	.word	0x40020c00
 8000a6c:	10120000 	.word	0x10120000
 8000a70:	40020000 	.word	0x40020000

08000a74 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a80:	4803      	ldr	r0, [pc, #12]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000a82:	f000 fe32 	bl	80016ea <HAL_GPIO_TogglePin>


 }
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40020c00 	.word	0x40020c00

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ae2:	2007      	movs	r0, #7
 8000ae4:	f000 fc02 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <HAL_I2C_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12c      	bne.n	8000b70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b32:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b38:	2312      	movs	r3, #18
 8000b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b44:	2304      	movs	r3, #4
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480c      	ldr	r0, [pc, #48]	; (8000b80 <HAL_I2C_MspInit+0x8c>)
 8000b50:	f000 fc30 	bl	80013b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020400 	.word	0x40020400

08000b84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08e      	sub	sp, #56	; 0x38
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a59      	ldr	r2, [pc, #356]	; (8000d08 <HAL_I2S_MspInit+0x184>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d15b      	bne.n	8000c5e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
 8000baa:	4b58      	ldr	r3, [pc, #352]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a57      	ldr	r2, [pc, #348]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b55      	ldr	r3, [pc, #340]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	623b      	str	r3, [r7, #32]
 8000bc0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	4b51      	ldr	r3, [pc, #324]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a50      	ldr	r2, [pc, #320]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b4e      	ldr	r3, [pc, #312]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	61fb      	str	r3, [r7, #28]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
 8000be2:	4b4a      	ldr	r3, [pc, #296]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a49      	ldr	r2, [pc, #292]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b47      	ldr	r3, [pc, #284]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
 8000bf8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c0a:	2306      	movs	r3, #6
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	483e      	ldr	r0, [pc, #248]	; (8000d10 <HAL_I2S_MspInit+0x18c>)
 8000c16:	f000 fbcd 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	4836      	ldr	r0, [pc, #216]	; (8000d10 <HAL_I2S_MspInit+0x18c>)
 8000c36:	f000 fbbd 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c3a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c4c:	2305      	movs	r3, #5
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	482f      	ldr	r0, [pc, #188]	; (8000d14 <HAL_I2S_MspInit+0x190>)
 8000c58:	f000 fbac 	bl	80013b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c5c:	e04f      	b.n	8000cfe <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a2d      	ldr	r2, [pc, #180]	; (8000d18 <HAL_I2S_MspInit+0x194>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d14a      	bne.n	8000cfe <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a26      	ldr	r2, [pc, #152]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a18      	ldr	r2, [pc, #96]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <HAL_I2S_MspInit+0x188>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ccc:	2306      	movs	r3, #6
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4811      	ldr	r0, [pc, #68]	; (8000d1c <HAL_I2S_MspInit+0x198>)
 8000cd8:	f000 fb6c 	bl	80013b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cdc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_I2S_MspInit+0x18c>)
 8000cfa:	f000 fb5b 	bl	80013b4 <HAL_GPIO_Init>
}
 8000cfe:	bf00      	nop
 8000d00:	3738      	adds	r7, #56	; 0x38
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40003800 	.word	0x40003800
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020800 	.word	0x40020800
 8000d14:	40020400 	.word	0x40020400
 8000d18:	40003c00 	.word	0x40003c00
 8000d1c:	40020000 	.word	0x40020000

08000d20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_SPI_MspInit+0x84>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d12b      	bne.n	8000d9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d7a:	23e0      	movs	r3, #224	; 0xe0
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <HAL_SPI_MspInit+0x8c>)
 8000d96:	f000 fb0d 	bl	80013b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40013000 	.word	0x40013000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000

08000db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <HAL_TIM_Base_MspInit+0x48>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d115      	bne.n	8000dee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <HAL_TIM_Base_MspInit+0x4c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a0c      	ldr	r2, [pc, #48]	; (8000dfc <HAL_TIM_Base_MspInit+0x4c>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_TIM_Base_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	2019      	movs	r0, #25
 8000de4:	f000 fa8d 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000de8:	2019      	movs	r0, #25
 8000dea:	f000 faa6 	bl	800133a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40010000 	.word	0x40010000
 8000dfc:	40023800 	.word	0x40023800

08000e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <HAL_UART_MspInit+0x94>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d133      	bne.n	8000e8a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <HAL_UART_MspInit+0x98>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <HAL_UART_MspInit+0x98>)
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <HAL_UART_MspInit+0x98>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_UART_MspInit+0x98>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <HAL_UART_MspInit+0x98>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_UART_MspInit+0x98>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e5a:	230c      	movs	r3, #12
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4809      	ldr	r0, [pc, #36]	; (8000e9c <HAL_UART_MspInit+0x9c>)
 8000e76:	f000 fa9d 	bl	80013b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2026      	movs	r0, #38	; 0x26
 8000e80:	f000 fa3f 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e84:	2026      	movs	r0, #38	; 0x26
 8000e86:	f000 fa58 	bl	800133a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40004400 	.word	0x40004400
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f8e8 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f02:	f003 fd3a 	bl	800497a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000114 	.word	0x20000114

08000f10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <USART2_IRQHandler+0x10>)
 8000f16:	f004 f901 	bl	800511c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001ac 	.word	0x200001ac

08000f24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <OTG_FS_IRQHandler+0x10>)
 8000f2a:	f000 fe89 	bl	8001c40 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000658 	.word	0x20000658

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f007 ffe0 	bl	8008f2c <__errno>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	230c      	movs	r3, #12
 8000f70:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20020000 	.word	0x20020000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	200000ac 	.word	0x200000ac
 8000fa0:	20000920 	.word	0x20000920

08000fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <SystemInit+0x28>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fae:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <SystemInit+0x28>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SystemInit+0x28>)
 8000fba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fbe:	609a      	str	r2, [r3, #8]
#endif
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fd6:	e003      	b.n	8000fe0 <LoopCopyDataInit>

08000fd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fde:	3104      	adds	r1, #4

08000fe0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fe4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fe6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fe8:	d3f6      	bcc.n	8000fd8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fec:	e002      	b.n	8000ff4 <LoopFillZerobss>

08000fee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ff0:	f842 3b04 	str.w	r3, [r2], #4

08000ff4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ff6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ff8:	d3f9      	bcc.n	8000fee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ffa:	f7ff ffd3 	bl	8000fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f007 ff9b 	bl	8008f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff fa69 	bl	80004d8 <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001008:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800100c:	08009168 	.word	0x08009168
  ldr  r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001014:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001018:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800101c:	20000920 	.word	0x20000920

08001020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <HAL_Init+0x40>)
 800102e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_Init+0x40>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_Init+0x40>)
 8001046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f94d 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f808 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff fd24 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023c00 	.word	0x40023c00

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f965 	bl	8001356 <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f000 f92d 	bl	8001302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <HAL_InitTick+0x5c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000000 	.word	0x20000000
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000004 	.word	0x20000004

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008
 80010ec:	2000027c 	.word	0x2000027c

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	2000027c 	.word	0x2000027c

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff ffee 	bl	80010f0 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_Delay+0x40>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800112e:	bf00      	nop
 8001130:	f7ff ffde 	bl	80010f0 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000008 	.word	0x20000008

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117e:	4a04      	ldr	r2, [pc, #16]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	60d3      	str	r3, [r2, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	; (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	; (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <__NVIC_SetPriority+0x50>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f7ff ff8e 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff29 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001314:	f7ff ff3e 	bl	8001194 <__NVIC_GetPriorityGrouping>
 8001318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f7ff ff8e 	bl	8001240 <NVIC_EncodePriority>
 8001324:	4602      	mov	r2, r0
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff5d 	bl	80011ec <__NVIC_SetPriority>
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff31 	bl	80011b0 <__NVIC_EnableIRQ>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffa2 	bl	80012a8 <SysTick_Config>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d004      	beq.n	800138c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2280      	movs	r2, #128	; 0x80
 8001386:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e00c      	b.n	80013a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2205      	movs	r2, #5
 8001390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	e159      	b.n	8001684 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d0:	2201      	movs	r2, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f040 8148 	bne.w	800167e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d00b      	beq.n	800140e <HAL_GPIO_Init+0x5a>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d007      	beq.n	800140e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001402:	2b11      	cmp	r3, #17
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b12      	cmp	r3, #18
 800140c:	d130      	bne.n	8001470 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2203      	movs	r2, #3
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001444:	2201      	movs	r2, #1
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	f003 0201 	and.w	r2, r3, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	2203      	movs	r2, #3
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0xfc>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b12      	cmp	r3, #18
 80014ae:	d123      	bne.n	80014f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	08da      	lsrs	r2, r3, #3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3208      	adds	r2, #8
 80014b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	08da      	lsrs	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3208      	adds	r2, #8
 80014f2:	69b9      	ldr	r1, [r7, #24]
 80014f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0203 	and.w	r2, r3, #3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80a2 	beq.w	800167e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b56      	ldr	r3, [pc, #344]	; (8001698 <HAL_GPIO_Init+0x2e4>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a55      	ldr	r2, [pc, #340]	; (8001698 <HAL_GPIO_Init+0x2e4>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_GPIO_Init+0x2e4>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001556:	4a51      	ldr	r2, [pc, #324]	; (800169c <HAL_GPIO_Init+0x2e8>)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3302      	adds	r3, #2
 800155e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	220f      	movs	r2, #15
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a48      	ldr	r2, [pc, #288]	; (80016a0 <HAL_GPIO_Init+0x2ec>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d019      	beq.n	80015b6 <HAL_GPIO_Init+0x202>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a47      	ldr	r2, [pc, #284]	; (80016a4 <HAL_GPIO_Init+0x2f0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0x1fe>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a46      	ldr	r2, [pc, #280]	; (80016a8 <HAL_GPIO_Init+0x2f4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d00d      	beq.n	80015ae <HAL_GPIO_Init+0x1fa>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a45      	ldr	r2, [pc, #276]	; (80016ac <HAL_GPIO_Init+0x2f8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d007      	beq.n	80015aa <HAL_GPIO_Init+0x1f6>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a44      	ldr	r2, [pc, #272]	; (80016b0 <HAL_GPIO_Init+0x2fc>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_GPIO_Init+0x1f2>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e008      	b.n	80015b8 <HAL_GPIO_Init+0x204>
 80015a6:	2307      	movs	r3, #7
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x204>
 80015aa:	2303      	movs	r3, #3
 80015ac:	e004      	b.n	80015b8 <HAL_GPIO_Init+0x204>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e002      	b.n	80015b8 <HAL_GPIO_Init+0x204>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_GPIO_Init+0x204>
 80015b6:	2300      	movs	r3, #0
 80015b8:	69fa      	ldr	r2, [r7, #28]
 80015ba:	f002 0203 	and.w	r2, r2, #3
 80015be:	0092      	lsls	r2, r2, #2
 80015c0:	4093      	lsls	r3, r2
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c8:	4934      	ldr	r1, [pc, #208]	; (800169c <HAL_GPIO_Init+0x2e8>)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <HAL_GPIO_Init+0x300>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015fa:	4a2e      	ldr	r2, [pc, #184]	; (80016b4 <HAL_GPIO_Init+0x300>)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001600:	4b2c      	ldr	r3, [pc, #176]	; (80016b4 <HAL_GPIO_Init+0x300>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001624:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <HAL_GPIO_Init+0x300>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_GPIO_Init+0x300>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800164e:	4a19      	ldr	r2, [pc, #100]	; (80016b4 <HAL_GPIO_Init+0x300>)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_GPIO_Init+0x300>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <HAL_GPIO_Init+0x300>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3301      	adds	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	2b0f      	cmp	r3, #15
 8001688:	f67f aea2 	bls.w	80013d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800168c:	bf00      	nop
 800168e:	3724      	adds	r7, #36	; 0x24
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40023800 	.word	0x40023800
 800169c:	40013800 	.word	0x40013800
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40020800 	.word	0x40020800
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40013c00 	.word	0x40013c00

080016b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
 80016c4:	4613      	mov	r3, r2
 80016c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c8:	787b      	ldrb	r3, [r7, #1]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d4:	e003      	b.n	80016de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	041a      	lsls	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	619a      	str	r2, [r3, #24]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	460b      	mov	r3, r1
 80016f4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	401a      	ands	r2, r3
 80016fe:	887b      	ldrh	r3, [r7, #2]
 8001700:	429a      	cmp	r2, r3
 8001702:	d104      	bne.n	800170e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001704:	887b      	ldrh	r3, [r7, #2]
 8001706:	041a      	lsls	r2, r3, #16
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800170c:	e002      	b.n	8001714 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800170e:	887a      	ldrh	r2, [r7, #2]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001722:	b08f      	sub	sp, #60	; 0x3c
 8001724:	af0a      	add	r7, sp, #40	; 0x28
 8001726:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e054      	b.n	80017dc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d106      	bne.n	8001752 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f007 f943 	bl	80089d8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2203      	movs	r2, #3
 8001756:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800175e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f004 fb01 	bl	8005d78 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	687e      	ldr	r6, [r7, #4]
 800177e:	466d      	mov	r5, sp
 8001780:	f106 0410 	add.w	r4, r6, #16
 8001784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800178a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800178c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001790:	e885 0003 	stmia.w	r5, {r0, r1}
 8001794:	1d33      	adds	r3, r6, #4
 8001796:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001798:	6838      	ldr	r0, [r7, #0]
 800179a:	f004 fa7b 	bl	8005c94 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2101      	movs	r1, #1
 80017a4:	4618      	mov	r0, r3
 80017a6:	f004 faf8 	bl	8005d9a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	687e      	ldr	r6, [r7, #4]
 80017b2:	466d      	mov	r5, sp
 80017b4:	f106 0410 	add.w	r4, r6, #16
 80017b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80017c8:	1d33      	adds	r3, r6, #4
 80017ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017cc:	6838      	ldr	r0, [r7, #0]
 80017ce:	f004 fc0b 	bl	8005fe8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017e4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af04      	add	r7, sp, #16
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	4608      	mov	r0, r1
 80017ee:	4611      	mov	r1, r2
 80017f0:	461a      	mov	r2, r3
 80017f2:	4603      	mov	r3, r0
 80017f4:	70fb      	strb	r3, [r7, #3]
 80017f6:	460b      	mov	r3, r1
 80017f8:	70bb      	strb	r3, [r7, #2]
 80017fa:	4613      	mov	r3, r2
 80017fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_HCD_HC_Init+0x28>
 8001808:	2302      	movs	r3, #2
 800180a:	e07f      	b.n	800190c <HAL_HCD_HC_Init+0x128>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	333d      	adds	r3, #61	; 0x3d
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	440b      	add	r3, r1
 8001836:	3338      	adds	r3, #56	; 0x38
 8001838:	787a      	ldrb	r2, [r7, #1]
 800183a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	3340      	adds	r3, #64	; 0x40
 800184c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800184e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	3339      	adds	r3, #57	; 0x39
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001864:	78fa      	ldrb	r2, [r7, #3]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	440b      	add	r3, r1
 8001872:	333f      	adds	r3, #63	; 0x3f
 8001874:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001878:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800187a:	78fa      	ldrb	r2, [r7, #3]
 800187c:	78bb      	ldrb	r3, [r7, #2]
 800187e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001882:	b2d8      	uxtb	r0, r3
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	333a      	adds	r3, #58	; 0x3a
 8001892:	4602      	mov	r2, r0
 8001894:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001896:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800189a:	2b00      	cmp	r3, #0
 800189c:	da0a      	bge.n	80018b4 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	333b      	adds	r3, #59	; 0x3b
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	e009      	b.n	80018c8 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018b4:	78fa      	ldrb	r2, [r7, #3]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	440b      	add	r3, r1
 80018c2:	333b      	adds	r3, #59	; 0x3b
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	440b      	add	r3, r1
 80018d6:	333c      	adds	r3, #60	; 0x3c
 80018d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018dc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	787c      	ldrb	r4, [r7, #1]
 80018e4:	78ba      	ldrb	r2, [r7, #2]
 80018e6:	78f9      	ldrb	r1, [r7, #3]
 80018e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018ea:	9302      	str	r3, [sp, #8]
 80018ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	4623      	mov	r3, r4
 80018fa:	f004 fcf7 	bl	80062ec <USB_HC_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}

08001914 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_HCD_HC_Halt+0x1e>
 800192e:	2302      	movs	r3, #2
 8001930:	e00f      	b.n	8001952 <HAL_HCD_HC_Halt+0x3e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	78fa      	ldrb	r2, [r7, #3]
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f004 ff31 	bl	80067aa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	4608      	mov	r0, r1
 8001966:	4611      	mov	r1, r2
 8001968:	461a      	mov	r2, r3
 800196a:	4603      	mov	r3, r0
 800196c:	70fb      	strb	r3, [r7, #3]
 800196e:	460b      	mov	r3, r1
 8001970:	70bb      	strb	r3, [r7, #2]
 8001972:	4613      	mov	r3, r2
 8001974:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	440b      	add	r3, r1
 8001984:	333b      	adds	r3, #59	; 0x3b
 8001986:	78ba      	ldrb	r2, [r7, #2]
 8001988:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	333f      	adds	r3, #63	; 0x3f
 800199a:	787a      	ldrb	r2, [r7, #1]
 800199c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800199e:	7c3b      	ldrb	r3, [r7, #16]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d114      	bne.n	80019ce <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	3342      	adds	r3, #66	; 0x42
 80019b4:	2203      	movs	r2, #3
 80019b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	440b      	add	r3, r1
 80019c6:	333d      	adds	r3, #61	; 0x3d
 80019c8:	7f3a      	ldrb	r2, [r7, #28]
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	e009      	b.n	80019e2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	3342      	adds	r3, #66	; 0x42
 80019de:	2202      	movs	r2, #2
 80019e0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019e2:	787b      	ldrb	r3, [r7, #1]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	f200 80d6 	bhi.w	8001b96 <HAL_HCD_HC_SubmitRequest+0x23a>
 80019ea:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80019ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f0:	08001a01 	.word	0x08001a01
 80019f4:	08001b81 	.word	0x08001b81
 80019f8:	08001a6d 	.word	0x08001a6d
 80019fc:	08001af7 	.word	0x08001af7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a00:	7c3b      	ldrb	r3, [r7, #16]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	f040 80c9 	bne.w	8001b9a <HAL_HCD_HC_SubmitRequest+0x23e>
 8001a08:	78bb      	ldrb	r3, [r7, #2]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 80c5 	bne.w	8001b9a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001a10:	8b3b      	ldrh	r3, [r7, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	440b      	add	r3, r1
 8001a24:	3351      	adds	r3, #81	; 0x51
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a2a:	78fa      	ldrb	r2, [r7, #3]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	3351      	adds	r3, #81	; 0x51
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10a      	bne.n	8001a56 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	440b      	add	r3, r1
 8001a4e:	3342      	adds	r3, #66	; 0x42
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a54:	e0a1      	b.n	8001b9a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	3342      	adds	r3, #66	; 0x42
 8001a66:	2202      	movs	r2, #2
 8001a68:	701a      	strb	r2, [r3, #0]
      break;
 8001a6a:	e096      	b.n	8001b9a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a6c:	78bb      	ldrb	r3, [r7, #2]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d120      	bne.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a72:	78fa      	ldrb	r2, [r7, #3]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	440b      	add	r3, r1
 8001a80:	3351      	adds	r3, #81	; 0x51
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10a      	bne.n	8001a9e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	3342      	adds	r3, #66	; 0x42
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a9c:	e07e      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	440b      	add	r3, r1
 8001aac:	3342      	adds	r3, #66	; 0x42
 8001aae:	2202      	movs	r2, #2
 8001ab0:	701a      	strb	r2, [r3, #0]
      break;
 8001ab2:	e073      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3350      	adds	r3, #80	; 0x50
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10a      	bne.n	8001ae0 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aca:	78fa      	ldrb	r2, [r7, #3]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	440b      	add	r3, r1
 8001ad8:	3342      	adds	r3, #66	; 0x42
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
      break;
 8001ade:	e05d      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	440b      	add	r3, r1
 8001aee:	3342      	adds	r3, #66	; 0x42
 8001af0:	2202      	movs	r2, #2
 8001af2:	701a      	strb	r2, [r3, #0]
      break;
 8001af4:	e052      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001af6:	78bb      	ldrb	r3, [r7, #2]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d120      	bne.n	8001b3e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	3351      	adds	r3, #81	; 0x51
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10a      	bne.n	8001b28 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	3342      	adds	r3, #66	; 0x42
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b26:	e039      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	3342      	adds	r3, #66	; 0x42
 8001b38:	2202      	movs	r2, #2
 8001b3a:	701a      	strb	r2, [r3, #0]
      break;
 8001b3c:	e02e      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3350      	adds	r3, #80	; 0x50
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10a      	bne.n	8001b6a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b54:	78fa      	ldrb	r2, [r7, #3]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	3342      	adds	r3, #66	; 0x42
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
      break;
 8001b68:	e018      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b6a:	78fa      	ldrb	r2, [r7, #3]
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	440b      	add	r3, r1
 8001b78:	3342      	adds	r3, #66	; 0x42
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	701a      	strb	r2, [r3, #0]
      break;
 8001b7e:	e00d      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3342      	adds	r3, #66	; 0x42
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
      break;
 8001b94:	e002      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001b96:	bf00      	nop
 8001b98:	e000      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001b9a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	3344      	adds	r3, #68	; 0x44
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	8b39      	ldrh	r1, [r7, #24]
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4403      	add	r3, r0
 8001bc0:	3348      	adds	r3, #72	; 0x48
 8001bc2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bc4:	78fa      	ldrb	r2, [r7, #3]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	440b      	add	r3, r1
 8001bd2:	335c      	adds	r3, #92	; 0x5c
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	334c      	adds	r3, #76	; 0x4c
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3339      	adds	r3, #57	; 0x39
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c00:	78fa      	ldrb	r2, [r7, #3]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	335d      	adds	r3, #93	; 0x5d
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	3338      	adds	r3, #56	; 0x38
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	18d1      	adds	r1, r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f004 fc66 	bl	8006500 <USB_HC_StartXfer>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop

08001c40 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f004 f983 	bl	8005f62 <USB_GetMode>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	f040 80ef 	bne.w	8001e42 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 f967 	bl	8005f3c <USB_ReadInterrupts>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80e5 	beq.w	8001e40 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f004 f95e 	bl	8005f3c <USB_ReadInterrupts>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c8a:	d104      	bne.n	8001c96 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 f94e 	bl	8005f3c <USB_ReadInterrupts>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001caa:	d104      	bne.n	8001cb6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cb4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f004 f93e 	bl	8005f3c <USB_ReadInterrupts>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cca:	d104      	bne.n	8001cd6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f004 f92e 	bl	8005f3c <USB_ReadInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d103      	bne.n	8001cf2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 f920 	bl	8005f3c <USB_ReadInterrupts>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d06:	d115      	bne.n	8001d34 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d10:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d108      	bne.n	8001d34 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f006 fed6 	bl	8008ad4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f004 fa16 	bl	8006160 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f004 f8ff 	bl	8005f3c <USB_ReadInterrupts>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d48:	d102      	bne.n	8001d50 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f001 f966 	bl	800301c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f004 f8f1 	bl	8005f3c <USB_ReadInterrupts>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d106      	bne.n	8001d72 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f006 fe99 	bl	8008a9c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2208      	movs	r2, #8
 8001d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f004 f8e0 	bl	8005f3c <USB_ReadInterrupts>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d86:	d138      	bne.n	8001dfa <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f004 fcfb 	bl	8006788 <USB_HC_ReadInterrupt>
 8001d92:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e025      	b.n	8001de6 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	fa22 f303 	lsr.w	r3, r2, r3
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d018      	beq.n	8001de0 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	015a      	lsls	r2, r3, #5
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dc4:	d106      	bne.n	8001dd4 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4619      	mov	r1, r3
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f8cf 	bl	8001f70 <HCD_HC_IN_IRQHandler>
 8001dd2:	e005      	b.n	8001de0 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	4619      	mov	r1, r3
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fcfd 	bl	80027da <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3301      	adds	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d3d4      	bcc.n	8001d9a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 f89c 	bl	8005f3c <USB_ReadInterrupts>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b10      	cmp	r3, #16
 8001e0c:	d101      	bne.n	8001e12 <HAL_HCD_IRQHandler+0x1d2>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <HAL_HCD_IRQHandler+0x1d4>
 8001e12:	2300      	movs	r3, #0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d014      	beq.n	8001e42 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699a      	ldr	r2, [r3, #24]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0210 	bic.w	r2, r2, #16
 8001e26:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f001 f84b 	bl	8002ec4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	699a      	ldr	r2, [r3, #24]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0210 	orr.w	r2, r2, #16
 8001e3c:	619a      	str	r2, [r3, #24]
 8001e3e:	e000      	b.n	8001e42 <HAL_HCD_IRQHandler+0x202>
      return;
 8001e40:	bf00      	nop
    }
  }
}
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_HCD_Start+0x16>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e013      	b.n	8001e86 <HAL_HCD_Start+0x3e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 ff73 	bl	8005d56 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 f9d6 	bl	8006228 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_HCD_Stop+0x16>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e00d      	b.n	8001ec0 <HAL_HCD_Stop+0x32>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f004 fdb5 	bl	8006a20 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f004 f97d 	bl	80061d4 <USB_ResetPort>
 8001eda:	4603      	mov	r3, r0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ef0:	78fa      	ldrb	r2, [r7, #3]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	440b      	add	r3, r1
 8001efe:	335c      	adds	r3, #92	; 0x5c
 8001f00:	781b      	ldrb	r3, [r3, #0]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	334c      	adds	r3, #76	; 0x4c
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f004 f9bf 	bl	80062c8 <USB_GetCurrentFrame>
 8001f4a:	4603      	mov	r3, r0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f004 f99a 	bl	800629a <USB_GetHostSpeed>
 8001f66:	4603      	mov	r3, r0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d119      	bne.n	8001fd4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fac:	461a      	mov	r2, r3
 8001fae:	2304      	movs	r3, #4
 8001fb0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	0151      	lsls	r1, r2, #5
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	440a      	add	r2, r1
 8001fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	60d3      	str	r3, [r2, #12]
 8001fd2:	e0ce      	b.n	8002172 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fea:	d12c      	bne.n	8002046 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ffe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	335d      	adds	r3, #93	; 0x5d
 8002010:	2207      	movs	r2, #7
 8002012:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	0151      	lsls	r1, r2, #5
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	440a      	add	r2, r1
 800202a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f004 fbb3 	bl	80067aa <USB_HC_Halt>
 8002044:	e095      	b.n	8002172 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4413      	add	r3, r2
 800204e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b20      	cmp	r3, #32
 800205a:	d109      	bne.n	8002070 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4413      	add	r3, r2
 8002064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002068:	461a      	mov	r2, r3
 800206a:	2320      	movs	r3, #32
 800206c:	6093      	str	r3, [r2, #8]
 800206e:	e080      	b.n	8002172 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4413      	add	r3, r2
 8002078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b08      	cmp	r3, #8
 8002084:	d134      	bne.n	80020f0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	0151      	lsls	r1, r2, #5
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	440a      	add	r2, r1
 800209c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	440b      	add	r3, r1
 80020b4:	335d      	adds	r3, #93	; 0x5d
 80020b6:	2205      	movs	r2, #5
 80020b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c6:	461a      	mov	r2, r3
 80020c8:	2310      	movs	r3, #16
 80020ca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d8:	461a      	mov	r2, r3
 80020da:	2308      	movs	r3, #8
 80020dc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f004 fb5e 	bl	80067aa <USB_HC_Halt>
 80020ee:	e040      	b.n	8002172 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002106:	d134      	bne.n	8002172 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	0151      	lsls	r1, r2, #5
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	440a      	add	r2, r1
 800211e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f004 fb39 	bl	80067aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4413      	add	r3, r2
 8002140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002144:	461a      	mov	r2, r3
 8002146:	2310      	movs	r3, #16
 8002148:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	335d      	adds	r3, #93	; 0x5d
 800215a:	2208      	movs	r2, #8
 800215c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216a:	461a      	mov	r2, r3
 800216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002170:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002188:	d122      	bne.n	80021d0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	0151      	lsls	r1, r2, #5
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	440a      	add	r2, r1
 80021a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f004 faf8 	bl	80067aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c6:	461a      	mov	r2, r3
 80021c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021cc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80021ce:	e300      	b.n	80027d2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	f040 80fd 	bne.w	80023e2 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01b      	beq.n	8002228 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	3348      	adds	r3, #72	; 0x48
 8002200:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	0159      	lsls	r1, r3, #5
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	440b      	add	r3, r1
 800220a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002214:	1ad1      	subs	r1, r2, r3
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4403      	add	r3, r0
 8002224:	334c      	adds	r3, #76	; 0x4c
 8002226:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	440b      	add	r3, r1
 8002236:	335d      	adds	r3, #93	; 0x5d
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	440b      	add	r3, r1
 800224a:	3358      	adds	r3, #88	; 0x58
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225c:	461a      	mov	r2, r3
 800225e:	2301      	movs	r3, #1
 8002260:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	440b      	add	r3, r1
 8002270:	333f      	adds	r3, #63	; 0x3f
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	333f      	adds	r3, #63	; 0x3f
 8002288:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800228a:	2b02      	cmp	r3, #2
 800228c:	d121      	bne.n	80022d2 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	0151      	lsls	r1, r2, #5
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	440a      	add	r2, r1
 80022a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f004 fa76 	bl	80067aa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	461a      	mov	r2, r3
 80022cc:	2310      	movs	r3, #16
 80022ce:	6093      	str	r3, [r2, #8]
 80022d0:	e070      	b.n	80023b4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	333f      	adds	r3, #63	; 0x3f
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d12a      	bne.n	800233e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	0151      	lsls	r1, r2, #5
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	440a      	add	r2, r1
 80022fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002302:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002306:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	440b      	add	r3, r1
 8002316:	335c      	adds	r3, #92	; 0x5c
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	b2d8      	uxtb	r0, r3
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	335c      	adds	r3, #92	; 0x5c
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	4601      	mov	r1, r0
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f006 fbda 	bl	8008af0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800233c:	e03a      	b.n	80023b4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	440b      	add	r3, r1
 800234c:	333f      	adds	r3, #63	; 0x3f
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d12f      	bne.n	80023b4 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	335c      	adds	r3, #92	; 0x5c
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	3350      	adds	r3, #80	; 0x50
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	f083 0301 	eor.w	r3, r3, #1
 800237e:	b2d8      	uxtb	r0, r3
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	3350      	adds	r3, #80	; 0x50
 8002390:	4602      	mov	r2, r0
 8002392:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	b2d8      	uxtb	r0, r3
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	440b      	add	r3, r1
 80023a6:	335c      	adds	r3, #92	; 0x5c
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	4601      	mov	r1, r0
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f006 fb9e 	bl	8008af0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	440b      	add	r3, r1
 80023c2:	3350      	adds	r3, #80	; 0x50
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	f083 0301 	eor.w	r3, r3, #1
 80023ca:	b2d8      	uxtb	r0, r3
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	440b      	add	r3, r1
 80023da:	3350      	adds	r3, #80	; 0x50
 80023dc:	4602      	mov	r2, r0
 80023de:	701a      	strb	r2, [r3, #0]
}
 80023e0:	e1f7      	b.n	80027d2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	f040 811a 	bne.w	800262e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4413      	add	r3, r2
 8002402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	0151      	lsls	r1, r2, #5
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	440a      	add	r2, r1
 8002410:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002414:	f023 0302 	bic.w	r3, r3, #2
 8002418:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	335d      	adds	r3, #93	; 0x5d
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d10a      	bne.n	8002446 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	440b      	add	r3, r1
 800243e:	335c      	adds	r3, #92	; 0x5c
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	e0d9      	b.n	80025fa <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	335d      	adds	r3, #93	; 0x5d
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b05      	cmp	r3, #5
 800245a:	d10a      	bne.n	8002472 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	335c      	adds	r3, #92	; 0x5c
 800246c:	2205      	movs	r2, #5
 800246e:	701a      	strb	r2, [r3, #0]
 8002470:	e0c3      	b.n	80025fa <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	440b      	add	r3, r1
 8002480:	335d      	adds	r3, #93	; 0x5d
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b06      	cmp	r3, #6
 8002486:	d00a      	beq.n	800249e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	335d      	adds	r3, #93	; 0x5d
 8002498:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800249a:	2b08      	cmp	r3, #8
 800249c:	d156      	bne.n	800254c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	440b      	add	r3, r1
 80024ac:	3358      	adds	r3, #88	; 0x58
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	1c59      	adds	r1, r3, #1
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4403      	add	r3, r0
 80024c0:	3358      	adds	r3, #88	; 0x58
 80024c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	440b      	add	r3, r1
 80024d2:	3358      	adds	r3, #88	; 0x58
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d914      	bls.n	8002504 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	3358      	adds	r3, #88	; 0x58
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	440b      	add	r3, r1
 80024fc:	335c      	adds	r3, #92	; 0x5c
 80024fe:	2204      	movs	r2, #4
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	e009      	b.n	8002518 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	335c      	adds	r3, #92	; 0x5c
 8002514:	2202      	movs	r2, #2
 8002516:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800252e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002536:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	461a      	mov	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e056      	b.n	80025fa <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	440b      	add	r3, r1
 800255a:	335d      	adds	r3, #93	; 0x5d
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d123      	bne.n	80025aa <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	440b      	add	r3, r1
 8002570:	335c      	adds	r3, #92	; 0x5c
 8002572:	2202      	movs	r2, #2
 8002574:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800258c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002594:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a2:	461a      	mov	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	e027      	b.n	80025fa <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	440b      	add	r3, r1
 80025b8:	335d      	adds	r3, #93	; 0x5d
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b07      	cmp	r3, #7
 80025be:	d11c      	bne.n	80025fa <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	440b      	add	r3, r1
 80025ce:	3358      	adds	r3, #88	; 0x58
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	1c59      	adds	r1, r3, #1
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4403      	add	r3, r0
 80025e2:	3358      	adds	r3, #88	; 0x58
 80025e4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	335c      	adds	r3, #92	; 0x5c
 80025f6:	2204      	movs	r2, #4
 80025f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002606:	461a      	mov	r2, r3
 8002608:	2302      	movs	r3, #2
 800260a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	b2d8      	uxtb	r0, r3
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	335c      	adds	r3, #92	; 0x5c
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	4601      	mov	r1, r0
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f006 fa62 	bl	8008af0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800262c:	e0d1      	b.n	80027d2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002640:	2b80      	cmp	r3, #128	; 0x80
 8002642:	d13e      	bne.n	80026c2 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	0151      	lsls	r1, r2, #5
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	440a      	add	r2, r1
 800265a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800265e:	f043 0302 	orr.w	r3, r3, #2
 8002662:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	440b      	add	r3, r1
 8002672:	3358      	adds	r3, #88	; 0x58
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	1c59      	adds	r1, r3, #1
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4403      	add	r3, r0
 8002686:	3358      	adds	r3, #88	; 0x58
 8002688:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	335d      	adds	r3, #93	; 0x5d
 800269a:	2206      	movs	r2, #6
 800269c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f004 f87e 	bl	80067aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	461a      	mov	r2, r3
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	6093      	str	r3, [r2, #8]
}
 80026c0:	e087      	b.n	80027d2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b10      	cmp	r3, #16
 80026d6:	d17c      	bne.n	80027d2 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	440b      	add	r3, r1
 80026e6:	333f      	adds	r3, #63	; 0x3f
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d122      	bne.n	8002734 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	440b      	add	r3, r1
 80026fc:	3358      	adds	r3, #88	; 0x58
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	0151      	lsls	r1, r2, #5
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	440a      	add	r2, r1
 8002718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800271c:	f043 0302 	orr.w	r3, r3, #2
 8002720:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f004 f83c 	bl	80067aa <USB_HC_Halt>
 8002732:	e045      	b.n	80027c0 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	440b      	add	r3, r1
 8002742:	333f      	adds	r3, #63	; 0x3f
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	440b      	add	r3, r1
 8002758:	333f      	adds	r3, #63	; 0x3f
 800275a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800275c:	2b02      	cmp	r3, #2
 800275e:	d12f      	bne.n	80027c0 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	3358      	adds	r3, #88	; 0x58
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d121      	bne.n	80027c0 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	440b      	add	r3, r1
 800278a:	335d      	adds	r3, #93	; 0x5d
 800278c:	2203      	movs	r2, #3
 800278e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	0151      	lsls	r1, r2, #5
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	440a      	add	r2, r1
 80027a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027aa:	f043 0302 	orr.w	r3, r3, #2
 80027ae:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 fff5 	bl	80067aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027cc:	461a      	mov	r2, r3
 80027ce:	2310      	movs	r3, #16
 80027d0:	6093      	str	r3, [r2, #8]
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b04      	cmp	r3, #4
 8002808:	d119      	bne.n	800283e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4413      	add	r3, r2
 8002812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002816:	461a      	mov	r2, r3
 8002818:	2304      	movs	r3, #4
 800281a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	0151      	lsls	r1, r2, #5
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	440a      	add	r2, r1
 8002832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002836:	f043 0302 	orr.w	r3, r3, #2
 800283a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800283c:	e33e      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b20      	cmp	r3, #32
 8002852:	d141      	bne.n	80028d8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	461a      	mov	r2, r3
 8002862:	2320      	movs	r3, #32
 8002864:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	333d      	adds	r3, #61	; 0x3d
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	f040 831f 	bne.w	8002ebc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	440b      	add	r3, r1
 800288c:	333d      	adds	r3, #61	; 0x3d
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	335c      	adds	r3, #92	; 0x5c
 80028a2:	2202      	movs	r2, #2
 80028a4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	0151      	lsls	r1, r2, #5
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	440a      	add	r2, r1
 80028bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 ff6a 	bl	80067aa <USB_HC_Halt>
}
 80028d6:	e2f1      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b40      	cmp	r3, #64	; 0x40
 80028ec:	d13f      	bne.n	800296e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	335d      	adds	r3, #93	; 0x5d
 80028fe:	2204      	movs	r2, #4
 8002900:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	440b      	add	r3, r1
 8002910:	333d      	adds	r3, #61	; 0x3d
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	3358      	adds	r3, #88	; 0x58
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	0151      	lsls	r1, r2, #5
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	440a      	add	r2, r1
 8002940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002944:	f043 0302 	orr.w	r3, r3, #2
 8002948:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f003 ff28 	bl	80067aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	461a      	mov	r2, r3
 8002968:	2340      	movs	r3, #64	; 0x40
 800296a:	6093      	str	r3, [r2, #8]
}
 800296c:	e2a6      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002984:	d122      	bne.n	80029cc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	0151      	lsls	r1, r2, #5
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	440a      	add	r2, r1
 800299c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 fefa 	bl	80067aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c2:	461a      	mov	r2, r3
 80029c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029c8:	6093      	str	r3, [r2, #8]
}
 80029ca:	e277      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d135      	bne.n	8002a4e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	440b      	add	r3, r1
 80029f0:	3358      	adds	r3, #88	; 0x58
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	0151      	lsls	r1, r2, #5
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	440a      	add	r2, r1
 8002a0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a10:	f043 0302 	orr.w	r3, r3, #2
 8002a14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f003 fec2 	bl	80067aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a32:	461a      	mov	r2, r3
 8002a34:	2301      	movs	r3, #1
 8002a36:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	335d      	adds	r3, #93	; 0x5d
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
}
 8002a4c:	e236      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d12b      	bne.n	8002abc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a70:	461a      	mov	r2, r3
 8002a72:	2308      	movs	r3, #8
 8002a74:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	0151      	lsls	r1, r2, #5
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	440a      	add	r2, r1
 8002a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a90:	f043 0302 	orr.w	r3, r3, #2
 8002a94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f003 fe82 	bl	80067aa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	440b      	add	r3, r1
 8002ab4:	335d      	adds	r3, #93	; 0x5d
 8002ab6:	2205      	movs	r2, #5
 8002ab8:	701a      	strb	r2, [r3, #0]
}
 8002aba:	e1ff      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	d155      	bne.n	8002b7e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	440b      	add	r3, r1
 8002ae0:	3358      	adds	r3, #88	; 0x58
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	335d      	adds	r3, #93	; 0x5d
 8002af6:	2203      	movs	r2, #3
 8002af8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	333d      	adds	r3, #61	; 0x3d
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d114      	bne.n	8002b3a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	333c      	adds	r3, #60	; 0x3c
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	440b      	add	r3, r1
 8002b34:	333d      	adds	r3, #61	; 0x3d
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	0151      	lsls	r1, r2, #5
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	440a      	add	r2, r1
 8002b50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f003 fe20 	bl	80067aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b76:	461a      	mov	r2, r3
 8002b78:	2310      	movs	r3, #16
 8002b7a:	6093      	str	r3, [r2, #8]
}
 8002b7c:	e19e      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b90:	2b80      	cmp	r3, #128	; 0x80
 8002b92:	d12b      	bne.n	8002bec <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	0151      	lsls	r1, r2, #5
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	440a      	add	r2, r1
 8002baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f003 fdf3 	bl	80067aa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	335d      	adds	r3, #93	; 0x5d
 8002bd4:	2206      	movs	r2, #6
 8002bd6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be4:	461a      	mov	r2, r3
 8002be6:	2380      	movs	r3, #128	; 0x80
 8002be8:	6093      	str	r3, [r2, #8]
}
 8002bea:	e167      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c02:	d135      	bne.n	8002c70 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	0151      	lsls	r1, r2, #5
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	440a      	add	r2, r1
 8002c1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c1e:	f043 0302 	orr.w	r3, r3, #2
 8002c22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f003 fdbb 	bl	80067aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c40:	461a      	mov	r2, r3
 8002c42:	2310      	movs	r3, #16
 8002c44:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c52:	461a      	mov	r2, r3
 8002c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c58:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	440b      	add	r3, r1
 8002c68:	335d      	adds	r3, #93	; 0x5d
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	701a      	strb	r2, [r3, #0]
}
 8002c6e:	e125      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	f040 811a 	bne.w	8002ebc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	0151      	lsls	r1, r2, #5
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	440a      	add	r2, r1
 8002c9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ca2:	f023 0302 	bic.w	r3, r3, #2
 8002ca6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	440b      	add	r3, r1
 8002cb6:	335d      	adds	r3, #93	; 0x5d
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d137      	bne.n	8002d2e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	440b      	add	r3, r1
 8002ccc:	335c      	adds	r3, #92	; 0x5c
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	440b      	add	r3, r1
 8002ce0:	333f      	adds	r3, #63	; 0x3f
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d00b      	beq.n	8002d00 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	333f      	adds	r3, #63	; 0x3f
 8002cf8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	f040 80c5 	bne.w	8002e8a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3351      	adds	r3, #81	; 0x51
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	f083 0301 	eor.w	r3, r3, #1
 8002d16:	b2d8      	uxtb	r0, r3
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	3351      	adds	r3, #81	; 0x51
 8002d28:	4602      	mov	r2, r0
 8002d2a:	701a      	strb	r2, [r3, #0]
 8002d2c:	e0ad      	b.n	8002e8a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	335d      	adds	r3, #93	; 0x5d
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d10a      	bne.n	8002d5a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	335c      	adds	r3, #92	; 0x5c
 8002d54:	2202      	movs	r2, #2
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	e097      	b.n	8002e8a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	440b      	add	r3, r1
 8002d68:	335d      	adds	r3, #93	; 0x5d
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d10a      	bne.n	8002d86 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	335c      	adds	r3, #92	; 0x5c
 8002d80:	2202      	movs	r2, #2
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e081      	b.n	8002e8a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	335d      	adds	r3, #93	; 0x5d
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	d10a      	bne.n	8002db2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	335c      	adds	r3, #92	; 0x5c
 8002dac:	2205      	movs	r2, #5
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e06b      	b.n	8002e8a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	440b      	add	r3, r1
 8002dc0:	335d      	adds	r3, #93	; 0x5d
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	d00a      	beq.n	8002dde <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	335d      	adds	r3, #93	; 0x5d
 8002dd8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d155      	bne.n	8002e8a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	440b      	add	r3, r1
 8002dec:	3358      	adds	r3, #88	; 0x58
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	1c59      	adds	r1, r3, #1
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4403      	add	r3, r0
 8002e00:	3358      	adds	r3, #88	; 0x58
 8002e02:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	440b      	add	r3, r1
 8002e12:	3358      	adds	r3, #88	; 0x58
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d914      	bls.n	8002e44 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	440b      	add	r3, r1
 8002e28:	3358      	adds	r3, #88	; 0x58
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	440b      	add	r3, r1
 8002e3c:	335c      	adds	r3, #92	; 0x5c
 8002e3e:	2204      	movs	r2, #4
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	e009      	b.n	8002e58 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	440b      	add	r3, r1
 8002e52:	335c      	adds	r3, #92	; 0x5c
 8002e54:	2202      	movs	r2, #2
 8002e56:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e6e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e76:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e84:	461a      	mov	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e96:	461a      	mov	r2, r3
 8002e98:	2302      	movs	r3, #2
 8002e9a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	b2d8      	uxtb	r0, r3
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	440b      	add	r3, r1
 8002eae:	335c      	adds	r3, #92	; 0x5c
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4601      	mov	r1, r0
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f005 fe1a 	bl	8008af0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ebc:	bf00      	nop
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	0c5b      	lsrs	r3, r3, #17
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ef8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d003      	beq.n	8002f08 <HCD_RXQLVL_IRQHandler+0x44>
 8002f00:	2b05      	cmp	r3, #5
 8002f02:	f000 8082 	beq.w	800300a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f06:	e083      	b.n	8003010 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d07f      	beq.n	800300e <HCD_RXQLVL_IRQHandler+0x14a>
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3344      	adds	r3, #68	; 0x44
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d074      	beq.n	800300e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	440b      	add	r3, r1
 8002f36:	3344      	adds	r3, #68	; 0x44
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	b292      	uxth	r2, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f002 ffd3 	bl	8005eea <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	440b      	add	r3, r1
 8002f52:	3344      	adds	r3, #68	; 0x44
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	18d1      	adds	r1, r2, r3
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4403      	add	r3, r0
 8002f68:	3344      	adds	r3, #68	; 0x44
 8002f6a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	440b      	add	r3, r1
 8002f7a:	334c      	adds	r3, #76	; 0x4c
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	18d1      	adds	r1, r2, r3
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4403      	add	r3, r0
 8002f90:	334c      	adds	r3, #76	; 0x4c
 8002f92:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <HCD_RXQLVL_IRQHandler+0x154>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d031      	beq.n	800300e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fc0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fc8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	440b      	add	r3, r1
 8002fea:	3350      	adds	r3, #80	; 0x50
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	f083 0301 	eor.w	r3, r3, #1
 8002ff2:	b2d8      	uxtb	r0, r3
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	440b      	add	r3, r1
 8003002:	3350      	adds	r3, #80	; 0x50
 8003004:	4602      	mov	r2, r0
 8003006:	701a      	strb	r2, [r3, #0]
      break;
 8003008:	e001      	b.n	800300e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800300a:	bf00      	nop
 800300c:	e000      	b.n	8003010 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800300e:	bf00      	nop
  }
}
 8003010:	bf00      	nop
 8003012:	3728      	adds	r7, #40	; 0x28
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	1ff80000 	.word	0x1ff80000

0800301c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003048:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b02      	cmp	r3, #2
 8003052:	d10b      	bne.n	800306c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b01      	cmp	r3, #1
 800305c:	d102      	bne.n	8003064 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f005 fd2a 	bl	8008ab8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f043 0302 	orr.w	r3, r3, #2
 800306a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b08      	cmp	r3, #8
 8003074:	d132      	bne.n	80030dc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f043 0308 	orr.w	r3, r3, #8
 800307c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b04      	cmp	r3, #4
 8003086:	d126      	bne.n	80030d6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d113      	bne.n	80030b8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003096:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800309a:	d106      	bne.n	80030aa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2102      	movs	r1, #2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 f85c 	bl	8006160 <USB_InitFSLSPClkSel>
 80030a8:	e011      	b.n	80030ce <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2101      	movs	r1, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f003 f855 	bl	8006160 <USB_InitFSLSPClkSel>
 80030b6:	e00a      	b.n	80030ce <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d106      	bne.n	80030ce <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030c6:	461a      	mov	r2, r3
 80030c8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80030cc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f005 fd1c 	bl	8008b0c <HAL_HCD_PortEnabled_Callback>
 80030d4:	e002      	b.n	80030dc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f005 fd26 	bl	8008b28 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d103      	bne.n	80030ee <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f043 0320 	orr.w	r3, r3, #32
 80030ec:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030f4:	461a      	mov	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	6013      	str	r3, [r2, #0]
}
 80030fa:	bf00      	nop
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e11f      	b.n	8003356 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fd fce2 	bl	8000af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2224      	movs	r2, #36	; 0x24
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003168:	f001 f9de 	bl	8004528 <HAL_RCC_GetPCLK1Freq>
 800316c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4a7b      	ldr	r2, [pc, #492]	; (8003360 <HAL_I2C_Init+0x25c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d807      	bhi.n	8003188 <HAL_I2C_Init+0x84>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a7a      	ldr	r2, [pc, #488]	; (8003364 <HAL_I2C_Init+0x260>)
 800317c:	4293      	cmp	r3, r2
 800317e:	bf94      	ite	ls
 8003180:	2301      	movls	r3, #1
 8003182:	2300      	movhi	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	e006      	b.n	8003196 <HAL_I2C_Init+0x92>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4a77      	ldr	r2, [pc, #476]	; (8003368 <HAL_I2C_Init+0x264>)
 800318c:	4293      	cmp	r3, r2
 800318e:	bf94      	ite	ls
 8003190:	2301      	movls	r3, #1
 8003192:	2300      	movhi	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0db      	b.n	8003356 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4a72      	ldr	r2, [pc, #456]	; (800336c <HAL_I2C_Init+0x268>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	0c9b      	lsrs	r3, r3, #18
 80031a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4a64      	ldr	r2, [pc, #400]	; (8003360 <HAL_I2C_Init+0x25c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d802      	bhi.n	80031d8 <HAL_I2C_Init+0xd4>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	3301      	adds	r3, #1
 80031d6:	e009      	b.n	80031ec <HAL_I2C_Init+0xe8>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	4a63      	ldr	r2, [pc, #396]	; (8003370 <HAL_I2C_Init+0x26c>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	3301      	adds	r3, #1
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4956      	ldr	r1, [pc, #344]	; (8003360 <HAL_I2C_Init+0x25c>)
 8003208:	428b      	cmp	r3, r1
 800320a:	d80d      	bhi.n	8003228 <HAL_I2C_Init+0x124>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1e59      	subs	r1, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	fbb1 f3f3 	udiv	r3, r1, r3
 800321a:	3301      	adds	r3, #1
 800321c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003220:	2b04      	cmp	r3, #4
 8003222:	bf38      	it	cc
 8003224:	2304      	movcc	r3, #4
 8003226:	e04f      	b.n	80032c8 <HAL_I2C_Init+0x1c4>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d111      	bne.n	8003254 <HAL_I2C_Init+0x150>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	1e58      	subs	r0, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	440b      	add	r3, r1
 800323e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003242:	3301      	adds	r3, #1
 8003244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e012      	b.n	800327a <HAL_I2C_Init+0x176>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1e58      	subs	r0, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	0099      	lsls	r1, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	fbb0 f3f3 	udiv	r3, r0, r3
 800326a:	3301      	adds	r3, #1
 800326c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_I2C_Init+0x17e>
 800327e:	2301      	movs	r3, #1
 8003280:	e022      	b.n	80032c8 <HAL_I2C_Init+0x1c4>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10e      	bne.n	80032a8 <HAL_I2C_Init+0x1a4>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1e58      	subs	r0, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6859      	ldr	r1, [r3, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	440b      	add	r3, r1
 8003298:	fbb0 f3f3 	udiv	r3, r0, r3
 800329c:	3301      	adds	r3, #1
 800329e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a6:	e00f      	b.n	80032c8 <HAL_I2C_Init+0x1c4>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1e58      	subs	r0, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	0099      	lsls	r1, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80032be:	3301      	adds	r3, #1
 80032c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	6809      	ldr	r1, [r1, #0]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69da      	ldr	r2, [r3, #28]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6911      	ldr	r1, [r2, #16]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68d2      	ldr	r2, [r2, #12]
 8003302:	4311      	orrs	r1, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	430b      	orrs	r3, r1
 800330a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	000186a0 	.word	0x000186a0
 8003364:	001e847f 	.word	0x001e847f
 8003368:	003d08ff 	.word	0x003d08ff
 800336c:	431bde83 	.word	0x431bde83
 8003370:	10624dd3 	.word	0x10624dd3

08003374 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e128      	b.n	80035d8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a90      	ldr	r2, [pc, #576]	; (80035e0 <HAL_I2S_Init+0x26c>)
 800339e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7fd fbef 	bl	8000b84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033bc:	f023 030f 	bic.w	r3, r3, #15
 80033c0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2202      	movs	r2, #2
 80033c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d060      	beq.n	8003494 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033da:	2310      	movs	r3, #16
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e001      	b.n	80033e4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033e0:	2320      	movs	r3, #32
 80033e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d802      	bhi.n	80033f2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033f2:	2001      	movs	r0, #1
 80033f4:	f001 f9b0 	bl	8004758 <HAL_RCCEx_GetPeriphCLKFreq>
 80033f8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003402:	d125      	bne.n	8003450 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d010      	beq.n	800342e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	fbb2 f2f3 	udiv	r2, r2, r3
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	461a      	mov	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	3305      	adds	r3, #5
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	e01f      	b.n	800346e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	fbb2 f2f3 	udiv	r2, r2, r3
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	461a      	mov	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	3305      	adds	r3, #5
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	e00e      	b.n	800346e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	fbb2 f2f3 	udiv	r2, r2, r3
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	461a      	mov	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	fbb2 f3f3 	udiv	r3, r2, r3
 800346a:	3305      	adds	r3, #5
 800346c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4a5c      	ldr	r2, [pc, #368]	; (80035e4 <HAL_I2S_Init+0x270>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	08db      	lsrs	r3, r3, #3
 8003478:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	085b      	lsrs	r3, r3, #1
 800348a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	e003      	b.n	800349c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003494:	2302      	movs	r3, #2
 8003496:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d902      	bls.n	80034a8 <HAL_I2S_Init+0x134>
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2bff      	cmp	r3, #255	; 0xff
 80034a6:	d907      	bls.n	80034b8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ac:	f043 0210 	orr.w	r2, r3, #16
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e08f      	b.n	80035d8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	ea42 0103 	orr.w	r1, r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034d6:	f023 030f 	bic.w	r3, r3, #15
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6851      	ldr	r1, [r2, #4]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6892      	ldr	r2, [r2, #8]
 80034e2:	4311      	orrs	r1, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68d2      	ldr	r2, [r2, #12]
 80034e8:	4311      	orrs	r1, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6992      	ldr	r2, [r2, #24]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d161      	bne.n	80035c8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a38      	ldr	r2, [pc, #224]	; (80035e8 <HAL_I2S_Init+0x274>)
 8003508:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a37      	ldr	r2, [pc, #220]	; (80035ec <HAL_I2S_Init+0x278>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d101      	bne.n	8003518 <HAL_I2S_Init+0x1a4>
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_I2S_Init+0x27c>)
 8003516:	e001      	b.n	800351c <HAL_I2S_Init+0x1a8>
 8003518:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	4932      	ldr	r1, [pc, #200]	; (80035ec <HAL_I2S_Init+0x278>)
 8003524:	428a      	cmp	r2, r1
 8003526:	d101      	bne.n	800352c <HAL_I2S_Init+0x1b8>
 8003528:	4a31      	ldr	r2, [pc, #196]	; (80035f0 <HAL_I2S_Init+0x27c>)
 800352a:	e001      	b.n	8003530 <HAL_I2S_Init+0x1bc>
 800352c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003530:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003534:	f023 030f 	bic.w	r3, r3, #15
 8003538:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a2b      	ldr	r2, [pc, #172]	; (80035ec <HAL_I2S_Init+0x278>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d101      	bne.n	8003548 <HAL_I2S_Init+0x1d4>
 8003544:	4b2a      	ldr	r3, [pc, #168]	; (80035f0 <HAL_I2S_Init+0x27c>)
 8003546:	e001      	b.n	800354c <HAL_I2S_Init+0x1d8>
 8003548:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800354c:	2202      	movs	r2, #2
 800354e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a25      	ldr	r2, [pc, #148]	; (80035ec <HAL_I2S_Init+0x278>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d101      	bne.n	800355e <HAL_I2S_Init+0x1ea>
 800355a:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <HAL_I2S_Init+0x27c>)
 800355c:	e001      	b.n	8003562 <HAL_I2S_Init+0x1ee>
 800355e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356e:	d003      	beq.n	8003578 <HAL_I2S_Init+0x204>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d103      	bne.n	8003580 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	e001      	b.n	8003584 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003580:	2300      	movs	r3, #0
 8003582:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	b299      	uxth	r1, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800359a:	4303      	orrs	r3, r0
 800359c:	b29b      	uxth	r3, r3
 800359e:	430b      	orrs	r3, r1
 80035a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80035a2:	4313      	orrs	r3, r2
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	897b      	ldrh	r3, [r7, #10]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035b0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a0d      	ldr	r2, [pc, #52]	; (80035ec <HAL_I2S_Init+0x278>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d101      	bne.n	80035c0 <HAL_I2S_Init+0x24c>
 80035bc:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <HAL_I2S_Init+0x27c>)
 80035be:	e001      	b.n	80035c4 <HAL_I2S_Init+0x250>
 80035c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c4:	897a      	ldrh	r2, [r7, #10]
 80035c6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3720      	adds	r7, #32
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	080036eb 	.word	0x080036eb
 80035e4:	cccccccd 	.word	0xcccccccd
 80035e8:	08003801 	.word	0x08003801
 80035ec:	40003800 	.word	0x40003800
 80035f0:	40003400 	.word	0x40003400

080035f4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	881a      	ldrh	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	1c9a      	adds	r2, r3, #2
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10e      	bne.n	8003684 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003674:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff ffb8 	bl	80035f4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	b292      	uxth	r2, r2
 80036a0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	1c9a      	adds	r2, r3, #2
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10e      	bne.n	80036e2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036d2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ff93 	bl	8003608 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b086      	sub	sp, #24
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b04      	cmp	r3, #4
 8003704:	d13a      	bne.n	800377c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d109      	bne.n	8003724 <I2S_IRQHandler+0x3a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d102      	bne.n	8003724 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff ffb4 	bl	800368c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372a:	2b40      	cmp	r3, #64	; 0x40
 800372c:	d126      	bne.n	800377c <I2S_IRQHandler+0x92>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b20      	cmp	r3, #32
 800373a:	d11f      	bne.n	800377c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800374a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	f043 0202 	orr.w	r2, r3, #2
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff ff50 	bl	800361c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b03      	cmp	r3, #3
 8003786:	d136      	bne.n	80037f6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b02      	cmp	r3, #2
 8003790:	d109      	bne.n	80037a6 <I2S_IRQHandler+0xbc>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379c:	2b80      	cmp	r3, #128	; 0x80
 800379e:	d102      	bne.n	80037a6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ff45 	bl	8003630 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d122      	bne.n	80037f6 <I2S_IRQHandler+0x10c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d11b      	bne.n	80037f6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037cc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e8:	f043 0204 	orr.w	r2, r3, #4
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ff13 	bl	800361c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037f6:	bf00      	nop
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4aa2      	ldr	r2, [pc, #648]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d101      	bne.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800381a:	4ba2      	ldr	r3, [pc, #648]	; (8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800381c:	e001      	b.n	8003822 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800381e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a9b      	ldr	r2, [pc, #620]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d101      	bne.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003838:	4b9a      	ldr	r3, [pc, #616]	; (8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800383a:	e001      	b.n	8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800383c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800384c:	d004      	beq.n	8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 8099 	bne.w	800398a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b02      	cmp	r3, #2
 8003860:	d107      	bne.n	8003872 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f925 	bl	8003abc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d107      	bne.n	800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f9c8 	bl	8003c1c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003892:	2b40      	cmp	r3, #64	; 0x40
 8003894:	d13a      	bne.n	800390c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b00      	cmp	r3, #0
 800389e:	d035      	beq.n	800390c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a7e      	ldr	r2, [pc, #504]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80038aa:	4b7e      	ldr	r3, [pc, #504]	; (8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038ac:	e001      	b.n	80038b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80038ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4979      	ldr	r1, [pc, #484]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038ba:	428b      	cmp	r3, r1
 80038bc:	d101      	bne.n	80038c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80038be:	4b79      	ldr	r3, [pc, #484]	; (8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038c0:	e001      	b.n	80038c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80038c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038ca:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f043 0202 	orr.w	r2, r3, #2
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff fe88 	bl	800361c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b08      	cmp	r3, #8
 8003914:	f040 80be 	bne.w	8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 80b8 	beq.w	8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003932:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a59      	ldr	r2, [pc, #356]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d101      	bne.n	8003942 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800393e:	4b59      	ldr	r3, [pc, #356]	; (8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003940:	e001      	b.n	8003946 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003942:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4954      	ldr	r1, [pc, #336]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800394e:	428b      	cmp	r3, r1
 8003950:	d101      	bne.n	8003956 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003952:	4b54      	ldr	r3, [pc, #336]	; (8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003954:	e001      	b.n	800395a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003956:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800395a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800395e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003960:	2300      	movs	r3, #0
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f043 0204 	orr.w	r2, r3, #4
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff fe4a 	bl	800361c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003988:	e084      	b.n	8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b02      	cmp	r3, #2
 8003992:	d107      	bne.n	80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f8be 	bl	8003b20 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d107      	bne.n	80039be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f8fd 	bl	8003bb8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d12f      	bne.n	8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d02a      	beq.n	8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039e0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2e      	ldr	r2, [pc, #184]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d101      	bne.n	80039f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039ec:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039ee:	e001      	b.n	80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4929      	ldr	r1, [pc, #164]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039fc:	428b      	cmp	r3, r1
 80039fe:	d101      	bne.n	8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a00:	4b28      	ldr	r3, [pc, #160]	; (8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a02:	e001      	b.n	8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a0c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f043 0202 	orr.w	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff fdfa 	bl	800361c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d131      	bne.n	8003a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d02c      	beq.n	8003a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a17      	ldr	r2, [pc, #92]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a46:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a48:	e001      	b.n	8003a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4912      	ldr	r1, [pc, #72]	; (8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a56:	428b      	cmp	r3, r1
 8003a58:	d101      	bne.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a5c:	e001      	b.n	8003a62 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003a5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a66:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a76:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a84:	f043 0204 	orr.w	r2, r3, #4
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff fdc5 	bl	800361c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a92:	e000      	b.n	8003a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a94:	bf00      	nop
}
 8003a96:	bf00      	nop
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40003800 	.word	0x40003800
 8003aa4:	40003400 	.word	0x40003400

08003aa8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	1c99      	adds	r1, r3, #2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6251      	str	r1, [r2, #36]	; 0x24
 8003ace:	881a      	ldrh	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d113      	bne.n	8003b16 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003afc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff ffc9 	bl	8003aa8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	1c99      	adds	r1, r3, #2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6251      	str	r1, [r2, #36]	; 0x24
 8003b32:	8819      	ldrh	r1, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1d      	ldr	r2, [pc, #116]	; (8003bb0 <I2SEx_TxISR_I2SExt+0x90>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <I2SEx_TxISR_I2SExt+0x22>
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <I2SEx_TxISR_I2SExt+0x94>)
 8003b40:	e001      	b.n	8003b46 <I2SEx_TxISR_I2SExt+0x26>
 8003b42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b46:	460a      	mov	r2, r1
 8003b48:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d121      	bne.n	8003ba6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <I2SEx_TxISR_I2SExt+0x90>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d101      	bne.n	8003b70 <I2SEx_TxISR_I2SExt+0x50>
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <I2SEx_TxISR_I2SExt+0x94>)
 8003b6e:	e001      	b.n	8003b74 <I2SEx_TxISR_I2SExt+0x54>
 8003b70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	490d      	ldr	r1, [pc, #52]	; (8003bb0 <I2SEx_TxISR_I2SExt+0x90>)
 8003b7c:	428b      	cmp	r3, r1
 8003b7e:	d101      	bne.n	8003b84 <I2SEx_TxISR_I2SExt+0x64>
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <I2SEx_TxISR_I2SExt+0x94>)
 8003b82:	e001      	b.n	8003b88 <I2SEx_TxISR_I2SExt+0x68>
 8003b84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d106      	bne.n	8003ba6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff ff81 	bl	8003aa8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40003800 	.word	0x40003800
 8003bb4:	40003400 	.word	0x40003400

08003bb8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68d8      	ldr	r0, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	1c99      	adds	r1, r3, #2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bd0:	b282      	uxth	r2, r0
 8003bd2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d113      	bne.n	8003c14 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bfa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff ff4a 	bl	8003aa8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a20      	ldr	r2, [pc, #128]	; (8003cac <I2SEx_RxISR_I2SExt+0x90>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d101      	bne.n	8003c32 <I2SEx_RxISR_I2SExt+0x16>
 8003c2e:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <I2SEx_RxISR_I2SExt+0x94>)
 8003c30:	e001      	b.n	8003c36 <I2SEx_RxISR_I2SExt+0x1a>
 8003c32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c36:	68d8      	ldr	r0, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	1c99      	adds	r1, r3, #2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c42:	b282      	uxth	r2, r0
 8003c44:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d121      	bne.n	8003ca2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a12      	ldr	r2, [pc, #72]	; (8003cac <I2SEx_RxISR_I2SExt+0x90>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d101      	bne.n	8003c6c <I2SEx_RxISR_I2SExt+0x50>
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <I2SEx_RxISR_I2SExt+0x94>)
 8003c6a:	e001      	b.n	8003c70 <I2SEx_RxISR_I2SExt+0x54>
 8003c6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	490d      	ldr	r1, [pc, #52]	; (8003cac <I2SEx_RxISR_I2SExt+0x90>)
 8003c78:	428b      	cmp	r3, r1
 8003c7a:	d101      	bne.n	8003c80 <I2SEx_RxISR_I2SExt+0x64>
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <I2SEx_RxISR_I2SExt+0x94>)
 8003c7e:	e001      	b.n	8003c84 <I2SEx_RxISR_I2SExt+0x68>
 8003c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c88:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d106      	bne.n	8003ca2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ff03 	bl	8003aa8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40003800 	.word	0x40003800
 8003cb0:	40003400 	.word	0x40003400

08003cb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e25b      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d075      	beq.n	8003dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cd2:	4ba3      	ldr	r3, [pc, #652]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d00c      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cde:	4ba0      	ldr	r3, [pc, #640]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d112      	bne.n	8003d10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cea:	4b9d      	ldr	r3, [pc, #628]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cf6:	d10b      	bne.n	8003d10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf8:	4b99      	ldr	r3, [pc, #612]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d05b      	beq.n	8003dbc <HAL_RCC_OscConfig+0x108>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d157      	bne.n	8003dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e236      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d18:	d106      	bne.n	8003d28 <HAL_RCC_OscConfig+0x74>
 8003d1a:	4b91      	ldr	r3, [pc, #580]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a90      	ldr	r2, [pc, #576]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e01d      	b.n	8003d64 <HAL_RCC_OscConfig+0xb0>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x98>
 8003d32:	4b8b      	ldr	r3, [pc, #556]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a8a      	ldr	r2, [pc, #552]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b88      	ldr	r3, [pc, #544]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a87      	ldr	r2, [pc, #540]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e00b      	b.n	8003d64 <HAL_RCC_OscConfig+0xb0>
 8003d4c:	4b84      	ldr	r3, [pc, #528]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a83      	ldr	r2, [pc, #524]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	4b81      	ldr	r3, [pc, #516]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a80      	ldr	r2, [pc, #512]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d013      	beq.n	8003d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fd f9c0 	bl	80010f0 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d74:	f7fd f9bc 	bl	80010f0 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b64      	cmp	r3, #100	; 0x64
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e1fb      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d86:	4b76      	ldr	r3, [pc, #472]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0xc0>
 8003d92:	e014      	b.n	8003dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fd f9ac 	bl	80010f0 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fd f9a8 	bl	80010f0 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e1e7      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dae:	4b6c      	ldr	r3, [pc, #432]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0xe8>
 8003dba:	e000      	b.n	8003dbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d063      	beq.n	8003e92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dca:	4b65      	ldr	r3, [pc, #404]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd6:	4b62      	ldr	r3, [pc, #392]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d11c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de2:	4b5f      	ldr	r3, [pc, #380]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d116      	bne.n	8003e1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dee:	4b5c      	ldr	r3, [pc, #368]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_RCC_OscConfig+0x152>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d001      	beq.n	8003e06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e1bb      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e06:	4b56      	ldr	r3, [pc, #344]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4952      	ldr	r1, [pc, #328]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1a:	e03a      	b.n	8003e92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e24:	4b4f      	ldr	r3, [pc, #316]	; (8003f64 <HAL_RCC_OscConfig+0x2b0>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2a:	f7fd f961 	bl	80010f0 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e32:	f7fd f95d 	bl	80010f0 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e19c      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e44:	4b46      	ldr	r3, [pc, #280]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e50:	4b43      	ldr	r3, [pc, #268]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4940      	ldr	r1, [pc, #256]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	600b      	str	r3, [r1, #0]
 8003e64:	e015      	b.n	8003e92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e66:	4b3f      	ldr	r3, [pc, #252]	; (8003f64 <HAL_RCC_OscConfig+0x2b0>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fd f940 	bl	80010f0 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e74:	f7fd f93c 	bl	80010f0 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e17b      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e86:	4b36      	ldr	r3, [pc, #216]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d030      	beq.n	8003f00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea6:	4b30      	ldr	r3, [pc, #192]	; (8003f68 <HAL_RCC_OscConfig+0x2b4>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7fd f920 	bl	80010f0 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb4:	f7fd f91c 	bl	80010f0 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e15b      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec6:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x200>
 8003ed2:	e015      	b.n	8003f00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed4:	4b24      	ldr	r3, [pc, #144]	; (8003f68 <HAL_RCC_OscConfig+0x2b4>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eda:	f7fd f909 	bl	80010f0 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee2:	f7fd f905 	bl	80010f0 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e144      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f0      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80a0 	beq.w	800404e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f12:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10f      	bne.n	8003f3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4a0e      	ldr	r2, [pc, #56]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2e:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <HAL_RCC_OscConfig+0x2b8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d121      	bne.n	8003f8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f4a:	4b08      	ldr	r3, [pc, #32]	; (8003f6c <HAL_RCC_OscConfig+0x2b8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a07      	ldr	r2, [pc, #28]	; (8003f6c <HAL_RCC_OscConfig+0x2b8>)
 8003f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f56:	f7fd f8cb 	bl	80010f0 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5c:	e011      	b.n	8003f82 <HAL_RCC_OscConfig+0x2ce>
 8003f5e:	bf00      	nop
 8003f60:	40023800 	.word	0x40023800
 8003f64:	42470000 	.word	0x42470000
 8003f68:	42470e80 	.word	0x42470e80
 8003f6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f70:	f7fd f8be 	bl	80010f0 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e0fd      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f82:	4b81      	ldr	r3, [pc, #516]	; (8004188 <HAL_RCC_OscConfig+0x4d4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d106      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x2f0>
 8003f96:	4b7d      	ldr	r3, [pc, #500]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	4a7c      	ldr	r2, [pc, #496]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa2:	e01c      	b.n	8003fde <HAL_RCC_OscConfig+0x32a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b05      	cmp	r3, #5
 8003faa:	d10c      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x312>
 8003fac:	4b77      	ldr	r3, [pc, #476]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	4a76      	ldr	r2, [pc, #472]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 8003fb2:	f043 0304 	orr.w	r3, r3, #4
 8003fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb8:	4b74      	ldr	r3, [pc, #464]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	4a73      	ldr	r2, [pc, #460]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc4:	e00b      	b.n	8003fde <HAL_RCC_OscConfig+0x32a>
 8003fc6:	4b71      	ldr	r3, [pc, #452]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	4a70      	ldr	r2, [pc, #448]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 8003fcc:	f023 0301 	bic.w	r3, r3, #1
 8003fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd2:	4b6e      	ldr	r3, [pc, #440]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	4a6d      	ldr	r2, [pc, #436]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 8003fd8:	f023 0304 	bic.w	r3, r3, #4
 8003fdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d015      	beq.n	8004012 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe6:	f7fd f883 	bl	80010f0 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fec:	e00a      	b.n	8004004 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fee:	f7fd f87f 	bl	80010f0 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e0bc      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004004:	4b61      	ldr	r3, [pc, #388]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0ee      	beq.n	8003fee <HAL_RCC_OscConfig+0x33a>
 8004010:	e014      	b.n	800403c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004012:	f7fd f86d 	bl	80010f0 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004018:	e00a      	b.n	8004030 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800401a:	f7fd f869 	bl	80010f0 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	f241 3288 	movw	r2, #5000	; 0x1388
 8004028:	4293      	cmp	r3, r2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e0a6      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004030:	4b56      	ldr	r3, [pc, #344]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1ee      	bne.n	800401a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800403c:	7dfb      	ldrb	r3, [r7, #23]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d105      	bne.n	800404e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004042:	4b52      	ldr	r3, [pc, #328]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	4a51      	ldr	r2, [pc, #324]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 8004048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800404c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 8092 	beq.w	800417c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004058:	4b4c      	ldr	r3, [pc, #304]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 030c 	and.w	r3, r3, #12
 8004060:	2b08      	cmp	r3, #8
 8004062:	d05c      	beq.n	800411e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d141      	bne.n	80040f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406c:	4b48      	ldr	r3, [pc, #288]	; (8004190 <HAL_RCC_OscConfig+0x4dc>)
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004072:	f7fd f83d 	bl	80010f0 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800407a:	f7fd f839 	bl	80010f0 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e078      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408c:	4b3f      	ldr	r3, [pc, #252]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1f0      	bne.n	800407a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	019b      	lsls	r3, r3, #6
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	085b      	lsrs	r3, r3, #1
 80040b0:	3b01      	subs	r3, #1
 80040b2:	041b      	lsls	r3, r3, #16
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	061b      	lsls	r3, r3, #24
 80040bc:	4933      	ldr	r1, [pc, #204]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c2:	4b33      	ldr	r3, [pc, #204]	; (8004190 <HAL_RCC_OscConfig+0x4dc>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c8:	f7fd f812 	bl	80010f0 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d0:	f7fd f80e 	bl	80010f0 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e04d      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e2:	4b2a      	ldr	r3, [pc, #168]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x41c>
 80040ee:	e045      	b.n	800417c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f0:	4b27      	ldr	r3, [pc, #156]	; (8004190 <HAL_RCC_OscConfig+0x4dc>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f6:	f7fc fffb 	bl	80010f0 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040fe:	f7fc fff7 	bl	80010f0 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e036      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004110:	4b1e      	ldr	r3, [pc, #120]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f0      	bne.n	80040fe <HAL_RCC_OscConfig+0x44a>
 800411c:	e02e      	b.n	800417c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e029      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800412a:	4b18      	ldr	r3, [pc, #96]	; (800418c <HAL_RCC_OscConfig+0x4d8>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	429a      	cmp	r2, r3
 800413c:	d11c      	bne.n	8004178 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d115      	bne.n	8004178 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004152:	4013      	ands	r3, r2
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004158:	4293      	cmp	r3, r2
 800415a:	d10d      	bne.n	8004178 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d106      	bne.n	8004178 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40007000 	.word	0x40007000
 800418c:	40023800 	.word	0x40023800
 8004190:	42470060 	.word	0x42470060

08004194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0cc      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a8:	4b68      	ldr	r3, [pc, #416]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 030f 	and.w	r3, r3, #15
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d90c      	bls.n	80041d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b6:	4b65      	ldr	r3, [pc, #404]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041be:	4b63      	ldr	r3, [pc, #396]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0b8      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d020      	beq.n	800421e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041e8:	4b59      	ldr	r3, [pc, #356]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	4a58      	ldr	r2, [pc, #352]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004200:	4b53      	ldr	r3, [pc, #332]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	4a52      	ldr	r2, [pc, #328]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800420a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800420c:	4b50      	ldr	r3, [pc, #320]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	494d      	ldr	r1, [pc, #308]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	4313      	orrs	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d044      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d107      	bne.n	8004242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004232:	4b47      	ldr	r3, [pc, #284]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d119      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e07f      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d003      	beq.n	8004252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800424e:	2b03      	cmp	r3, #3
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004252:	4b3f      	ldr	r3, [pc, #252]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e06f      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004262:	4b3b      	ldr	r3, [pc, #236]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e067      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004272:	4b37      	ldr	r3, [pc, #220]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f023 0203 	bic.w	r2, r3, #3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4934      	ldr	r1, [pc, #208]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	4313      	orrs	r3, r2
 8004282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004284:	f7fc ff34 	bl	80010f0 <HAL_GetTick>
 8004288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428a:	e00a      	b.n	80042a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428c:	f7fc ff30 	bl	80010f0 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e04f      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a2:	4b2b      	ldr	r3, [pc, #172]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 020c 	and.w	r2, r3, #12
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d1eb      	bne.n	800428c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d20c      	bcs.n	80042dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c2:	4b22      	ldr	r3, [pc, #136]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ca:	4b20      	ldr	r3, [pc, #128]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e032      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4916      	ldr	r1, [pc, #88]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d009      	beq.n	800431a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	490e      	ldr	r1, [pc, #56]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800431a:	f000 f821 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 800431e:	4601      	mov	r1, r0
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	4a0a      	ldr	r2, [pc, #40]	; (8004354 <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	5cd3      	ldrb	r3, [r2, r3]
 800432e:	fa21 f303 	lsr.w	r3, r1, r3
 8004332:	4a09      	ldr	r2, [pc, #36]	; (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 8004334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_RCC_ClockConfig+0x1c8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7fc fe94 	bl	8001068 <HAL_InitTick>

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40023c00 	.word	0x40023c00
 8004350:	40023800 	.word	0x40023800
 8004354:	08009140 	.word	0x08009140
 8004358:	20000000 	.word	0x20000000
 800435c:	20000004 	.word	0x20000004

08004360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	2300      	movs	r3, #0
 8004370:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004376:	4b63      	ldr	r3, [pc, #396]	; (8004504 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b04      	cmp	r3, #4
 8004380:	d007      	beq.n	8004392 <HAL_RCC_GetSysClockFreq+0x32>
 8004382:	2b08      	cmp	r3, #8
 8004384:	d008      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x38>
 8004386:	2b00      	cmp	r3, #0
 8004388:	f040 80b4 	bne.w	80044f4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800438c:	4b5e      	ldr	r3, [pc, #376]	; (8004508 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800438e:	60bb      	str	r3, [r7, #8]
       break;
 8004390:	e0b3      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004392:	4b5e      	ldr	r3, [pc, #376]	; (800450c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004394:	60bb      	str	r3, [r7, #8]
      break;
 8004396:	e0b0      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004398:	4b5a      	ldr	r3, [pc, #360]	; (8004504 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043a2:	4b58      	ldr	r3, [pc, #352]	; (8004504 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d04a      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ae:	4b55      	ldr	r3, [pc, #340]	; (8004504 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	099b      	lsrs	r3, r3, #6
 80043b4:	f04f 0400 	mov.w	r4, #0
 80043b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	ea03 0501 	and.w	r5, r3, r1
 80043c4:	ea04 0602 	and.w	r6, r4, r2
 80043c8:	4629      	mov	r1, r5
 80043ca:	4632      	mov	r2, r6
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	f04f 0400 	mov.w	r4, #0
 80043d4:	0154      	lsls	r4, r2, #5
 80043d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043da:	014b      	lsls	r3, r1, #5
 80043dc:	4619      	mov	r1, r3
 80043de:	4622      	mov	r2, r4
 80043e0:	1b49      	subs	r1, r1, r5
 80043e2:	eb62 0206 	sbc.w	r2, r2, r6
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	f04f 0400 	mov.w	r4, #0
 80043ee:	0194      	lsls	r4, r2, #6
 80043f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043f4:	018b      	lsls	r3, r1, #6
 80043f6:	1a5b      	subs	r3, r3, r1
 80043f8:	eb64 0402 	sbc.w	r4, r4, r2
 80043fc:	f04f 0100 	mov.w	r1, #0
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	00e2      	lsls	r2, r4, #3
 8004406:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800440a:	00d9      	lsls	r1, r3, #3
 800440c:	460b      	mov	r3, r1
 800440e:	4614      	mov	r4, r2
 8004410:	195b      	adds	r3, r3, r5
 8004412:	eb44 0406 	adc.w	r4, r4, r6
 8004416:	f04f 0100 	mov.w	r1, #0
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	0262      	lsls	r2, r4, #9
 8004420:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004424:	0259      	lsls	r1, r3, #9
 8004426:	460b      	mov	r3, r1
 8004428:	4614      	mov	r4, r2
 800442a:	4618      	mov	r0, r3
 800442c:	4621      	mov	r1, r4
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f04f 0400 	mov.w	r4, #0
 8004434:	461a      	mov	r2, r3
 8004436:	4623      	mov	r3, r4
 8004438:	f7fb fece 	bl	80001d8 <__aeabi_uldivmod>
 800443c:	4603      	mov	r3, r0
 800443e:	460c      	mov	r4, r1
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	e049      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004444:	4b2f      	ldr	r3, [pc, #188]	; (8004504 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	099b      	lsrs	r3, r3, #6
 800444a:	f04f 0400 	mov.w	r4, #0
 800444e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	ea03 0501 	and.w	r5, r3, r1
 800445a:	ea04 0602 	and.w	r6, r4, r2
 800445e:	4629      	mov	r1, r5
 8004460:	4632      	mov	r2, r6
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	f04f 0400 	mov.w	r4, #0
 800446a:	0154      	lsls	r4, r2, #5
 800446c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004470:	014b      	lsls	r3, r1, #5
 8004472:	4619      	mov	r1, r3
 8004474:	4622      	mov	r2, r4
 8004476:	1b49      	subs	r1, r1, r5
 8004478:	eb62 0206 	sbc.w	r2, r2, r6
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	f04f 0400 	mov.w	r4, #0
 8004484:	0194      	lsls	r4, r2, #6
 8004486:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800448a:	018b      	lsls	r3, r1, #6
 800448c:	1a5b      	subs	r3, r3, r1
 800448e:	eb64 0402 	sbc.w	r4, r4, r2
 8004492:	f04f 0100 	mov.w	r1, #0
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	00e2      	lsls	r2, r4, #3
 800449c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044a0:	00d9      	lsls	r1, r3, #3
 80044a2:	460b      	mov	r3, r1
 80044a4:	4614      	mov	r4, r2
 80044a6:	195b      	adds	r3, r3, r5
 80044a8:	eb44 0406 	adc.w	r4, r4, r6
 80044ac:	f04f 0100 	mov.w	r1, #0
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	02a2      	lsls	r2, r4, #10
 80044b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80044ba:	0299      	lsls	r1, r3, #10
 80044bc:	460b      	mov	r3, r1
 80044be:	4614      	mov	r4, r2
 80044c0:	4618      	mov	r0, r3
 80044c2:	4621      	mov	r1, r4
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f04f 0400 	mov.w	r4, #0
 80044ca:	461a      	mov	r2, r3
 80044cc:	4623      	mov	r3, r4
 80044ce:	f7fb fe83 	bl	80001d8 <__aeabi_uldivmod>
 80044d2:	4603      	mov	r3, r0
 80044d4:	460c      	mov	r4, r1
 80044d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044d8:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	3301      	adds	r3, #1
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	60bb      	str	r3, [r7, #8]
      break;
 80044f2:	e002      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80044f6:	60bb      	str	r3, [r7, #8]
      break;
 80044f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044fa:	68bb      	ldr	r3, [r7, #8]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004504:	40023800 	.word	0x40023800
 8004508:	00f42400 	.word	0x00f42400
 800450c:	007a1200 	.word	0x007a1200

08004510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004514:	4b03      	ldr	r3, [pc, #12]	; (8004524 <HAL_RCC_GetHCLKFreq+0x14>)
 8004516:	681b      	ldr	r3, [r3, #0]
}
 8004518:	4618      	mov	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000000 	.word	0x20000000

08004528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800452c:	f7ff fff0 	bl	8004510 <HAL_RCC_GetHCLKFreq>
 8004530:	4601      	mov	r1, r0
 8004532:	4b05      	ldr	r3, [pc, #20]	; (8004548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	0a9b      	lsrs	r3, r3, #10
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	4a03      	ldr	r2, [pc, #12]	; (800454c <HAL_RCC_GetPCLK1Freq+0x24>)
 800453e:	5cd3      	ldrb	r3, [r2, r3]
 8004540:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004544:	4618      	mov	r0, r3
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40023800 	.word	0x40023800
 800454c:	08009150 	.word	0x08009150

08004550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004554:	f7ff ffdc 	bl	8004510 <HAL_RCC_GetHCLKFreq>
 8004558:	4601      	mov	r1, r0
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	0b5b      	lsrs	r3, r3, #13
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	4a03      	ldr	r2, [pc, #12]	; (8004574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004566:	5cd3      	ldrb	r3, [r2, r3]
 8004568:	fa21 f303 	lsr.w	r3, r1, r3
}
 800456c:	4618      	mov	r0, r3
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40023800 	.word	0x40023800
 8004574:	08009150 	.word	0x08009150

08004578 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d105      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800459c:	2b00      	cmp	r3, #0
 800459e:	d038      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045a0:	4b68      	ldr	r3, [pc, #416]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045a6:	f7fc fda3 	bl	80010f0 <HAL_GetTick>
 80045aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045ac:	e008      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045ae:	f7fc fd9f 	bl	80010f0 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e0bd      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045c0:	4b61      	ldr	r3, [pc, #388]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1f0      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	019b      	lsls	r3, r3, #6
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	071b      	lsls	r3, r3, #28
 80045de:	495a      	ldr	r1, [pc, #360]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045e6:	4b57      	ldr	r3, [pc, #348]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045ec:	f7fc fd80 	bl	80010f0 <HAL_GetTick>
 80045f0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045f4:	f7fc fd7c 	bl	80010f0 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e09a      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004606:	4b50      	ldr	r3, [pc, #320]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 8083 	beq.w	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	4b48      	ldr	r3, [pc, #288]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	4a47      	ldr	r2, [pc, #284]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462e:	6413      	str	r3, [r2, #64]	; 0x40
 8004630:	4b45      	ldr	r3, [pc, #276]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800463c:	4b43      	ldr	r3, [pc, #268]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a42      	ldr	r2, [pc, #264]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004646:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004648:	f7fc fd52 	bl	80010f0 <HAL_GetTick>
 800464c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004650:	f7fc fd4e 	bl	80010f0 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e06c      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004662:	4b3a      	ldr	r3, [pc, #232]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800466e:	4b36      	ldr	r3, [pc, #216]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004676:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d02f      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x166>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	429a      	cmp	r2, r3
 800468a:	d028      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800468c:	4b2e      	ldr	r3, [pc, #184]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004694:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004696:	4b2e      	ldr	r3, [pc, #184]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004698:	2201      	movs	r2, #1
 800469a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800469c:	4b2c      	ldr	r3, [pc, #176]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046a2:	4a29      	ldr	r2, [pc, #164]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046a8:	4b27      	ldr	r3, [pc, #156]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d114      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046b4:	f7fc fd1c 	bl	80010f0 <HAL_GetTick>
 80046b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ba:	e00a      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046bc:	f7fc fd18 	bl	80010f0 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e034      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d2:	4b1d      	ldr	r3, [pc, #116]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0ee      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ea:	d10d      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80046ec:	4b16      	ldr	r3, [pc, #88]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004700:	4911      	ldr	r1, [pc, #68]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004702:	4313      	orrs	r3, r2
 8004704:	608b      	str	r3, [r1, #8]
 8004706:	e005      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004708:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4a0e      	ldr	r2, [pc, #56]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004712:	6093      	str	r3, [r2, #8]
 8004714:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004716:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004720:	4909      	ldr	r1, [pc, #36]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004722:	4313      	orrs	r3, r2
 8004724:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	7d1a      	ldrb	r2, [r3, #20]
 8004736:	4b07      	ldr	r3, [pc, #28]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004738:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	42470068 	.word	0x42470068
 8004748:	40023800 	.word	0x40023800
 800474c:	40007000 	.word	0x40007000
 8004750:	42470e40 	.word	0x42470e40
 8004754:	424711e0 	.word	0x424711e0

08004758 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d13f      	bne.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004776:	4b23      	ldr	r3, [pc, #140]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800477e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d004      	beq.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004786:	2b01      	cmp	r3, #1
 8004788:	d131      	bne.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800478a:	4b1f      	ldr	r3, [pc, #124]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800478c:	617b      	str	r3, [r7, #20]
          break;
 800478e:	e031      	b.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004790:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800479c:	d109      	bne.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800479e:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a8:	4a18      	ldr	r2, [pc, #96]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	e008      	b.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80047b2:	4b14      	ldr	r3, [pc, #80]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047bc:	4a14      	ldr	r2, [pc, #80]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047be:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c2:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ca:	099b      	lsrs	r3, r3, #6
 80047cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	fb02 f303 	mul.w	r3, r2, r3
 80047d6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047d8:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047de:	0f1b      	lsrs	r3, r3, #28
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ea:	617b      	str	r3, [r7, #20]
          break;
 80047ec:	e002      	b.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
          break;
 80047f2:	bf00      	nop
        }
      }
      break;
 80047f4:	bf00      	nop
    }
  }
  return frequency;
 80047f6:	697b      	ldr	r3, [r7, #20]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	40023800 	.word	0x40023800
 8004808:	00bb8000 	.word	0x00bb8000
 800480c:	007a1200 	.word	0x007a1200
 8004810:	00f42400 	.word	0x00f42400

08004814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e056      	b.n	80048d4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d106      	bne.n	8004846 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7fc fa6d 	bl	8000d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2202      	movs	r2, #2
 800484a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800485c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	ea42 0103 	orr.w	r1, r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	0c1b      	lsrs	r3, r3, #16
 80048a4:	f003 0104 	and.w	r1, r3, #4
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69da      	ldr	r2, [r3, #28]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e01d      	b.n	800492a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fc fa54 	bl	8000db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f000 fa14 	bl	8004d48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004932:	b480      	push	{r7}
 8004934:	b085      	sub	sp, #20
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0201 	orr.w	r2, r2, #1
 8004948:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b06      	cmp	r3, #6
 800495a:	d007      	beq.n	800496c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b02      	cmp	r3, #2
 800498e:	d122      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d11b      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f06f 0202 	mvn.w	r2, #2
 80049a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f9a5 	bl	8004d0c <HAL_TIM_IC_CaptureCallback>
 80049c2:	e005      	b.n	80049d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f997 	bl	8004cf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f9a8 	bl	8004d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d122      	bne.n	8004a2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d11b      	bne.n	8004a2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f06f 0204 	mvn.w	r2, #4
 80049fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f97b 	bl	8004d0c <HAL_TIM_IC_CaptureCallback>
 8004a16:	e005      	b.n	8004a24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f96d 	bl	8004cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f97e 	bl	8004d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d122      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d11b      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f06f 0208 	mvn.w	r2, #8
 8004a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2204      	movs	r2, #4
 8004a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f951 	bl	8004d0c <HAL_TIM_IC_CaptureCallback>
 8004a6a:	e005      	b.n	8004a78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f943 	bl	8004cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f954 	bl	8004d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d122      	bne.n	8004ad2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d11b      	bne.n	8004ad2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f06f 0210 	mvn.w	r2, #16
 8004aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f927 	bl	8004d0c <HAL_TIM_IC_CaptureCallback>
 8004abe:	e005      	b.n	8004acc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f919 	bl	8004cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f92a 	bl	8004d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d10e      	bne.n	8004afe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d107      	bne.n	8004afe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f06f 0201 	mvn.w	r2, #1
 8004af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7fb ffbb 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b08:	2b80      	cmp	r3, #128	; 0x80
 8004b0a:	d10e      	bne.n	8004b2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b16:	2b80      	cmp	r3, #128	; 0x80
 8004b18:	d107      	bne.n	8004b2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 faa1 	bl	800506c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d10e      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b42:	2b40      	cmp	r3, #64	; 0x40
 8004b44:	d107      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f8ef 	bl	8004d34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d10e      	bne.n	8004b82 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d107      	bne.n	8004b82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f06f 0220 	mvn.w	r2, #32
 8004b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fa6b 	bl	8005058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_TIM_ConfigClockSource+0x18>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e0a6      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x166>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bc0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bc8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b40      	cmp	r3, #64	; 0x40
 8004bd8:	d067      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x120>
 8004bda:	2b40      	cmp	r3, #64	; 0x40
 8004bdc:	d80b      	bhi.n	8004bf6 <HAL_TIM_ConfigClockSource+0x6c>
 8004bde:	2b10      	cmp	r3, #16
 8004be0:	d073      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x140>
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d802      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x62>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d06f      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004bea:	e078      	b.n	8004cde <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d06c      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x140>
 8004bf0:	2b30      	cmp	r3, #48	; 0x30
 8004bf2:	d06a      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004bf4:	e073      	b.n	8004cde <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004bf6:	2b70      	cmp	r3, #112	; 0x70
 8004bf8:	d00d      	beq.n	8004c16 <HAL_TIM_ConfigClockSource+0x8c>
 8004bfa:	2b70      	cmp	r3, #112	; 0x70
 8004bfc:	d804      	bhi.n	8004c08 <HAL_TIM_ConfigClockSource+0x7e>
 8004bfe:	2b50      	cmp	r3, #80	; 0x50
 8004c00:	d033      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0xe0>
 8004c02:	2b60      	cmp	r3, #96	; 0x60
 8004c04:	d041      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c06:	e06a      	b.n	8004cde <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0c:	d066      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0x152>
 8004c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c12:	d017      	beq.n	8004c44 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c14:	e063      	b.n	8004cde <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6899      	ldr	r1, [r3, #8]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f000 f989 	bl	8004f3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	609a      	str	r2, [r3, #8]
      break;
 8004c42:	e04c      	b.n	8004cde <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6818      	ldr	r0, [r3, #0]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	6899      	ldr	r1, [r3, #8]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f000 f972 	bl	8004f3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c66:	609a      	str	r2, [r3, #8]
      break;
 8004c68:	e039      	b.n	8004cde <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	6859      	ldr	r1, [r3, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	461a      	mov	r2, r3
 8004c78:	f000 f8e6 	bl	8004e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2150      	movs	r1, #80	; 0x50
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 f93f 	bl	8004f06 <TIM_ITRx_SetConfig>
      break;
 8004c88:	e029      	b.n	8004cde <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6859      	ldr	r1, [r3, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f000 f905 	bl	8004ea6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2160      	movs	r1, #96	; 0x60
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f92f 	bl	8004f06 <TIM_ITRx_SetConfig>
      break;
 8004ca8:	e019      	b.n	8004cde <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6859      	ldr	r1, [r3, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f000 f8c6 	bl	8004e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2140      	movs	r1, #64	; 0x40
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 f91f 	bl	8004f06 <TIM_ITRx_SetConfig>
      break;
 8004cc8:	e009      	b.n	8004cde <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f000 f916 	bl	8004f06 <TIM_ITRx_SetConfig>
      break;
 8004cda:	e000      	b.n	8004cde <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004cdc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a34      	ldr	r2, [pc, #208]	; (8004e2c <TIM_Base_SetConfig+0xe4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00f      	beq.n	8004d80 <TIM_Base_SetConfig+0x38>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d66:	d00b      	beq.n	8004d80 <TIM_Base_SetConfig+0x38>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a31      	ldr	r2, [pc, #196]	; (8004e30 <TIM_Base_SetConfig+0xe8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d007      	beq.n	8004d80 <TIM_Base_SetConfig+0x38>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a30      	ldr	r2, [pc, #192]	; (8004e34 <TIM_Base_SetConfig+0xec>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <TIM_Base_SetConfig+0x38>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a2f      	ldr	r2, [pc, #188]	; (8004e38 <TIM_Base_SetConfig+0xf0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d108      	bne.n	8004d92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a25      	ldr	r2, [pc, #148]	; (8004e2c <TIM_Base_SetConfig+0xe4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d01b      	beq.n	8004dd2 <TIM_Base_SetConfig+0x8a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da0:	d017      	beq.n	8004dd2 <TIM_Base_SetConfig+0x8a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a22      	ldr	r2, [pc, #136]	; (8004e30 <TIM_Base_SetConfig+0xe8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d013      	beq.n	8004dd2 <TIM_Base_SetConfig+0x8a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a21      	ldr	r2, [pc, #132]	; (8004e34 <TIM_Base_SetConfig+0xec>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00f      	beq.n	8004dd2 <TIM_Base_SetConfig+0x8a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a20      	ldr	r2, [pc, #128]	; (8004e38 <TIM_Base_SetConfig+0xf0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00b      	beq.n	8004dd2 <TIM_Base_SetConfig+0x8a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a1f      	ldr	r2, [pc, #124]	; (8004e3c <TIM_Base_SetConfig+0xf4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d007      	beq.n	8004dd2 <TIM_Base_SetConfig+0x8a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a1e      	ldr	r2, [pc, #120]	; (8004e40 <TIM_Base_SetConfig+0xf8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d003      	beq.n	8004dd2 <TIM_Base_SetConfig+0x8a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a1d      	ldr	r2, [pc, #116]	; (8004e44 <TIM_Base_SetConfig+0xfc>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d108      	bne.n	8004de4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a08      	ldr	r2, [pc, #32]	; (8004e2c <TIM_Base_SetConfig+0xe4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d103      	bne.n	8004e18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	615a      	str	r2, [r3, #20]
}
 8004e1e:	bf00      	nop
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40010000 	.word	0x40010000
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40000800 	.word	0x40000800
 8004e38:	40000c00 	.word	0x40000c00
 8004e3c:	40014000 	.word	0x40014000
 8004e40:	40014400 	.word	0x40014400
 8004e44:	40014800 	.word	0x40014800

08004e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f023 0201 	bic.w	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f023 030a 	bic.w	r3, r3, #10
 8004e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	621a      	str	r2, [r3, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b087      	sub	sp, #28
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f023 0210 	bic.w	r2, r3, #16
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	031b      	lsls	r3, r3, #12
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ee2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	621a      	str	r2, [r3, #32]
}
 8004efa:	bf00      	nop
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b085      	sub	sp, #20
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f043 0307 	orr.w	r3, r3, #7
 8004f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	609a      	str	r2, [r3, #8]
}
 8004f30:	bf00      	nop
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	021a      	lsls	r2, r3, #8
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	609a      	str	r2, [r3, #8]
}
 8004f70:	bf00      	nop
 8004f72:	371c      	adds	r7, #28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e050      	b.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1c      	ldr	r2, [pc, #112]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d018      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe0:	d013      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a18      	ldr	r2, [pc, #96]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00e      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a16      	ldr	r2, [pc, #88]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d009      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a15      	ldr	r2, [pc, #84]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d004      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a13      	ldr	r2, [pc, #76]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d10c      	bne.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	4313      	orrs	r3, r2
 800501a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40010000 	.word	0x40010000
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00
 8005054:	40014000 	.word	0x40014000

08005058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e03f      	b.n	8005112 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fb feaa 	bl	8000e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2224      	movs	r2, #36	; 0x24
 80050b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fa69 	bl	800559c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695a      	ldr	r2, [r3, #20]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10d      	bne.n	800516e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_UART_IRQHandler+0x52>
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f996 	bl	8005498 <UART_Receive_IT>
      return;
 800516c:	e0d1      	b.n	8005312 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80b0 	beq.w	80052d6 <HAL_UART_IRQHandler+0x1ba>
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d105      	bne.n	800518c <HAL_UART_IRQHandler+0x70>
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 80a5 	beq.w	80052d6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <HAL_UART_IRQHandler+0x90>
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a4:	f043 0201 	orr.w	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <HAL_UART_IRQHandler+0xb0>
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c4:	f043 0202 	orr.w	r2, r3, #2
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_UART_IRQHandler+0xd0>
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d005      	beq.n	80051ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e4:	f043 0204 	orr.w	r2, r3, #4
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00f      	beq.n	8005216 <HAL_UART_IRQHandler+0xfa>
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	f003 0320 	and.w	r3, r3, #32
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d104      	bne.n	800520a <HAL_UART_IRQHandler+0xee>
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520e:	f043 0208 	orr.w	r2, r3, #8
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d078      	beq.n	8005310 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b00      	cmp	r3, #0
 8005226:	d007      	beq.n	8005238 <HAL_UART_IRQHandler+0x11c>
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f930 	bl	8005498 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005242:	2b40      	cmp	r3, #64	; 0x40
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <HAL_UART_IRQHandler+0x144>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d031      	beq.n	80052c4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f879 	bl	8005358 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005270:	2b40      	cmp	r3, #64	; 0x40
 8005272:	d123      	bne.n	80052bc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005282:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005288:	2b00      	cmp	r3, #0
 800528a:	d013      	beq.n	80052b4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	4a21      	ldr	r2, [pc, #132]	; (8005318 <HAL_UART_IRQHandler+0x1fc>)
 8005292:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005298:	4618      	mov	r0, r3
 800529a:	f7fc f868 	bl	800136e <HAL_DMA_Abort_IT>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d016      	beq.n	80052d2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052ae:	4610      	mov	r0, r2
 80052b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b2:	e00e      	b.n	80052d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f845 	bl	8005344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ba:	e00a      	b.n	80052d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f841 	bl	8005344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c2:	e006      	b.n	80052d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f83d 	bl	8005344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80052d0:	e01e      	b.n	8005310 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d2:	bf00      	nop
    return;
 80052d4:	e01c      	b.n	8005310 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <HAL_UART_IRQHandler+0x1d6>
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f866 	bl	80053bc <UART_Transmit_IT>
    return;
 80052f0:	e00f      	b.n	8005312 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <HAL_UART_IRQHandler+0x1f6>
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f8ae 	bl	8005468 <UART_EndTransmit_IT>
    return;
 800530c:	bf00      	nop
 800530e:	e000      	b.n	8005312 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005310:	bf00      	nop
  }
}
 8005312:	3720      	adds	r7, #32
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	08005395 	.word	0x08005395

0800531c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800536e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695a      	ldr	r2, [r3, #20]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0201 	bic.w	r2, r2, #1
 800537e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff ffc8 	bl	8005344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053b4:	bf00      	nop
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b21      	cmp	r3, #33	; 0x21
 80053ce:	d144      	bne.n	800545a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d8:	d11a      	bne.n	8005410 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	461a      	mov	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ee:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d105      	bne.n	8005404 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	1c9a      	adds	r2, r3, #2
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	621a      	str	r2, [r3, #32]
 8005402:	e00e      	b.n	8005422 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	621a      	str	r2, [r3, #32]
 800540e:	e008      	b.n	8005422 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	1c59      	adds	r1, r3, #1
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6211      	str	r1, [r2, #32]
 800541a:	781a      	ldrb	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005426:	b29b      	uxth	r3, r3
 8005428:	3b01      	subs	r3, #1
 800542a:	b29b      	uxth	r3, r3
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	4619      	mov	r1, r3
 8005430:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10f      	bne.n	8005456 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005444:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005454:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	e000      	b.n	800545c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800545a:	2302      	movs	r3, #2
  }
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800547e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff ff47 	bl	800531c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b22      	cmp	r3, #34	; 0x22
 80054aa:	d171      	bne.n	8005590 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b4:	d123      	bne.n	80054fe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ba:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10e      	bne.n	80054e2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	1c9a      	adds	r2, r3, #2
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	629a      	str	r2, [r3, #40]	; 0x28
 80054e0:	e029      	b.n	8005536 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	629a      	str	r2, [r3, #40]	; 0x28
 80054fc:	e01b      	b.n	8005536 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10a      	bne.n	800551c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6858      	ldr	r0, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005510:	1c59      	adds	r1, r3, #1
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6291      	str	r1, [r2, #40]	; 0x28
 8005516:	b2c2      	uxtb	r2, r0
 8005518:	701a      	strb	r2, [r3, #0]
 800551a:	e00c      	b.n	8005536 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	b2da      	uxtb	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005528:	1c58      	adds	r0, r3, #1
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	6288      	str	r0, [r1, #40]	; 0x28
 800552e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29b      	uxth	r3, r3
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	4619      	mov	r1, r3
 8005544:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005546:	2b00      	cmp	r3, #0
 8005548:	d120      	bne.n	800558c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0220 	bic.w	r2, r2, #32
 8005558:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005568:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0201 	bic.w	r2, r2, #1
 8005578:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff fed4 	bl	8005330 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	e002      	b.n	8005592 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	e000      	b.n	8005592 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005590:	2302      	movs	r3, #2
  }
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800559c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a0:	b085      	sub	sp, #20
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80055de:	f023 030c 	bic.w	r3, r3, #12
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	430b      	orrs	r3, r1
 80055ea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560a:	f040 818b 	bne.w	8005924 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4ac1      	ldr	r2, [pc, #772]	; (8005918 <UART_SetConfig+0x37c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d005      	beq.n	8005624 <UART_SetConfig+0x88>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4abf      	ldr	r2, [pc, #764]	; (800591c <UART_SetConfig+0x380>)
 800561e:	4293      	cmp	r3, r2
 8005620:	f040 80bd 	bne.w	800579e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005624:	f7fe ff94 	bl	8004550 <HAL_RCC_GetPCLK2Freq>
 8005628:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	461d      	mov	r5, r3
 800562e:	f04f 0600 	mov.w	r6, #0
 8005632:	46a8      	mov	r8, r5
 8005634:	46b1      	mov	r9, r6
 8005636:	eb18 0308 	adds.w	r3, r8, r8
 800563a:	eb49 0409 	adc.w	r4, r9, r9
 800563e:	4698      	mov	r8, r3
 8005640:	46a1      	mov	r9, r4
 8005642:	eb18 0805 	adds.w	r8, r8, r5
 8005646:	eb49 0906 	adc.w	r9, r9, r6
 800564a:	f04f 0100 	mov.w	r1, #0
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005656:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800565a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800565e:	4688      	mov	r8, r1
 8005660:	4691      	mov	r9, r2
 8005662:	eb18 0005 	adds.w	r0, r8, r5
 8005666:	eb49 0106 	adc.w	r1, r9, r6
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	461d      	mov	r5, r3
 8005670:	f04f 0600 	mov.w	r6, #0
 8005674:	196b      	adds	r3, r5, r5
 8005676:	eb46 0406 	adc.w	r4, r6, r6
 800567a:	461a      	mov	r2, r3
 800567c:	4623      	mov	r3, r4
 800567e:	f7fa fdab 	bl	80001d8 <__aeabi_uldivmod>
 8005682:	4603      	mov	r3, r0
 8005684:	460c      	mov	r4, r1
 8005686:	461a      	mov	r2, r3
 8005688:	4ba5      	ldr	r3, [pc, #660]	; (8005920 <UART_SetConfig+0x384>)
 800568a:	fba3 2302 	umull	r2, r3, r3, r2
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	461d      	mov	r5, r3
 8005698:	f04f 0600 	mov.w	r6, #0
 800569c:	46a9      	mov	r9, r5
 800569e:	46b2      	mov	sl, r6
 80056a0:	eb19 0309 	adds.w	r3, r9, r9
 80056a4:	eb4a 040a 	adc.w	r4, sl, sl
 80056a8:	4699      	mov	r9, r3
 80056aa:	46a2      	mov	sl, r4
 80056ac:	eb19 0905 	adds.w	r9, r9, r5
 80056b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80056b4:	f04f 0100 	mov.w	r1, #0
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056c8:	4689      	mov	r9, r1
 80056ca:	4692      	mov	sl, r2
 80056cc:	eb19 0005 	adds.w	r0, r9, r5
 80056d0:	eb4a 0106 	adc.w	r1, sl, r6
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	461d      	mov	r5, r3
 80056da:	f04f 0600 	mov.w	r6, #0
 80056de:	196b      	adds	r3, r5, r5
 80056e0:	eb46 0406 	adc.w	r4, r6, r6
 80056e4:	461a      	mov	r2, r3
 80056e6:	4623      	mov	r3, r4
 80056e8:	f7fa fd76 	bl	80001d8 <__aeabi_uldivmod>
 80056ec:	4603      	mov	r3, r0
 80056ee:	460c      	mov	r4, r1
 80056f0:	461a      	mov	r2, r3
 80056f2:	4b8b      	ldr	r3, [pc, #556]	; (8005920 <UART_SetConfig+0x384>)
 80056f4:	fba3 1302 	umull	r1, r3, r3, r2
 80056f8:	095b      	lsrs	r3, r3, #5
 80056fa:	2164      	movs	r1, #100	; 0x64
 80056fc:	fb01 f303 	mul.w	r3, r1, r3
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	3332      	adds	r3, #50	; 0x32
 8005706:	4a86      	ldr	r2, [pc, #536]	; (8005920 <UART_SetConfig+0x384>)
 8005708:	fba2 2303 	umull	r2, r3, r2, r3
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005714:	4498      	add	r8, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	461d      	mov	r5, r3
 800571a:	f04f 0600 	mov.w	r6, #0
 800571e:	46a9      	mov	r9, r5
 8005720:	46b2      	mov	sl, r6
 8005722:	eb19 0309 	adds.w	r3, r9, r9
 8005726:	eb4a 040a 	adc.w	r4, sl, sl
 800572a:	4699      	mov	r9, r3
 800572c:	46a2      	mov	sl, r4
 800572e:	eb19 0905 	adds.w	r9, r9, r5
 8005732:	eb4a 0a06 	adc.w	sl, sl, r6
 8005736:	f04f 0100 	mov.w	r1, #0
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005742:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005746:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800574a:	4689      	mov	r9, r1
 800574c:	4692      	mov	sl, r2
 800574e:	eb19 0005 	adds.w	r0, r9, r5
 8005752:	eb4a 0106 	adc.w	r1, sl, r6
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	461d      	mov	r5, r3
 800575c:	f04f 0600 	mov.w	r6, #0
 8005760:	196b      	adds	r3, r5, r5
 8005762:	eb46 0406 	adc.w	r4, r6, r6
 8005766:	461a      	mov	r2, r3
 8005768:	4623      	mov	r3, r4
 800576a:	f7fa fd35 	bl	80001d8 <__aeabi_uldivmod>
 800576e:	4603      	mov	r3, r0
 8005770:	460c      	mov	r4, r1
 8005772:	461a      	mov	r2, r3
 8005774:	4b6a      	ldr	r3, [pc, #424]	; (8005920 <UART_SetConfig+0x384>)
 8005776:	fba3 1302 	umull	r1, r3, r3, r2
 800577a:	095b      	lsrs	r3, r3, #5
 800577c:	2164      	movs	r1, #100	; 0x64
 800577e:	fb01 f303 	mul.w	r3, r1, r3
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	3332      	adds	r3, #50	; 0x32
 8005788:	4a65      	ldr	r2, [pc, #404]	; (8005920 <UART_SetConfig+0x384>)
 800578a:	fba2 2303 	umull	r2, r3, r2, r3
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	f003 0207 	and.w	r2, r3, #7
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4442      	add	r2, r8
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	e26f      	b.n	8005c7e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800579e:	f7fe fec3 	bl	8004528 <HAL_RCC_GetPCLK1Freq>
 80057a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	461d      	mov	r5, r3
 80057a8:	f04f 0600 	mov.w	r6, #0
 80057ac:	46a8      	mov	r8, r5
 80057ae:	46b1      	mov	r9, r6
 80057b0:	eb18 0308 	adds.w	r3, r8, r8
 80057b4:	eb49 0409 	adc.w	r4, r9, r9
 80057b8:	4698      	mov	r8, r3
 80057ba:	46a1      	mov	r9, r4
 80057bc:	eb18 0805 	adds.w	r8, r8, r5
 80057c0:	eb49 0906 	adc.w	r9, r9, r6
 80057c4:	f04f 0100 	mov.w	r1, #0
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057d8:	4688      	mov	r8, r1
 80057da:	4691      	mov	r9, r2
 80057dc:	eb18 0005 	adds.w	r0, r8, r5
 80057e0:	eb49 0106 	adc.w	r1, r9, r6
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	461d      	mov	r5, r3
 80057ea:	f04f 0600 	mov.w	r6, #0
 80057ee:	196b      	adds	r3, r5, r5
 80057f0:	eb46 0406 	adc.w	r4, r6, r6
 80057f4:	461a      	mov	r2, r3
 80057f6:	4623      	mov	r3, r4
 80057f8:	f7fa fcee 	bl	80001d8 <__aeabi_uldivmod>
 80057fc:	4603      	mov	r3, r0
 80057fe:	460c      	mov	r4, r1
 8005800:	461a      	mov	r2, r3
 8005802:	4b47      	ldr	r3, [pc, #284]	; (8005920 <UART_SetConfig+0x384>)
 8005804:	fba3 2302 	umull	r2, r3, r3, r2
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	461d      	mov	r5, r3
 8005812:	f04f 0600 	mov.w	r6, #0
 8005816:	46a9      	mov	r9, r5
 8005818:	46b2      	mov	sl, r6
 800581a:	eb19 0309 	adds.w	r3, r9, r9
 800581e:	eb4a 040a 	adc.w	r4, sl, sl
 8005822:	4699      	mov	r9, r3
 8005824:	46a2      	mov	sl, r4
 8005826:	eb19 0905 	adds.w	r9, r9, r5
 800582a:	eb4a 0a06 	adc.w	sl, sl, r6
 800582e:	f04f 0100 	mov.w	r1, #0
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800583a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800583e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005842:	4689      	mov	r9, r1
 8005844:	4692      	mov	sl, r2
 8005846:	eb19 0005 	adds.w	r0, r9, r5
 800584a:	eb4a 0106 	adc.w	r1, sl, r6
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	461d      	mov	r5, r3
 8005854:	f04f 0600 	mov.w	r6, #0
 8005858:	196b      	adds	r3, r5, r5
 800585a:	eb46 0406 	adc.w	r4, r6, r6
 800585e:	461a      	mov	r2, r3
 8005860:	4623      	mov	r3, r4
 8005862:	f7fa fcb9 	bl	80001d8 <__aeabi_uldivmod>
 8005866:	4603      	mov	r3, r0
 8005868:	460c      	mov	r4, r1
 800586a:	461a      	mov	r2, r3
 800586c:	4b2c      	ldr	r3, [pc, #176]	; (8005920 <UART_SetConfig+0x384>)
 800586e:	fba3 1302 	umull	r1, r3, r3, r2
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	2164      	movs	r1, #100	; 0x64
 8005876:	fb01 f303 	mul.w	r3, r1, r3
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	3332      	adds	r3, #50	; 0x32
 8005880:	4a27      	ldr	r2, [pc, #156]	; (8005920 <UART_SetConfig+0x384>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800588e:	4498      	add	r8, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	461d      	mov	r5, r3
 8005894:	f04f 0600 	mov.w	r6, #0
 8005898:	46a9      	mov	r9, r5
 800589a:	46b2      	mov	sl, r6
 800589c:	eb19 0309 	adds.w	r3, r9, r9
 80058a0:	eb4a 040a 	adc.w	r4, sl, sl
 80058a4:	4699      	mov	r9, r3
 80058a6:	46a2      	mov	sl, r4
 80058a8:	eb19 0905 	adds.w	r9, r9, r5
 80058ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80058b0:	f04f 0100 	mov.w	r1, #0
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058c4:	4689      	mov	r9, r1
 80058c6:	4692      	mov	sl, r2
 80058c8:	eb19 0005 	adds.w	r0, r9, r5
 80058cc:	eb4a 0106 	adc.w	r1, sl, r6
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	461d      	mov	r5, r3
 80058d6:	f04f 0600 	mov.w	r6, #0
 80058da:	196b      	adds	r3, r5, r5
 80058dc:	eb46 0406 	adc.w	r4, r6, r6
 80058e0:	461a      	mov	r2, r3
 80058e2:	4623      	mov	r3, r4
 80058e4:	f7fa fc78 	bl	80001d8 <__aeabi_uldivmod>
 80058e8:	4603      	mov	r3, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	461a      	mov	r2, r3
 80058ee:	4b0c      	ldr	r3, [pc, #48]	; (8005920 <UART_SetConfig+0x384>)
 80058f0:	fba3 1302 	umull	r1, r3, r3, r2
 80058f4:	095b      	lsrs	r3, r3, #5
 80058f6:	2164      	movs	r1, #100	; 0x64
 80058f8:	fb01 f303 	mul.w	r3, r1, r3
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	3332      	adds	r3, #50	; 0x32
 8005902:	4a07      	ldr	r2, [pc, #28]	; (8005920 <UART_SetConfig+0x384>)
 8005904:	fba2 2303 	umull	r2, r3, r2, r3
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	f003 0207 	and.w	r2, r3, #7
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4442      	add	r2, r8
 8005914:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005916:	e1b2      	b.n	8005c7e <UART_SetConfig+0x6e2>
 8005918:	40011000 	.word	0x40011000
 800591c:	40011400 	.word	0x40011400
 8005920:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4ad7      	ldr	r2, [pc, #860]	; (8005c88 <UART_SetConfig+0x6ec>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d005      	beq.n	800593a <UART_SetConfig+0x39e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4ad6      	ldr	r2, [pc, #856]	; (8005c8c <UART_SetConfig+0x6f0>)
 8005934:	4293      	cmp	r3, r2
 8005936:	f040 80d1 	bne.w	8005adc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800593a:	f7fe fe09 	bl	8004550 <HAL_RCC_GetPCLK2Freq>
 800593e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	469a      	mov	sl, r3
 8005944:	f04f 0b00 	mov.w	fp, #0
 8005948:	46d0      	mov	r8, sl
 800594a:	46d9      	mov	r9, fp
 800594c:	eb18 0308 	adds.w	r3, r8, r8
 8005950:	eb49 0409 	adc.w	r4, r9, r9
 8005954:	4698      	mov	r8, r3
 8005956:	46a1      	mov	r9, r4
 8005958:	eb18 080a 	adds.w	r8, r8, sl
 800595c:	eb49 090b 	adc.w	r9, r9, fp
 8005960:	f04f 0100 	mov.w	r1, #0
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800596c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005970:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005974:	4688      	mov	r8, r1
 8005976:	4691      	mov	r9, r2
 8005978:	eb1a 0508 	adds.w	r5, sl, r8
 800597c:	eb4b 0609 	adc.w	r6, fp, r9
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	4619      	mov	r1, r3
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	f04f 0400 	mov.w	r4, #0
 8005992:	0094      	lsls	r4, r2, #2
 8005994:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005998:	008b      	lsls	r3, r1, #2
 800599a:	461a      	mov	r2, r3
 800599c:	4623      	mov	r3, r4
 800599e:	4628      	mov	r0, r5
 80059a0:	4631      	mov	r1, r6
 80059a2:	f7fa fc19 	bl	80001d8 <__aeabi_uldivmod>
 80059a6:	4603      	mov	r3, r0
 80059a8:	460c      	mov	r4, r1
 80059aa:	461a      	mov	r2, r3
 80059ac:	4bb8      	ldr	r3, [pc, #736]	; (8005c90 <UART_SetConfig+0x6f4>)
 80059ae:	fba3 2302 	umull	r2, r3, r3, r2
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	469b      	mov	fp, r3
 80059bc:	f04f 0c00 	mov.w	ip, #0
 80059c0:	46d9      	mov	r9, fp
 80059c2:	46e2      	mov	sl, ip
 80059c4:	eb19 0309 	adds.w	r3, r9, r9
 80059c8:	eb4a 040a 	adc.w	r4, sl, sl
 80059cc:	4699      	mov	r9, r3
 80059ce:	46a2      	mov	sl, r4
 80059d0:	eb19 090b 	adds.w	r9, r9, fp
 80059d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059d8:	f04f 0100 	mov.w	r1, #0
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059ec:	4689      	mov	r9, r1
 80059ee:	4692      	mov	sl, r2
 80059f0:	eb1b 0509 	adds.w	r5, fp, r9
 80059f4:	eb4c 060a 	adc.w	r6, ip, sl
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	4619      	mov	r1, r3
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	f04f 0400 	mov.w	r4, #0
 8005a0a:	0094      	lsls	r4, r2, #2
 8005a0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a10:	008b      	lsls	r3, r1, #2
 8005a12:	461a      	mov	r2, r3
 8005a14:	4623      	mov	r3, r4
 8005a16:	4628      	mov	r0, r5
 8005a18:	4631      	mov	r1, r6
 8005a1a:	f7fa fbdd 	bl	80001d8 <__aeabi_uldivmod>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	460c      	mov	r4, r1
 8005a22:	461a      	mov	r2, r3
 8005a24:	4b9a      	ldr	r3, [pc, #616]	; (8005c90 <UART_SetConfig+0x6f4>)
 8005a26:	fba3 1302 	umull	r1, r3, r3, r2
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	2164      	movs	r1, #100	; 0x64
 8005a2e:	fb01 f303 	mul.w	r3, r1, r3
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	3332      	adds	r3, #50	; 0x32
 8005a38:	4a95      	ldr	r2, [pc, #596]	; (8005c90 <UART_SetConfig+0x6f4>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a44:	4498      	add	r8, r3
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	469b      	mov	fp, r3
 8005a4a:	f04f 0c00 	mov.w	ip, #0
 8005a4e:	46d9      	mov	r9, fp
 8005a50:	46e2      	mov	sl, ip
 8005a52:	eb19 0309 	adds.w	r3, r9, r9
 8005a56:	eb4a 040a 	adc.w	r4, sl, sl
 8005a5a:	4699      	mov	r9, r3
 8005a5c:	46a2      	mov	sl, r4
 8005a5e:	eb19 090b 	adds.w	r9, r9, fp
 8005a62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a66:	f04f 0100 	mov.w	r1, #0
 8005a6a:	f04f 0200 	mov.w	r2, #0
 8005a6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a7a:	4689      	mov	r9, r1
 8005a7c:	4692      	mov	sl, r2
 8005a7e:	eb1b 0509 	adds.w	r5, fp, r9
 8005a82:	eb4c 060a 	adc.w	r6, ip, sl
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	f04f 0400 	mov.w	r4, #0
 8005a98:	0094      	lsls	r4, r2, #2
 8005a9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a9e:	008b      	lsls	r3, r1, #2
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	f7fa fb96 	bl	80001d8 <__aeabi_uldivmod>
 8005aac:	4603      	mov	r3, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	4b77      	ldr	r3, [pc, #476]	; (8005c90 <UART_SetConfig+0x6f4>)
 8005ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	2164      	movs	r1, #100	; 0x64
 8005abc:	fb01 f303 	mul.w	r3, r1, r3
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	3332      	adds	r3, #50	; 0x32
 8005ac6:	4a72      	ldr	r2, [pc, #456]	; (8005c90 <UART_SetConfig+0x6f4>)
 8005ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	f003 020f 	and.w	r2, r3, #15
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4442      	add	r2, r8
 8005ad8:	609a      	str	r2, [r3, #8]
 8005ada:	e0d0      	b.n	8005c7e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005adc:	f7fe fd24 	bl	8004528 <HAL_RCC_GetPCLK1Freq>
 8005ae0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	469a      	mov	sl, r3
 8005ae6:	f04f 0b00 	mov.w	fp, #0
 8005aea:	46d0      	mov	r8, sl
 8005aec:	46d9      	mov	r9, fp
 8005aee:	eb18 0308 	adds.w	r3, r8, r8
 8005af2:	eb49 0409 	adc.w	r4, r9, r9
 8005af6:	4698      	mov	r8, r3
 8005af8:	46a1      	mov	r9, r4
 8005afa:	eb18 080a 	adds.w	r8, r8, sl
 8005afe:	eb49 090b 	adc.w	r9, r9, fp
 8005b02:	f04f 0100 	mov.w	r1, #0
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b16:	4688      	mov	r8, r1
 8005b18:	4691      	mov	r9, r2
 8005b1a:	eb1a 0508 	adds.w	r5, sl, r8
 8005b1e:	eb4b 0609 	adc.w	r6, fp, r9
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4619      	mov	r1, r3
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	f04f 0400 	mov.w	r4, #0
 8005b34:	0094      	lsls	r4, r2, #2
 8005b36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b3a:	008b      	lsls	r3, r1, #2
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4623      	mov	r3, r4
 8005b40:	4628      	mov	r0, r5
 8005b42:	4631      	mov	r1, r6
 8005b44:	f7fa fb48 	bl	80001d8 <__aeabi_uldivmod>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	4b50      	ldr	r3, [pc, #320]	; (8005c90 <UART_SetConfig+0x6f4>)
 8005b50:	fba3 2302 	umull	r2, r3, r3, r2
 8005b54:	095b      	lsrs	r3, r3, #5
 8005b56:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	469b      	mov	fp, r3
 8005b5e:	f04f 0c00 	mov.w	ip, #0
 8005b62:	46d9      	mov	r9, fp
 8005b64:	46e2      	mov	sl, ip
 8005b66:	eb19 0309 	adds.w	r3, r9, r9
 8005b6a:	eb4a 040a 	adc.w	r4, sl, sl
 8005b6e:	4699      	mov	r9, r3
 8005b70:	46a2      	mov	sl, r4
 8005b72:	eb19 090b 	adds.w	r9, r9, fp
 8005b76:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b7a:	f04f 0100 	mov.w	r1, #0
 8005b7e:	f04f 0200 	mov.w	r2, #0
 8005b82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b8e:	4689      	mov	r9, r1
 8005b90:	4692      	mov	sl, r2
 8005b92:	eb1b 0509 	adds.w	r5, fp, r9
 8005b96:	eb4c 060a 	adc.w	r6, ip, sl
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	f04f 0200 	mov.w	r2, #0
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	f04f 0400 	mov.w	r4, #0
 8005bac:	0094      	lsls	r4, r2, #2
 8005bae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bb2:	008b      	lsls	r3, r1, #2
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4623      	mov	r3, r4
 8005bb8:	4628      	mov	r0, r5
 8005bba:	4631      	mov	r1, r6
 8005bbc:	f7fa fb0c 	bl	80001d8 <__aeabi_uldivmod>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4b32      	ldr	r3, [pc, #200]	; (8005c90 <UART_SetConfig+0x6f4>)
 8005bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	2164      	movs	r1, #100	; 0x64
 8005bd0:	fb01 f303 	mul.w	r3, r1, r3
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	3332      	adds	r3, #50	; 0x32
 8005bda:	4a2d      	ldr	r2, [pc, #180]	; (8005c90 <UART_SetConfig+0x6f4>)
 8005bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005be0:	095b      	lsrs	r3, r3, #5
 8005be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005be6:	4498      	add	r8, r3
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	469b      	mov	fp, r3
 8005bec:	f04f 0c00 	mov.w	ip, #0
 8005bf0:	46d9      	mov	r9, fp
 8005bf2:	46e2      	mov	sl, ip
 8005bf4:	eb19 0309 	adds.w	r3, r9, r9
 8005bf8:	eb4a 040a 	adc.w	r4, sl, sl
 8005bfc:	4699      	mov	r9, r3
 8005bfe:	46a2      	mov	sl, r4
 8005c00:	eb19 090b 	adds.w	r9, r9, fp
 8005c04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c08:	f04f 0100 	mov.w	r1, #0
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c1c:	4689      	mov	r9, r1
 8005c1e:	4692      	mov	sl, r2
 8005c20:	eb1b 0509 	adds.w	r5, fp, r9
 8005c24:	eb4c 060a 	adc.w	r6, ip, sl
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	f04f 0300 	mov.w	r3, #0
 8005c36:	f04f 0400 	mov.w	r4, #0
 8005c3a:	0094      	lsls	r4, r2, #2
 8005c3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c40:	008b      	lsls	r3, r1, #2
 8005c42:	461a      	mov	r2, r3
 8005c44:	4623      	mov	r3, r4
 8005c46:	4628      	mov	r0, r5
 8005c48:	4631      	mov	r1, r6
 8005c4a:	f7fa fac5 	bl	80001d8 <__aeabi_uldivmod>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	460c      	mov	r4, r1
 8005c52:	461a      	mov	r2, r3
 8005c54:	4b0e      	ldr	r3, [pc, #56]	; (8005c90 <UART_SetConfig+0x6f4>)
 8005c56:	fba3 1302 	umull	r1, r3, r3, r2
 8005c5a:	095b      	lsrs	r3, r3, #5
 8005c5c:	2164      	movs	r1, #100	; 0x64
 8005c5e:	fb01 f303 	mul.w	r3, r1, r3
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	3332      	adds	r3, #50	; 0x32
 8005c68:	4a09      	ldr	r2, [pc, #36]	; (8005c90 <UART_SetConfig+0x6f4>)
 8005c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	f003 020f 	and.w	r2, r3, #15
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4442      	add	r2, r8
 8005c7a:	609a      	str	r2, [r3, #8]
}
 8005c7c:	e7ff      	b.n	8005c7e <UART_SetConfig+0x6e2>
 8005c7e:	bf00      	nop
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c88:	40011000 	.word	0x40011000
 8005c8c:	40011400 	.word	0x40011400
 8005c90:	51eb851f 	.word	0x51eb851f

08005c94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c94:	b084      	sub	sp, #16
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	f107 001c 	add.w	r0, r7, #28
 8005ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d122      	bne.n	8005cf2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d105      	bne.n	8005ce6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f94a 	bl	8005f80 <USB_CoreReset>
 8005cec:	4603      	mov	r3, r0
 8005cee:	73fb      	strb	r3, [r7, #15]
 8005cf0:	e01a      	b.n	8005d28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f93e 	bl	8005f80 <USB_CoreReset>
 8005d04:	4603      	mov	r3, r0
 8005d06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38
 8005d1a:	e005      	b.n	8005d28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d10b      	bne.n	8005d46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f043 0206 	orr.w	r2, r3, #6
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f043 0220 	orr.w	r2, r3, #32
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d52:	b004      	add	sp, #16
 8005d54:	4770      	bx	lr

08005d56 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f043 0201 	orr.w	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f023 0201 	bic.w	r2, r3, #1
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	460b      	mov	r3, r1
 8005da4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d106      	bne.n	8005dc6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	60da      	str	r2, [r3, #12]
 8005dc4:	e00b      	b.n	8005dde <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d106      	bne.n	8005dda <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	60da      	str	r2, [r3, #12]
 8005dd8:	e001      	b.n	8005dde <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e003      	b.n	8005de6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005dde:	2032      	movs	r0, #50	; 0x32
 8005de0:	f7fb f992 	bl	8001108 <HAL_Delay>

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	019b      	lsls	r3, r3, #6
 8005e02:	f043 0220 	orr.w	r2, r3, #32
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4a09      	ldr	r2, [pc, #36]	; (8005e38 <USB_FlushTxFifo+0x48>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d901      	bls.n	8005e1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e006      	b.n	8005e2a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	d0f0      	beq.n	8005e0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	00030d40 	.word	0x00030d40

08005e3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2210      	movs	r2, #16
 8005e4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3301      	adds	r3, #1
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4a09      	ldr	r2, [pc, #36]	; (8005e7c <USB_FlushRxFifo+0x40>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d901      	bls.n	8005e60 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e006      	b.n	8005e6e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	f003 0310 	and.w	r3, r3, #16
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d0f0      	beq.n	8005e4e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	00030d40 	.word	0x00030d40

08005e80 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b089      	sub	sp, #36	; 0x24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	460b      	mov	r3, r1
 8005e90:	71fb      	strb	r3, [r7, #7]
 8005e92:	4613      	mov	r3, r2
 8005e94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005e9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d11a      	bne.n	8005edc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ea6:	88bb      	ldrh	r3, [r7, #4]
 8005ea8:	3303      	adds	r3, #3
 8005eaa:	089b      	lsrs	r3, r3, #2
 8005eac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61bb      	str	r3, [r7, #24]
 8005eb2:	e00f      	b.n	8005ed4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	031a      	lsls	r2, r3, #12
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d3eb      	bcc.n	8005eb4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3724      	adds	r7, #36	; 0x24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b089      	sub	sp, #36	; 0x24
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005f00:	88fb      	ldrh	r3, [r7, #6]
 8005f02:	3303      	adds	r3, #3
 8005f04:	089b      	lsrs	r3, r3, #2
 8005f06:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61bb      	str	r3, [r7, #24]
 8005f0c:	e00b      	b.n	8005f26 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	3301      	adds	r3, #1
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d3ef      	bcc.n	8005f0e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005f2e:	69fb      	ldr	r3, [r7, #28]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3724      	adds	r7, #36	; 0x24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4013      	ands	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f54:	68fb      	ldr	r3, [r7, #12]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
	...

08005f80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4a13      	ldr	r2, [pc, #76]	; (8005fe4 <USB_CoreReset+0x64>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d901      	bls.n	8005f9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e01b      	b.n	8005fd6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	daf2      	bge.n	8005f8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f043 0201 	orr.w	r2, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4a09      	ldr	r2, [pc, #36]	; (8005fe4 <USB_CoreReset+0x64>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d901      	bls.n	8005fc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e006      	b.n	8005fd6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d0f0      	beq.n	8005fb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	00030d40 	.word	0x00030d40

08005fe8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fe8:	b084      	sub	sp, #16
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	f107 001c 	add.w	r0, r7, #28
 8005ff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006004:	461a      	mov	r2, r3
 8006006:	2300      	movs	r3, #0
 8006008:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006036:	2b00      	cmp	r3, #0
 8006038:	d018      	beq.n	800606c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	2b01      	cmp	r3, #1
 800603e:	d10a      	bne.n	8006056 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800604e:	f043 0304 	orr.w	r3, r3, #4
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	e014      	b.n	8006080 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006064:	f023 0304 	bic.w	r3, r3, #4
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	e009      	b.n	8006080 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800607a:	f023 0304 	bic.w	r3, r3, #4
 800607e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006080:	2110      	movs	r1, #16
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff feb4 	bl	8005df0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff fed7 	bl	8005e3c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	e015      	b.n	80060c0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a0:	461a      	mov	r2, r3
 80060a2:	f04f 33ff 	mov.w	r3, #4294967295
 80060a6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b4:	461a      	mov	r2, r3
 80060b6:	2300      	movs	r3, #0
 80060b8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	3301      	adds	r3, #1
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d3e5      	bcc.n	8006094 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80060c8:	2101      	movs	r1, #1
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f8ac 	bl	8006228 <USB_DriveVbus>

  HAL_Delay(200U);
 80060d0:	20c8      	movs	r0, #200	; 0xc8
 80060d2:	f7fb f819 	bl	8001108 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f04f 32ff 	mov.w	r2, #4294967295
 80060e2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00b      	beq.n	8006108 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a14      	ldr	r2, [pc, #80]	; (800614c <USB_HostInit+0x164>)
 80060fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a13      	ldr	r2, [pc, #76]	; (8006150 <USB_HostInit+0x168>)
 8006102:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006106:	e009      	b.n	800611c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2280      	movs	r2, #128	; 0x80
 800610c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a10      	ldr	r2, [pc, #64]	; (8006154 <USB_HostInit+0x16c>)
 8006112:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a10      	ldr	r2, [pc, #64]	; (8006158 <USB_HostInit+0x170>)
 8006118:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	2b00      	cmp	r3, #0
 8006120:	d105      	bne.n	800612e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	f043 0210 	orr.w	r2, r3, #16
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	4b0a      	ldr	r3, [pc, #40]	; (800615c <USB_HostInit+0x174>)
 8006134:	4313      	orrs	r3, r2
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006146:	b004      	add	sp, #16
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	01000200 	.word	0x01000200
 8006150:	00e00300 	.word	0x00e00300
 8006154:	00600080 	.word	0x00600080
 8006158:	004000e0 	.word	0x004000e0
 800615c:	a3200008 	.word	0xa3200008

08006160 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800617e:	f023 0303 	bic.w	r3, r3, #3
 8006182:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	68f9      	ldr	r1, [r7, #12]
 8006194:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006198:	4313      	orrs	r3, r2
 800619a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800619c:	78fb      	ldrb	r3, [r7, #3]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d107      	bne.n	80061b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a8:	461a      	mov	r2, r3
 80061aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80061ae:	6053      	str	r3, [r2, #4]
 80061b0:	e009      	b.n	80061c6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80061b2:	78fb      	ldrb	r3, [r7, #3]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d106      	bne.n	80061c6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061be:	461a      	mov	r2, r3
 80061c0:	f241 7370 	movw	r3, #6000	; 0x1770
 80061c4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80061f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006202:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006204:	2064      	movs	r0, #100	; 0x64
 8006206:	f7fa ff7f 	bl	8001108 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006212:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006216:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006218:	200a      	movs	r0, #10
 800621a:	f7fa ff75 	bl	8001108 <HAL_Delay>

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800624c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d109      	bne.n	800626c <USB_DriveVbus+0x44>
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d106      	bne.n	800626c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006266:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800626a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006276:	d109      	bne.n	800628c <USB_DriveVbus+0x64>
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800628a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800629a:	b480      	push	{r7}
 800629c:	b085      	sub	sp, #20
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	0c5b      	lsrs	r3, r3, #17
 80062b8:	f003 0303 	and.w	r3, r3, #3
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	b29b      	uxth	r3, r3
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
	...

080062ec <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	4608      	mov	r0, r1
 80062f6:	4611      	mov	r1, r2
 80062f8:	461a      	mov	r2, r3
 80062fa:	4603      	mov	r3, r0
 80062fc:	70fb      	strb	r3, [r7, #3]
 80062fe:	460b      	mov	r3, r1
 8006300:	70bb      	strb	r3, [r7, #2]
 8006302:	4613      	mov	r3, r2
 8006304:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	4413      	add	r3, r2
 8006316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631a:	461a      	mov	r2, r3
 800631c:	f04f 33ff 	mov.w	r3, #4294967295
 8006320:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006322:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006326:	2b03      	cmp	r3, #3
 8006328:	d87e      	bhi.n	8006428 <USB_HC_Init+0x13c>
 800632a:	a201      	add	r2, pc, #4	; (adr r2, 8006330 <USB_HC_Init+0x44>)
 800632c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006330:	08006341 	.word	0x08006341
 8006334:	080063eb 	.word	0x080063eb
 8006338:	08006341 	.word	0x08006341
 800633c:	080063ad 	.word	0x080063ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4413      	add	r3, r2
 8006348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634c:	461a      	mov	r2, r3
 800634e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006352:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006354:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006358:	2b00      	cmp	r3, #0
 800635a:	da10      	bge.n	800637e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4413      	add	r3, r2
 8006364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	0151      	lsls	r1, r2, #5
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	440a      	add	r2, r1
 8006372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800637a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800637c:	e057      	b.n	800642e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006386:	2b00      	cmp	r3, #0
 8006388:	d051      	beq.n	800642e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	4413      	add	r3, r2
 8006392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	78fa      	ldrb	r2, [r7, #3]
 800639a:	0151      	lsls	r1, r2, #5
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	440a      	add	r2, r1
 80063a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80063a8:	60d3      	str	r3, [r2, #12]
      break;
 80063aa:	e040      	b.n	800642e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b8:	461a      	mov	r2, r3
 80063ba:	f240 639d 	movw	r3, #1693	; 0x69d
 80063be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80063c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	da34      	bge.n	8006432 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80063c8:	78fb      	ldrb	r3, [r7, #3]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	78fa      	ldrb	r2, [r7, #3]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80063e8:	e023      	b.n	8006432 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063ea:	78fb      	ldrb	r3, [r7, #3]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f6:	461a      	mov	r2, r3
 80063f8:	f240 2325 	movw	r3, #549	; 0x225
 80063fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80063fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006402:	2b00      	cmp	r3, #0
 8006404:	da17      	bge.n	8006436 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	4413      	add	r3, r2
 800640e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	78fa      	ldrb	r2, [r7, #3]
 8006416:	0151      	lsls	r1, r2, #5
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	440a      	add	r2, r1
 800641c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006420:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006424:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006426:	e006      	b.n	8006436 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	75fb      	strb	r3, [r7, #23]
      break;
 800642c:	e004      	b.n	8006438 <USB_HC_Init+0x14c>
      break;
 800642e:	bf00      	nop
 8006430:	e002      	b.n	8006438 <USB_HC_Init+0x14c>
      break;
 8006432:	bf00      	nop
 8006434:	e000      	b.n	8006438 <USB_HC_Init+0x14c>
      break;
 8006436:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800643e:	699a      	ldr	r2, [r3, #24]
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	2101      	movs	r1, #1
 8006448:	fa01 f303 	lsl.w	r3, r1, r3
 800644c:	68b9      	ldr	r1, [r7, #8]
 800644e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006452:	4313      	orrs	r3, r2
 8006454:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006462:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006466:	2b00      	cmp	r3, #0
 8006468:	da03      	bge.n	8006472 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800646a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	e001      	b.n	8006476 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006476:	f897 3020 	ldrb.w	r3, [r7, #32]
 800647a:	2b02      	cmp	r3, #2
 800647c:	d103      	bne.n	8006486 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800647e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	e001      	b.n	800648a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800648a:	787b      	ldrb	r3, [r7, #1]
 800648c:	059b      	lsls	r3, r3, #22
 800648e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006492:	78bb      	ldrb	r3, [r7, #2]
 8006494:	02db      	lsls	r3, r3, #11
 8006496:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800649a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800649c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064a0:	049b      	lsls	r3, r3, #18
 80064a2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064a6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064ae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	0159      	lsls	r1, r3, #5
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	440b      	add	r3, r1
 80064bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064c6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80064c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d10f      	bne.n	80064f0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	78fa      	ldrb	r2, [r7, #3]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064ee:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop

08006500 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08c      	sub	sp, #48	; 0x30
 8006504:	af02      	add	r7, sp, #8
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	4613      	mov	r3, r2
 800650c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	785b      	ldrb	r3, [r3, #1]
 8006516:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800651c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006526:	2b00      	cmp	r3, #0
 8006528:	d028      	beq.n	800657c <USB_HC_StartXfer+0x7c>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	791b      	ldrb	r3, [r3, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d124      	bne.n	800657c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006532:	79fb      	ldrb	r3, [r7, #7]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10b      	bne.n	8006550 <USB_HC_StartXfer+0x50>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	795b      	ldrb	r3, [r3, #5]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d107      	bne.n	8006550 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	785b      	ldrb	r3, [r3, #1]
 8006544:	4619      	mov	r1, r3
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 fa2e 	bl	80069a8 <USB_DoPing>
      return HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	e112      	b.n	8006776 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d112      	bne.n	800657c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	4413      	add	r3, r2
 800655e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	69fa      	ldr	r2, [r7, #28]
 8006566:	0151      	lsls	r1, r2, #5
 8006568:	6a3a      	ldr	r2, [r7, #32]
 800656a:	440a      	add	r2, r1
 800656c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006570:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006574:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2200      	movs	r2, #0
 800657a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d018      	beq.n	80065b6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	8912      	ldrh	r2, [r2, #8]
 800658c:	4413      	add	r3, r2
 800658e:	3b01      	subs	r3, #1
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	8912      	ldrh	r2, [r2, #8]
 8006594:	fbb3 f3f2 	udiv	r3, r3, r2
 8006598:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800659a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800659c:	8b7b      	ldrh	r3, [r7, #26]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d90b      	bls.n	80065ba <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80065a2:	8b7b      	ldrh	r3, [r7, #26]
 80065a4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80065a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	8912      	ldrh	r2, [r2, #8]
 80065ac:	fb02 f203 	mul.w	r2, r2, r3
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	611a      	str	r2, [r3, #16]
 80065b4:	e001      	b.n	80065ba <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80065b6:	2301      	movs	r3, #1
 80065b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	78db      	ldrb	r3, [r3, #3]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d006      	beq.n	80065d0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80065c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	8912      	ldrh	r2, [r2, #8]
 80065c8:	fb02 f203 	mul.w	r2, r2, r3
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065da:	04d9      	lsls	r1, r3, #19
 80065dc:	4b68      	ldr	r3, [pc, #416]	; (8006780 <USB_HC_StartXfer+0x280>)
 80065de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80065e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	7a9b      	ldrb	r3, [r3, #10]
 80065e6:	075b      	lsls	r3, r3, #29
 80065e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80065ec:	69f9      	ldr	r1, [r7, #28]
 80065ee:	0148      	lsls	r0, r1, #5
 80065f0:	6a39      	ldr	r1, [r7, #32]
 80065f2:	4401      	add	r1, r0
 80065f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80065fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d009      	beq.n	8006616 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	68d9      	ldr	r1, [r3, #12]
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006612:	460a      	mov	r2, r1
 8006614:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	bf0c      	ite	eq
 8006626:	2301      	moveq	r3, #1
 8006628:	2300      	movne	r3, #0
 800662a:	b2db      	uxtb	r3, r3
 800662c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	4413      	add	r3, r2
 8006636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	0151      	lsls	r1, r2, #5
 8006640:	6a3a      	ldr	r2, [r7, #32]
 8006642:	440a      	add	r2, r1
 8006644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006648:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800664c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	4413      	add	r3, r2
 8006656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	7e7b      	ldrb	r3, [r7, #25]
 800665e:	075b      	lsls	r3, r3, #29
 8006660:	69f9      	ldr	r1, [r7, #28]
 8006662:	0148      	lsls	r0, r1, #5
 8006664:	6a39      	ldr	r1, [r7, #32]
 8006666:	4401      	add	r1, r0
 8006668:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800666c:	4313      	orrs	r3, r2
 800666e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	4413      	add	r3, r2
 8006678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a41      	ldr	r2, [pc, #260]	; (8006784 <USB_HC_StartXfer+0x284>)
 8006680:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006682:	4b40      	ldr	r3, [pc, #256]	; (8006784 <USB_HC_StartXfer+0x284>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800668a:	4a3e      	ldr	r2, [pc, #248]	; (8006784 <USB_HC_StartXfer+0x284>)
 800668c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	78db      	ldrb	r3, [r3, #3]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d006      	beq.n	80066a4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006696:	4b3b      	ldr	r3, [pc, #236]	; (8006784 <USB_HC_StartXfer+0x284>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800669e:	4a39      	ldr	r2, [pc, #228]	; (8006784 <USB_HC_StartXfer+0x284>)
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	e005      	b.n	80066b0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80066a4:	4b37      	ldr	r3, [pc, #220]	; (8006784 <USB_HC_StartXfer+0x284>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066ac:	4a35      	ldr	r2, [pc, #212]	; (8006784 <USB_HC_StartXfer+0x284>)
 80066ae:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066b0:	4b34      	ldr	r3, [pc, #208]	; (8006784 <USB_HC_StartXfer+0x284>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066b8:	4a32      	ldr	r2, [pc, #200]	; (8006784 <USB_HC_StartXfer+0x284>)
 80066ba:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c8:	461a      	mov	r2, r3
 80066ca:	4b2e      	ldr	r3, [pc, #184]	; (8006784 <USB_HC_StartXfer+0x284>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d14e      	bne.n	8006774 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	78db      	ldrb	r3, [r3, #3]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d14a      	bne.n	8006774 <USB_HC_StartXfer+0x274>
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d046      	beq.n	8006774 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	79db      	ldrb	r3, [r3, #7]
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d830      	bhi.n	8006750 <USB_HC_StartXfer+0x250>
 80066ee:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <USB_HC_StartXfer+0x1f4>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006705 	.word	0x08006705
 80066f8:	08006729 	.word	0x08006729
 80066fc:	08006705 	.word	0x08006705
 8006700:	08006729 	.word	0x08006729
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	3303      	adds	r3, #3
 800670a:	089b      	lsrs	r3, r3, #2
 800670c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800670e:	8afa      	ldrh	r2, [r7, #22]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	b29b      	uxth	r3, r3
 8006716:	429a      	cmp	r2, r3
 8006718:	d91c      	bls.n	8006754 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	f043 0220 	orr.w	r2, r3, #32
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	619a      	str	r2, [r3, #24]
          }
          break;
 8006726:	e015      	b.n	8006754 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	3303      	adds	r3, #3
 800672e:	089b      	lsrs	r3, r3, #2
 8006730:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006732:	8afa      	ldrh	r2, [r7, #22]
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	b29b      	uxth	r3, r3
 800673e:	429a      	cmp	r2, r3
 8006740:	d90a      	bls.n	8006758 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	619a      	str	r2, [r3, #24]
          }
          break;
 800674e:	e003      	b.n	8006758 <USB_HC_StartXfer+0x258>

        default:
          break;
 8006750:	bf00      	nop
 8006752:	e002      	b.n	800675a <USB_HC_StartXfer+0x25a>
          break;
 8006754:	bf00      	nop
 8006756:	e000      	b.n	800675a <USB_HC_StartXfer+0x25a>
          break;
 8006758:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	68d9      	ldr	r1, [r3, #12]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	785a      	ldrb	r2, [r3, #1]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	b298      	uxth	r0, r3
 8006768:	2300      	movs	r3, #0
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	4603      	mov	r3, r0
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7ff fb86 	bl	8005e80 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3728      	adds	r7, #40	; 0x28
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	1ff80000 	.word	0x1ff80000
 8006784:	200000b0 	.word	0x200000b0

08006788 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	b29b      	uxth	r3, r3
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b087      	sub	sp, #28
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	460b      	mov	r3, r1
 80067b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80067ba:	78fb      	ldrb	r3, [r7, #3]
 80067bc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	0c9b      	lsrs	r3, r3, #18
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <USB_HC_Halt+0x3a>
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d16c      	bne.n	80068be <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	0151      	lsls	r1, r2, #5
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	440a      	add	r2, r1
 80067fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006802:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d143      	bne.n	8006898 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	4413      	add	r3, r2
 8006818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	0151      	lsls	r1, r2, #5
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	440a      	add	r2, r1
 8006826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800682a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800682e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	440a      	add	r2, r1
 8006846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800684a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800684e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	4413      	add	r3, r2
 8006858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	440a      	add	r2, r1
 8006866:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800686a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800686e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	3301      	adds	r3, #1
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800687c:	d81d      	bhi.n	80068ba <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	4413      	add	r3, r2
 8006886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006894:	d0ec      	beq.n	8006870 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006896:	e080      	b.n	800699a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068b6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068b8:	e06f      	b.n	800699a <USB_HC_Halt+0x1f0>
          break;
 80068ba:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068bc:	e06d      	b.n	800699a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	0151      	lsls	r1, r2, #5
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	440a      	add	r2, r1
 80068d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068dc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d143      	bne.n	8006976 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	440a      	add	r2, r1
 8006904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800690c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	4413      	add	r3, r2
 8006916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	440a      	add	r2, r1
 8006924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800692c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	4413      	add	r3, r2
 8006936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	440a      	add	r2, r1
 8006944:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006948:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800694c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	3301      	adds	r3, #1
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800695a:	d81d      	bhi.n	8006998 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	4413      	add	r3, r2
 8006964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800696e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006972:	d0ec      	beq.n	800694e <USB_HC_Halt+0x1a4>
 8006974:	e011      	b.n	800699a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	4413      	add	r3, r2
 800697e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	440a      	add	r2, r1
 800698c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006990:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	e000      	b.n	800699a <USB_HC_Halt+0x1f0>
          break;
 8006998:	bf00      	nop
    }
  }

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	371c      	adds	r7, #28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	460b      	mov	r3, r1
 80069b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80069bc:	2301      	movs	r3, #1
 80069be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	04da      	lsls	r2, r3, #19
 80069c4:	4b15      	ldr	r3, [pc, #84]	; (8006a1c <USB_DoPing+0x74>)
 80069c6:	4013      	ands	r3, r2
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069d8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069f0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069f8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a06:	461a      	mov	r2, r3
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	1ff80000 	.word	0x1ff80000

08006a20 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff f9a1 	bl	8005d78 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006a36:	2110      	movs	r1, #16
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7ff f9d9 	bl	8005df0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff f9fc 	bl	8005e3c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006a44:	2300      	movs	r3, #0
 8006a46:	613b      	str	r3, [r7, #16]
 8006a48:	e01f      	b.n	8006a8a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a60:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a68:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a70:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7e:	461a      	mov	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	3301      	adds	r3, #1
 8006a88:	613b      	str	r3, [r7, #16]
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	2b0f      	cmp	r3, #15
 8006a8e:	d9dc      	bls.n	8006a4a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006a90:	2300      	movs	r3, #0
 8006a92:	613b      	str	r3, [r7, #16]
 8006a94:	e034      	b.n	8006b00 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aac:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ab4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006abc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aca:	461a      	mov	r2, r3
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006adc:	d80c      	bhi.n	8006af8 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006af4:	d0ec      	beq.n	8006ad0 <USB_StopHost+0xb0>
 8006af6:	e000      	b.n	8006afa <USB_StopHost+0xda>
        break;
 8006af8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	3301      	adds	r3, #1
 8006afe:	613b      	str	r3, [r7, #16]
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	2b0f      	cmp	r3, #15
 8006b04:	d9c7      	bls.n	8006a96 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b12:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7ff f91a 	bl	8005d56 <USB_EnableGlobalInt>

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006b2c:	b590      	push	{r4, r7, lr}
 8006b2e:	b089      	sub	sp, #36	; 0x24
 8006b30:	af04      	add	r7, sp, #16
 8006b32:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006b34:	2301      	movs	r3, #1
 8006b36:	2202      	movs	r2, #2
 8006b38:	2102      	movs	r1, #2
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fc68 	bl	8007410 <USBH_FindInterface>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	2bff      	cmp	r3, #255	; 0xff
 8006b48:	d002      	beq.n	8006b50 <USBH_CDC_InterfaceInit+0x24>
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d901      	bls.n	8006b54 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b50:	2302      	movs	r3, #2
 8006b52:	e13d      	b.n	8006dd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fc3d 	bl	80073d8 <USBH_SelectInterface>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e131      	b.n	8006dd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006b72:	2050      	movs	r0, #80	; 0x50
 8006b74:	f002 fa04 	bl	8008f80 <malloc>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e11f      	b.n	8006dd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006b90:	2250      	movs	r2, #80	; 0x50
 8006b92:	2100      	movs	r1, #0
 8006b94:	68b8      	ldr	r0, [r7, #8]
 8006b96:	f002 fa03 	bl	8008fa0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006b9a:	7bfb      	ldrb	r3, [r7, #15]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	211a      	movs	r1, #26
 8006ba0:	fb01 f303 	mul.w	r3, r1, r3
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	b25b      	sxtb	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	da15      	bge.n	8006bde <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	211a      	movs	r1, #26
 8006bb8:	fb01 f303 	mul.w	r3, r1, r3
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bc2:	781a      	ldrb	r2, [r3, #0]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	211a      	movs	r1, #26
 8006bce:	fb01 f303 	mul.w	r3, r1, r3
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006bd8:	881a      	ldrh	r2, [r3, #0]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	785b      	ldrb	r3, [r3, #1]
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 fe36 	bl	8008856 <USBH_AllocPipe>
 8006bea:	4603      	mov	r3, r0
 8006bec:	461a      	mov	r2, r3
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	7819      	ldrb	r1, [r3, #0]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	7858      	ldrb	r0, [r3, #1]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	8952      	ldrh	r2, [r2, #10]
 8006c0a:	9202      	str	r2, [sp, #8]
 8006c0c:	2203      	movs	r2, #3
 8006c0e:	9201      	str	r2, [sp, #4]
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	4623      	mov	r3, r4
 8006c14:	4602      	mov	r2, r0
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f001 fdee 	bl	80087f8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2200      	movs	r2, #0
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f002 f8fb 	bl	8008e20 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	210a      	movs	r1, #10
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fbed 	bl	8007410 <USBH_FindInterface>
 8006c36:	4603      	mov	r3, r0
 8006c38:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	2bff      	cmp	r3, #255	; 0xff
 8006c3e:	d002      	beq.n	8006c46 <USBH_CDC_InterfaceInit+0x11a>
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d901      	bls.n	8006c4a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c46:	2302      	movs	r3, #2
 8006c48:	e0c2      	b.n	8006dd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	211a      	movs	r1, #26
 8006c50:	fb01 f303 	mul.w	r3, r1, r3
 8006c54:	4413      	add	r3, r2
 8006c56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b25b      	sxtb	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	da16      	bge.n	8006c90 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	211a      	movs	r1, #26
 8006c68:	fb01 f303 	mul.w	r3, r1, r3
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c72:	781a      	ldrb	r2, [r3, #0]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	211a      	movs	r1, #26
 8006c7e:	fb01 f303 	mul.w	r3, r1, r3
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c88:	881a      	ldrh	r2, [r3, #0]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	835a      	strh	r2, [r3, #26]
 8006c8e:	e015      	b.n	8006cbc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	211a      	movs	r1, #26
 8006c96:	fb01 f303 	mul.w	r3, r1, r3
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ca0:	781a      	ldrb	r2, [r3, #0]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	211a      	movs	r1, #26
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006cb6:	881a      	ldrh	r2, [r3, #0]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	211a      	movs	r1, #26
 8006cc2:	fb01 f303 	mul.w	r3, r1, r3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	b25b      	sxtb	r3, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	da16      	bge.n	8006d02 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	211a      	movs	r1, #26
 8006cda:	fb01 f303 	mul.w	r3, r1, r3
 8006cde:	4413      	add	r3, r2
 8006ce0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ce4:	781a      	ldrb	r2, [r3, #0]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	211a      	movs	r1, #26
 8006cf0:	fb01 f303 	mul.w	r3, r1, r3
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006cfa:	881a      	ldrh	r2, [r3, #0]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	835a      	strh	r2, [r3, #26]
 8006d00:	e015      	b.n	8006d2e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	211a      	movs	r1, #26
 8006d08:	fb01 f303 	mul.w	r3, r1, r3
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d12:	781a      	ldrb	r2, [r3, #0]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	211a      	movs	r1, #26
 8006d1e:	fb01 f303 	mul.w	r3, r1, r3
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006d28:	881a      	ldrh	r2, [r3, #0]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	7b9b      	ldrb	r3, [r3, #14]
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 fd8e 	bl	8008856 <USBH_AllocPipe>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	7bdb      	ldrb	r3, [r3, #15]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 fd84 	bl	8008856 <USBH_AllocPipe>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	461a      	mov	r2, r3
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	7b59      	ldrb	r1, [r3, #13]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	7b98      	ldrb	r0, [r3, #14]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	8b12      	ldrh	r2, [r2, #24]
 8006d6e:	9202      	str	r2, [sp, #8]
 8006d70:	2202      	movs	r2, #2
 8006d72:	9201      	str	r2, [sp, #4]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	4623      	mov	r3, r4
 8006d78:	4602      	mov	r2, r0
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 fd3c 	bl	80087f8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	7b19      	ldrb	r1, [r3, #12]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	7bd8      	ldrb	r0, [r3, #15]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	8b52      	ldrh	r2, [r2, #26]
 8006d98:	9202      	str	r2, [sp, #8]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	9201      	str	r2, [sp, #4]
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	4623      	mov	r3, r4
 8006da2:	4602      	mov	r2, r0
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 fd27 	bl	80087f8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	7b5b      	ldrb	r3, [r3, #13]
 8006db6:	2200      	movs	r2, #0
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f002 f830 	bl	8008e20 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	7b1b      	ldrb	r3, [r3, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f002 f829 	bl	8008e20 <USBH_LL_SetToggle>

  return USBH_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd90      	pop	{r4, r7, pc}

08006dd8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00e      	beq.n	8006e10 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 fd1c 	bl	8008836 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 fd47 	bl	8008898 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	7b1b      	ldrb	r3, [r3, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00e      	beq.n	8006e36 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	7b1b      	ldrb	r3, [r3, #12]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 fd09 	bl	8008836 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	7b1b      	ldrb	r3, [r3, #12]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 fd34 	bl	8008898 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	7b5b      	ldrb	r3, [r3, #13]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00e      	beq.n	8006e5c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	7b5b      	ldrb	r3, [r3, #13]
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 fcf6 	bl	8008836 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	7b5b      	ldrb	r3, [r3, #13]
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 fd21 	bl	8008898 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00b      	beq.n	8006e80 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f002 f88d 	bl	8008f90 <free>
    phost->pActiveClass->pData = 0U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3340      	adds	r3, #64	; 0x40
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f8b1 	bl	800700a <GetLineCoding>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006eac:	7afb      	ldrb	r3, [r7, #11]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d105      	bne.n	8006ebe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006eb8:	2102      	movs	r1, #2
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006ebe:	7afb      	ldrb	r3, [r7, #11]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d877      	bhi.n	8006fdc <USBH_CDC_Process+0x114>
 8006eec:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <USBH_CDC_Process+0x2c>)
 8006eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef2:	bf00      	nop
 8006ef4:	08006f09 	.word	0x08006f09
 8006ef8:	08006f0f 	.word	0x08006f0f
 8006efc:	08006f3f 	.word	0x08006f3f
 8006f00:	08006fb3 	.word	0x08006fb3
 8006f04:	08006fc1 	.word	0x08006fc1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f0c:	e06d      	b.n	8006fea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f897 	bl	8007048 <SetLineCoding>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d104      	bne.n	8006f2e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f2c:	e058      	b.n	8006fe0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006f2e:	7bbb      	ldrb	r3, [r7, #14]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d055      	beq.n	8006fe0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2204      	movs	r2, #4
 8006f38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006f3c:	e050      	b.n	8006fe0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	3340      	adds	r3, #64	; 0x40
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f860 	bl	800700a <GetLineCoding>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d126      	bne.n	8006fa2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f66:	791b      	ldrb	r3, [r3, #4]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d13b      	bne.n	8006fe4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f76:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d133      	bne.n	8006fe4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f86:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d12b      	bne.n	8006fe4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f94:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d124      	bne.n	8006fe4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f95a 	bl	8007254 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006fa0:	e020      	b.n	8006fe4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d01d      	beq.n	8006fe4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2204      	movs	r2, #4
 8006fac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006fb0:	e018      	b.n	8006fe4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f867 	bl	8007086 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f8dc 	bl	8007176 <CDC_ProcessReception>
      break;
 8006fbe:	e014      	b.n	8006fea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 ffe5 	bl	8007f92 <USBH_ClrFeature>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10a      	bne.n	8006fe8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006fda:	e005      	b.n	8006fe8 <USBH_CDC_Process+0x120>

    default:
      break;
 8006fdc:	bf00      	nop
 8006fde:	e004      	b.n	8006fea <USBH_CDC_Process+0x122>
      break;
 8006fe0:	bf00      	nop
 8006fe2:	e002      	b.n	8006fea <USBH_CDC_Process+0x122>
      break;
 8006fe4:	bf00      	nop
 8006fe6:	e000      	b.n	8006fea <USBH_CDC_Process+0x122>
      break;
 8006fe8:	bf00      	nop

  }

  return status;
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b082      	sub	sp, #8
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	22a1      	movs	r2, #161	; 0xa1
 8007018:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2221      	movs	r2, #33	; 0x21
 800701e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2207      	movs	r2, #7
 8007030:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2207      	movs	r2, #7
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 f98a 	bl	8008352 <USBH_CtlReq>
 800703e:	4603      	mov	r3, r0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2221      	movs	r2, #33	; 0x21
 8007056:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2220      	movs	r2, #32
 800705c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2207      	movs	r2, #7
 800706e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2207      	movs	r2, #7
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 f96b 	bl	8008352 <USBH_CtlReq>
 800707c:	4603      	mov	r3, r0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b086      	sub	sp, #24
 800708a:	af02      	add	r7, sp, #8
 800708c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007098:	2300      	movs	r3, #0
 800709a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d002      	beq.n	80070ac <CDC_ProcessTransmission+0x26>
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d025      	beq.n	80070f6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80070aa:	e060      	b.n	800716e <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	8b12      	ldrh	r2, [r2, #24]
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d90c      	bls.n	80070d2 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	69d9      	ldr	r1, [r3, #28]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8b1a      	ldrh	r2, [r3, #24]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	7b58      	ldrb	r0, [r3, #13]
 80070c4:	2301      	movs	r3, #1
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	4603      	mov	r3, r0
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f001 fb51 	bl	8008772 <USBH_BulkSendData>
 80070d0:	e00c      	b.n	80070ec <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80070da:	b29a      	uxth	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	7b58      	ldrb	r0, [r3, #13]
 80070e0:	2301      	movs	r3, #1
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	4603      	mov	r3, r0
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f001 fb43 	bl	8008772 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80070f4:	e03b      	b.n	800716e <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	7b5b      	ldrb	r3, [r3, #13]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f001 fe65 	bl	8008dcc <USBH_LL_GetURBState>
 8007102:	4603      	mov	r3, r0
 8007104:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007106:	7afb      	ldrb	r3, [r7, #11]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d128      	bne.n	800715e <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	8b12      	ldrh	r2, [r2, #24]
 8007114:	4293      	cmp	r3, r2
 8007116:	d90e      	bls.n	8007136 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	8b12      	ldrh	r2, [r2, #24]
 8007120:	1a9a      	subs	r2, r3, r2
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	8b12      	ldrh	r2, [r2, #24]
 800712e:	441a      	add	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	61da      	str	r2, [r3, #28]
 8007134:	e002      	b.n	800713c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	2b00      	cmp	r3, #0
 8007142:	d004      	beq.n	800714e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800714c:	e00e      	b.n	800716c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f868 	bl	800722c <USBH_CDC_TransmitCallback>
      break;
 800715c:	e006      	b.n	800716c <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800715e:	7afb      	ldrb	r3, [r7, #11]
 8007160:	2b02      	cmp	r3, #2
 8007162:	d103      	bne.n	800716c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800716c:	bf00      	nop
  }
}
 800716e:	bf00      	nop
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b086      	sub	sp, #24
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007188:	2300      	movs	r3, #0
 800718a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007192:	2b03      	cmp	r3, #3
 8007194:	d002      	beq.n	800719c <CDC_ProcessReception+0x26>
 8007196:	2b04      	cmp	r3, #4
 8007198:	d00e      	beq.n	80071b8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800719a:	e043      	b.n	8007224 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	6a19      	ldr	r1, [r3, #32]
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	8b5a      	ldrh	r2, [r3, #26]
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	7b1b      	ldrb	r3, [r3, #12]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f001 fb07 	bl	80087bc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2204      	movs	r2, #4
 80071b2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80071b6:	e035      	b.n	8007224 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	7b1b      	ldrb	r3, [r3, #12]
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 fe04 	bl	8008dcc <USBH_LL_GetURBState>
 80071c4:	4603      	mov	r3, r0
 80071c6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80071c8:	7cfb      	ldrb	r3, [r7, #19]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d129      	bne.n	8007222 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	7b1b      	ldrb	r3, [r3, #12]
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 fd67 	bl	8008ca8 <USBH_LL_GetLastXferSize>
 80071da:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d016      	beq.n	8007214 <CDC_ProcessReception+0x9e>
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	8b5b      	ldrh	r3, [r3, #26]
 80071ea:	461a      	mov	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d910      	bls.n	8007214 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	1ad2      	subs	r2, r2, r3
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	6a1a      	ldr	r2, [r3, #32]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	441a      	add	r2, r3
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2203      	movs	r2, #3
 800720e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007212:	e006      	b.n	8007222 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f80f 	bl	8007240 <USBH_CDC_ReceiveCallback>
      break;
 8007222:	bf00      	nop
  }
}
 8007224:	bf00      	nop
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	4613      	mov	r3, r2
 8007274:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800727c:	2302      	movs	r3, #2
 800727e:	e029      	b.n	80072d4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	79fa      	ldrb	r2, [r7, #7]
 8007284:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 f81f 	bl	80072dc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d003      	beq.n	80072cc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f001 fc39 	bl	8008b44 <USBH_LL_Init>

  return USBH_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072e8:	2300      	movs	r3, #0
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	e009      	b.n	8007302 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	33e0      	adds	r3, #224	; 0xe0
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	2200      	movs	r2, #0
 80072fa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3301      	adds	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b0e      	cmp	r3, #14
 8007306:	d9f2      	bls.n	80072ee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	e009      	b.n	8007322 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4413      	add	r3, r2
 8007314:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007318:	2200      	movs	r2, #0
 800731a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3301      	adds	r3, #1
 8007320:	60fb      	str	r3, [r7, #12]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007328:	d3f1      	bcc.n	800730e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2240      	movs	r2, #64	; 0x40
 800734e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d016      	beq.n	80073c6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10e      	bne.n	80073c0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073a8:	1c59      	adds	r1, r3, #1
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	33de      	adds	r3, #222	; 0xde
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73fb      	strb	r3, [r7, #15]
 80073be:	e004      	b.n	80073ca <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80073c0:	2302      	movs	r3, #2
 80073c2:	73fb      	strb	r3, [r7, #15]
 80073c4:	e001      	b.n	80073ca <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80073c6:	2302      	movs	r3, #2
 80073c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80073ee:	78fa      	ldrb	r2, [r7, #3]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d204      	bcs.n	80073fe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	78fa      	ldrb	r2, [r7, #3]
 80073f8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80073fc:	e001      	b.n	8007402 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80073fe:	2302      	movs	r3, #2
 8007400:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	4608      	mov	r0, r1
 800741a:	4611      	mov	r1, r2
 800741c:	461a      	mov	r2, r3
 800741e:	4603      	mov	r3, r0
 8007420:	70fb      	strb	r3, [r7, #3]
 8007422:	460b      	mov	r3, r1
 8007424:	70bb      	strb	r3, [r7, #2]
 8007426:	4613      	mov	r3, r2
 8007428:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800742e:	2300      	movs	r3, #0
 8007430:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007438:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800743a:	e025      	b.n	8007488 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800743c:	7dfb      	ldrb	r3, [r7, #23]
 800743e:	221a      	movs	r2, #26
 8007440:	fb02 f303 	mul.w	r3, r2, r3
 8007444:	3308      	adds	r3, #8
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4413      	add	r3, r2
 800744a:	3302      	adds	r3, #2
 800744c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	795b      	ldrb	r3, [r3, #5]
 8007452:	78fa      	ldrb	r2, [r7, #3]
 8007454:	429a      	cmp	r2, r3
 8007456:	d002      	beq.n	800745e <USBH_FindInterface+0x4e>
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	2bff      	cmp	r3, #255	; 0xff
 800745c:	d111      	bne.n	8007482 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007462:	78ba      	ldrb	r2, [r7, #2]
 8007464:	429a      	cmp	r2, r3
 8007466:	d002      	beq.n	800746e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007468:	78bb      	ldrb	r3, [r7, #2]
 800746a:	2bff      	cmp	r3, #255	; 0xff
 800746c:	d109      	bne.n	8007482 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007472:	787a      	ldrb	r2, [r7, #1]
 8007474:	429a      	cmp	r2, r3
 8007476:	d002      	beq.n	800747e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007478:	787b      	ldrb	r3, [r7, #1]
 800747a:	2bff      	cmp	r3, #255	; 0xff
 800747c:	d101      	bne.n	8007482 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	e006      	b.n	8007490 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007482:	7dfb      	ldrb	r3, [r7, #23]
 8007484:	3301      	adds	r3, #1
 8007486:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007488:	7dfb      	ldrb	r3, [r7, #23]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d9d6      	bls.n	800743c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800748e:	23ff      	movs	r3, #255	; 0xff
}
 8007490:	4618      	mov	r0, r3
 8007492:	371c      	adds	r7, #28
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 fb89 	bl	8008bbc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80074aa:	2101      	movs	r1, #1
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 fca0 	bl	8008df2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b088      	sub	sp, #32
 80074c0:	af04      	add	r7, sp, #16
 80074c2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80074c4:	2302      	movs	r3, #2
 80074c6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d102      	bne.n	80074de <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2203      	movs	r2, #3
 80074dc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b0b      	cmp	r3, #11
 80074e6:	f200 81b3 	bhi.w	8007850 <USBH_Process+0x394>
 80074ea:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <USBH_Process+0x34>)
 80074ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f0:	08007521 	.word	0x08007521
 80074f4:	08007553 	.word	0x08007553
 80074f8:	080075bb 	.word	0x080075bb
 80074fc:	080077eb 	.word	0x080077eb
 8007500:	08007851 	.word	0x08007851
 8007504:	0800765f 	.word	0x0800765f
 8007508:	08007791 	.word	0x08007791
 800750c:	08007695 	.word	0x08007695
 8007510:	080076b5 	.word	0x080076b5
 8007514:	080076d5 	.word	0x080076d5
 8007518:	08007703 	.word	0x08007703
 800751c:	080077d3 	.word	0x080077d3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 8193 	beq.w	8007854 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007534:	20c8      	movs	r0, #200	; 0xc8
 8007536:	f001 fca6 	bl	8008e86 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 fb99 	bl	8008c72 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007550:	e180      	b.n	8007854 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007558:	2b01      	cmp	r3, #1
 800755a:	d107      	bne.n	800756c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800756a:	e182      	b.n	8007872 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007576:	d914      	bls.n	80075a2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800757e:	3301      	adds	r3, #1
 8007580:	b2da      	uxtb	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800758e:	2b03      	cmp	r3, #3
 8007590:	d903      	bls.n	800759a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	220d      	movs	r2, #13
 8007596:	701a      	strb	r2, [r3, #0]
      break;
 8007598:	e16b      	b.n	8007872 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	701a      	strb	r2, [r3, #0]
      break;
 80075a0:	e167      	b.n	8007872 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80075a8:	f103 020a 	add.w	r2, r3, #10
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80075b2:	200a      	movs	r0, #10
 80075b4:	f001 fc67 	bl	8008e86 <USBH_Delay>
      break;
 80075b8:	e15b      	b.n	8007872 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075ca:	2104      	movs	r1, #4
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80075d0:	2064      	movs	r0, #100	; 0x64
 80075d2:	f001 fc58 	bl	8008e86 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 fb26 	bl	8008c28 <USBH_LL_GetSpeed>
 80075dc:	4603      	mov	r3, r0
 80075de:	461a      	mov	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2205      	movs	r2, #5
 80075ea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80075ec:	2100      	movs	r1, #0
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f001 f931 	bl	8008856 <USBH_AllocPipe>
 80075f4:	4603      	mov	r3, r0
 80075f6:	461a      	mov	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80075fc:	2180      	movs	r1, #128	; 0x80
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f001 f929 	bl	8008856 <USBH_AllocPipe>
 8007604:	4603      	mov	r3, r0
 8007606:	461a      	mov	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	7919      	ldrb	r1, [r3, #4]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007620:	b292      	uxth	r2, r2
 8007622:	9202      	str	r2, [sp, #8]
 8007624:	2200      	movs	r2, #0
 8007626:	9201      	str	r2, [sp, #4]
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	4603      	mov	r3, r0
 800762c:	2280      	movs	r2, #128	; 0x80
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 f8e2 	bl	80087f8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	7959      	ldrb	r1, [r3, #5]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007648:	b292      	uxth	r2, r2
 800764a:	9202      	str	r2, [sp, #8]
 800764c:	2200      	movs	r2, #0
 800764e:	9201      	str	r2, [sp, #4]
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	4603      	mov	r3, r0
 8007654:	2200      	movs	r2, #0
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 f8ce 	bl	80087f8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800765c:	e109      	b.n	8007872 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f90c 	bl	800787c <USBH_HandleEnum>
 8007664:	4603      	mov	r3, r0
 8007666:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	f040 80f3 	bne.w	8007858 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007680:	2b01      	cmp	r3, #1
 8007682:	d103      	bne.n	800768c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2208      	movs	r2, #8
 8007688:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800768a:	e0e5      	b.n	8007858 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2207      	movs	r2, #7
 8007690:	701a      	strb	r2, [r3, #0]
      break;
 8007692:	e0e1      	b.n	8007858 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 80de 	beq.w	800785c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076a6:	2101      	movs	r1, #1
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2208      	movs	r2, #8
 80076b0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80076b2:	e0d3      	b.n	800785c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fc20 	bl	8007f04 <USBH_SetCfg>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f040 80ca 	bne.w	8007860 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2209      	movs	r2, #9
 80076d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076d2:	e0c5      	b.n	8007860 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80076da:	f003 0320 	and.w	r3, r3, #32
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00b      	beq.n	80076fa <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80076e2:	2101      	movs	r1, #1
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fc30 	bl	8007f4a <USBH_SetFeature>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f040 80b9 	bne.w	8007864 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	220a      	movs	r2, #10
 80076f6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076f8:	e0b4      	b.n	8007864 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	220a      	movs	r2, #10
 80076fe:	701a      	strb	r2, [r3, #0]
      break;
 8007700:	e0b0      	b.n	8007864 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 80ad 	beq.w	8007868 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]
 800771a:	e016      	b.n	800774a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800771c:	7bfa      	ldrb	r2, [r7, #15]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	32de      	adds	r2, #222	; 0xde
 8007722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007726:	791a      	ldrb	r2, [r3, #4]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800772e:	429a      	cmp	r2, r3
 8007730:	d108      	bne.n	8007744 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007732:	7bfa      	ldrb	r2, [r7, #15]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	32de      	adds	r2, #222	; 0xde
 8007738:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007742:	e005      	b.n	8007750 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	3301      	adds	r3, #1
 8007748:	73fb      	strb	r3, [r7, #15]
 800774a:	7bfb      	ldrb	r3, [r7, #15]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d0e5      	beq.n	800771c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d016      	beq.n	8007788 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	4798      	blx	r3
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d109      	bne.n	8007780 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2206      	movs	r2, #6
 8007770:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007778:	2103      	movs	r1, #3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800777e:	e073      	b.n	8007868 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	220d      	movs	r2, #13
 8007784:	701a      	strb	r2, [r3, #0]
      break;
 8007786:	e06f      	b.n	8007868 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	220d      	movs	r2, #13
 800778c:	701a      	strb	r2, [r3, #0]
      break;
 800778e:	e06b      	b.n	8007868 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d017      	beq.n	80077ca <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
 80077a6:	4603      	mov	r3, r0
 80077a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d103      	bne.n	80077ba <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	220b      	movs	r2, #11
 80077b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077b8:	e058      	b.n	800786c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d154      	bne.n	800786c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	220d      	movs	r2, #13
 80077c6:	701a      	strb	r2, [r3, #0]
      break;
 80077c8:	e050      	b.n	800786c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	220d      	movs	r2, #13
 80077ce:	701a      	strb	r2, [r3, #0]
      break;
 80077d0:	e04c      	b.n	800786c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d049      	beq.n	8007870 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	4798      	blx	r3
      }
      break;
 80077e8:	e042      	b.n	8007870 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff fd72 	bl	80072dc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d009      	beq.n	8007816 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800781c:	2b00      	cmp	r3, #0
 800781e:	d005      	beq.n	800782c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007826:	2105      	movs	r1, #5
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b01      	cmp	r3, #1
 8007836:	d107      	bne.n	8007848 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff fe2b 	bl	800749c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007846:	e014      	b.n	8007872 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 f9b7 	bl	8008bbc <USBH_LL_Start>
      break;
 800784e:	e010      	b.n	8007872 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007850:	bf00      	nop
 8007852:	e00e      	b.n	8007872 <USBH_Process+0x3b6>
      break;
 8007854:	bf00      	nop
 8007856:	e00c      	b.n	8007872 <USBH_Process+0x3b6>
      break;
 8007858:	bf00      	nop
 800785a:	e00a      	b.n	8007872 <USBH_Process+0x3b6>
    break;
 800785c:	bf00      	nop
 800785e:	e008      	b.n	8007872 <USBH_Process+0x3b6>
      break;
 8007860:	bf00      	nop
 8007862:	e006      	b.n	8007872 <USBH_Process+0x3b6>
      break;
 8007864:	bf00      	nop
 8007866:	e004      	b.n	8007872 <USBH_Process+0x3b6>
      break;
 8007868:	bf00      	nop
 800786a:	e002      	b.n	8007872 <USBH_Process+0x3b6>
      break;
 800786c:	bf00      	nop
 800786e:	e000      	b.n	8007872 <USBH_Process+0x3b6>
      break;
 8007870:	bf00      	nop
  }
  return USBH_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af04      	add	r7, sp, #16
 8007882:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007884:	2301      	movs	r3, #1
 8007886:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007888:	2301      	movs	r3, #1
 800788a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	785b      	ldrb	r3, [r3, #1]
 8007890:	2b07      	cmp	r3, #7
 8007892:	f200 81c1 	bhi.w	8007c18 <USBH_HandleEnum+0x39c>
 8007896:	a201      	add	r2, pc, #4	; (adr r2, 800789c <USBH_HandleEnum+0x20>)
 8007898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789c:	080078bd 	.word	0x080078bd
 80078a0:	0800797b 	.word	0x0800797b
 80078a4:	080079e5 	.word	0x080079e5
 80078a8:	08007a73 	.word	0x08007a73
 80078ac:	08007add 	.word	0x08007add
 80078b0:	08007b4d 	.word	0x08007b4d
 80078b4:	08007b93 	.word	0x08007b93
 80078b8:	08007bd9 	.word	0x08007bd9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80078bc:	2108      	movs	r1, #8
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fa50 	bl	8007d64 <USBH_Get_DevDesc>
 80078c4:	4603      	mov	r3, r0
 80078c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d130      	bne.n	8007930 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	7919      	ldrb	r1, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80078f2:	b292      	uxth	r2, r2
 80078f4:	9202      	str	r2, [sp, #8]
 80078f6:	2200      	movs	r2, #0
 80078f8:	9201      	str	r2, [sp, #4]
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	4603      	mov	r3, r0
 80078fe:	2280      	movs	r2, #128	; 0x80
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 ff79 	bl	80087f8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	7959      	ldrb	r1, [r3, #5]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800791a:	b292      	uxth	r2, r2
 800791c:	9202      	str	r2, [sp, #8]
 800791e:	2200      	movs	r2, #0
 8007920:	9201      	str	r2, [sp, #4]
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	4603      	mov	r3, r0
 8007926:	2200      	movs	r2, #0
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 ff65 	bl	80087f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800792e:	e175      	b.n	8007c1c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	2b03      	cmp	r3, #3
 8007934:	f040 8172 	bne.w	8007c1c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800793e:	3301      	adds	r3, #1
 8007940:	b2da      	uxtb	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800794e:	2b03      	cmp	r3, #3
 8007950:	d903      	bls.n	800795a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	220d      	movs	r2, #13
 8007956:	701a      	strb	r2, [r3, #0]
      break;
 8007958:	e160      	b.n	8007c1c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	795b      	ldrb	r3, [r3, #5]
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 ff99 	bl	8008898 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	791b      	ldrb	r3, [r3, #4]
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 ff93 	bl	8008898 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	701a      	strb	r2, [r3, #0]
      break;
 8007978:	e150      	b.n	8007c1c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800797a:	2112      	movs	r1, #18
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f9f1 	bl	8007d64 <USBH_Get_DevDesc>
 8007982:	4603      	mov	r3, r0
 8007984:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d103      	bne.n	8007994 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007992:	e145      	b.n	8007c20 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	2b03      	cmp	r3, #3
 8007998:	f040 8142 	bne.w	8007c20 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079a2:	3301      	adds	r3, #1
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d903      	bls.n	80079be <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	220d      	movs	r2, #13
 80079ba:	701a      	strb	r2, [r3, #0]
      break;
 80079bc:	e130      	b.n	8007c20 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	795b      	ldrb	r3, [r3, #5]
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 ff67 	bl	8008898 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	791b      	ldrb	r3, [r3, #4]
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 ff61 	bl	8008898 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	701a      	strb	r2, [r3, #0]
      break;
 80079e2:	e11d      	b.n	8007c20 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80079e4:	2101      	movs	r1, #1
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fa68 	bl	8007ebc <USBH_SetAddress>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d132      	bne.n	8007a5c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80079f6:	2002      	movs	r0, #2
 80079f8:	f001 fa45 	bl	8008e86 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2203      	movs	r2, #3
 8007a08:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	7919      	ldrb	r1, [r3, #4]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a1e:	b292      	uxth	r2, r2
 8007a20:	9202      	str	r2, [sp, #8]
 8007a22:	2200      	movs	r2, #0
 8007a24:	9201      	str	r2, [sp, #4]
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2280      	movs	r2, #128	; 0x80
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fee3 	bl	80087f8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	7959      	ldrb	r1, [r3, #5]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a46:	b292      	uxth	r2, r2
 8007a48:	9202      	str	r2, [sp, #8]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	9201      	str	r2, [sp, #4]
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	4603      	mov	r3, r0
 8007a52:	2200      	movs	r2, #0
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fecf 	bl	80087f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a5a:	e0e3      	b.n	8007c24 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	f040 80e0 	bne.w	8007c24 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	220d      	movs	r2, #13
 8007a68:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	705a      	strb	r2, [r3, #1]
      break;
 8007a70:	e0d8      	b.n	8007c24 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007a72:	2109      	movs	r1, #9
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f99d 	bl	8007db4 <USBH_Get_CfgDesc>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d103      	bne.n	8007a8c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2204      	movs	r2, #4
 8007a88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a8a:	e0cd      	b.n	8007c28 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	f040 80ca 	bne.w	8007c28 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d903      	bls.n	8007ab6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	220d      	movs	r2, #13
 8007ab2:	701a      	strb	r2, [r3, #0]
      break;
 8007ab4:	e0b8      	b.n	8007c28 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	795b      	ldrb	r3, [r3, #5]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 feeb 	bl	8008898 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	791b      	ldrb	r3, [r3, #4]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fee5 	bl	8008898 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	701a      	strb	r2, [r3, #0]
      break;
 8007ada:	e0a5      	b.n	8007c28 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f965 	bl	8007db4 <USBH_Get_CfgDesc>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d103      	bne.n	8007afc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2205      	movs	r2, #5
 8007af8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007afa:	e097      	b.n	8007c2c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	f040 8094 	bne.w	8007c2c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d903      	bls.n	8007b26 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	220d      	movs	r2, #13
 8007b22:	701a      	strb	r2, [r3, #0]
      break;
 8007b24:	e082      	b.n	8007c2c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	795b      	ldrb	r3, [r3, #5]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 feb3 	bl	8008898 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	791b      	ldrb	r3, [r3, #4]
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fead 	bl	8008898 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	701a      	strb	r2, [r3, #0]
      break;
 8007b4a:	e06f      	b.n	8007c2c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d019      	beq.n	8007b8a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b62:	23ff      	movs	r3, #255	; 0xff
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f949 	bl	8007dfc <USBH_Get_StringDesc>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d103      	bne.n	8007b7c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2206      	movs	r2, #6
 8007b78:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007b7a:	e059      	b.n	8007c30 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d156      	bne.n	8007c30 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2206      	movs	r2, #6
 8007b86:	705a      	strb	r2, [r3, #1]
      break;
 8007b88:	e052      	b.n	8007c30 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2206      	movs	r2, #6
 8007b8e:	705a      	strb	r2, [r3, #1]
      break;
 8007b90:	e04e      	b.n	8007c30 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d019      	beq.n	8007bd0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ba8:	23ff      	movs	r3, #255	; 0xff
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f926 	bl	8007dfc <USBH_Get_StringDesc>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d103      	bne.n	8007bc2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2207      	movs	r2, #7
 8007bbe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007bc0:	e038      	b.n	8007c34 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	d135      	bne.n	8007c34 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2207      	movs	r2, #7
 8007bcc:	705a      	strb	r2, [r3, #1]
      break;
 8007bce:	e031      	b.n	8007c34 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2207      	movs	r2, #7
 8007bd4:	705a      	strb	r2, [r3, #1]
      break;
 8007bd6:	e02d      	b.n	8007c34 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d017      	beq.n	8007c12 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007bee:	23ff      	movs	r3, #255	; 0xff
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f903 	bl	8007dfc <USBH_Get_StringDesc>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bfa:	7bbb      	ldrb	r3, [r7, #14]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d102      	bne.n	8007c06 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007c04:	e018      	b.n	8007c38 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	d115      	bne.n	8007c38 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c10:	e012      	b.n	8007c38 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]
      break;
 8007c16:	e00f      	b.n	8007c38 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007c18:	bf00      	nop
 8007c1a:	e00e      	b.n	8007c3a <USBH_HandleEnum+0x3be>
      break;
 8007c1c:	bf00      	nop
 8007c1e:	e00c      	b.n	8007c3a <USBH_HandleEnum+0x3be>
      break;
 8007c20:	bf00      	nop
 8007c22:	e00a      	b.n	8007c3a <USBH_HandleEnum+0x3be>
      break;
 8007c24:	bf00      	nop
 8007c26:	e008      	b.n	8007c3a <USBH_HandleEnum+0x3be>
      break;
 8007c28:	bf00      	nop
 8007c2a:	e006      	b.n	8007c3a <USBH_HandleEnum+0x3be>
      break;
 8007c2c:	bf00      	nop
 8007c2e:	e004      	b.n	8007c3a <USBH_HandleEnum+0x3be>
      break;
 8007c30:	bf00      	nop
 8007c32:	e002      	b.n	8007c3a <USBH_HandleEnum+0x3be>
      break;
 8007c34:	bf00      	nop
 8007c36:	e000      	b.n	8007c3a <USBH_HandleEnum+0x3be>
      break;
 8007c38:	bf00      	nop
  }
  return Status;
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007c56:	bf00      	nop
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f804 	bl	8007c86 <USBH_HandleSof>
}
 8007c7e:	bf00      	nop
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b082      	sub	sp, #8
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b0b      	cmp	r3, #11
 8007c96:	d10a      	bne.n	8007cae <USBH_HandleSof+0x28>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d005      	beq.n	8007cae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
  }
}
 8007cae:	bf00      	nop
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007cc6:	bf00      	nop
}
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007ce2:	bf00      	nop
}
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b083      	sub	sp, #12
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 ff58 	bl	8008bf2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	791b      	ldrb	r3, [r3, #4]
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fda5 	bl	8008898 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	795b      	ldrb	r3, [r3, #5]
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fd9f 	bl	8008898 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af02      	add	r7, sp, #8
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007d76:	78fb      	ldrb	r3, [r7, #3]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d82:	2100      	movs	r1, #0
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f864 	bl	8007e52 <USBH_GetDescriptor>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73fb      	strb	r3, [r7, #15]
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10a      	bne.n	8007daa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007da0:	78fa      	ldrb	r2, [r7, #3]
 8007da2:	b292      	uxth	r2, r2
 8007da4:	4619      	mov	r1, r3
 8007da6:	f000 f918 	bl	8007fda <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af02      	add	r7, sp, #8
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	331c      	adds	r3, #28
 8007dc4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007dc6:	887b      	ldrh	r3, [r7, #2]
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f83d 	bl	8007e52 <USBH_GetDescriptor>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	72fb      	strb	r3, [r7, #11]
 8007ddc:	7afb      	ldrb	r3, [r7, #11]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d107      	bne.n	8007df2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007de8:	887a      	ldrh	r2, [r7, #2]
 8007dea:	68f9      	ldr	r1, [r7, #12]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 f964 	bl	80080ba <USBH_ParseCfgDesc>
  }

  return status;
 8007df2:	7afb      	ldrb	r3, [r7, #11]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af02      	add	r7, sp, #8
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	607a      	str	r2, [r7, #4]
 8007e06:	461a      	mov	r2, r3
 8007e08:	460b      	mov	r3, r1
 8007e0a:	72fb      	strb	r3, [r7, #11]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007e10:	7afb      	ldrb	r3, [r7, #11]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007e18:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007e20:	893b      	ldrh	r3, [r7, #8]
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	460b      	mov	r3, r1
 8007e26:	2100      	movs	r1, #0
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 f812 	bl	8007e52 <USBH_GetDescriptor>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	75fb      	strb	r3, [r7, #23]
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d107      	bne.n	8007e48 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e3e:	893a      	ldrh	r2, [r7, #8]
 8007e40:	6879      	ldr	r1, [r7, #4]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 fa37 	bl	80082b6 <USBH_ParseStringDesc>
  }

  return status;
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	607b      	str	r3, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	72fb      	strb	r3, [r7, #11]
 8007e60:	4613      	mov	r3, r2
 8007e62:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	789b      	ldrb	r3, [r3, #2]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d11c      	bne.n	8007ea6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007e6c:	7afb      	ldrb	r3, [r7, #11]
 8007e6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2206      	movs	r2, #6
 8007e7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	893a      	ldrh	r2, [r7, #8]
 8007e82:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007e84:	893b      	ldrh	r3, [r7, #8]
 8007e86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e8e:	d104      	bne.n	8007e9a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f240 4209 	movw	r2, #1033	; 0x409
 8007e96:	829a      	strh	r2, [r3, #20]
 8007e98:	e002      	b.n	8007ea0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	8b3a      	ldrh	r2, [r7, #24]
 8007ea4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007ea6:	8b3b      	ldrh	r3, [r7, #24]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 fa50 	bl	8008352 <USBH_CtlReq>
 8007eb2:	4603      	mov	r3, r0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	789b      	ldrb	r3, [r3, #2]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d10f      	bne.n	8007ef0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2205      	movs	r2, #5
 8007eda:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007edc:	78fb      	ldrb	r3, [r7, #3]
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fa2c 	bl	8008352 <USBH_CtlReq>
 8007efa:	4603      	mov	r3, r0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	789b      	ldrb	r3, [r3, #2]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d10e      	bne.n	8007f36 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2209      	movs	r2, #9
 8007f22:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	887a      	ldrh	r2, [r7, #2]
 8007f28:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007f36:	2200      	movs	r2, #0
 8007f38:	2100      	movs	r1, #0
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fa09 	bl	8008352 <USBH_CtlReq>
 8007f40:	4603      	mov	r3, r0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b082      	sub	sp, #8
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	460b      	mov	r3, r1
 8007f54:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	789b      	ldrb	r3, [r3, #2]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d10f      	bne.n	8007f7e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2203      	movs	r2, #3
 8007f68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007f6a:	78fb      	ldrb	r3, [r7, #3]
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2100      	movs	r1, #0
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f9e5 	bl	8008352 <USBH_CtlReq>
 8007f88:	4603      	mov	r3, r0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b082      	sub	sp, #8
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	789b      	ldrb	r3, [r3, #2]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d10f      	bne.n	8007fc6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2202      	movs	r2, #2
 8007faa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2100      	movs	r1, #0
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f9c1 	bl	8008352 <USBH_CtlReq>
 8007fd0:	4603      	mov	r3, r0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b085      	sub	sp, #20
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	60f8      	str	r0, [r7, #12]
 8007fe2:	60b9      	str	r1, [r7, #8]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	781a      	ldrb	r2, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	785a      	ldrb	r2, [r3, #1]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	3302      	adds	r3, #2
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	3303      	adds	r3, #3
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	b29b      	uxth	r3, r3
 8008008:	021b      	lsls	r3, r3, #8
 800800a:	b29b      	uxth	r3, r3
 800800c:	4313      	orrs	r3, r2
 800800e:	b29a      	uxth	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	791a      	ldrb	r2, [r3, #4]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	795a      	ldrb	r2, [r3, #5]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	799a      	ldrb	r2, [r3, #6]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	79da      	ldrb	r2, [r3, #7]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008034:	88fb      	ldrh	r3, [r7, #6]
 8008036:	2b08      	cmp	r3, #8
 8008038:	d939      	bls.n	80080ae <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	3308      	adds	r3, #8
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	b29a      	uxth	r2, r3
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	3309      	adds	r3, #9
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	b29b      	uxth	r3, r3
 800804a:	021b      	lsls	r3, r3, #8
 800804c:	b29b      	uxth	r3, r3
 800804e:	4313      	orrs	r3, r2
 8008050:	b29a      	uxth	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	330a      	adds	r3, #10
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	b29a      	uxth	r2, r3
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	330b      	adds	r3, #11
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	b29b      	uxth	r3, r3
 8008066:	021b      	lsls	r3, r3, #8
 8008068:	b29b      	uxth	r3, r3
 800806a:	4313      	orrs	r3, r2
 800806c:	b29a      	uxth	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	330c      	adds	r3, #12
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	b29a      	uxth	r2, r3
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	330d      	adds	r3, #13
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	b29b      	uxth	r3, r3
 8008082:	021b      	lsls	r3, r3, #8
 8008084:	b29b      	uxth	r3, r3
 8008086:	4313      	orrs	r3, r2
 8008088:	b29a      	uxth	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	7b9a      	ldrb	r2, [r3, #14]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	7bda      	ldrb	r2, [r3, #15]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	7c1a      	ldrb	r2, [r3, #16]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	7c5a      	ldrb	r2, [r3, #17]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	745a      	strb	r2, [r3, #17]
  }
}
 80080ae:	bf00      	nop
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b08a      	sub	sp, #40	; 0x28
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	60b9      	str	r1, [r7, #8]
 80080c4:	4613      	mov	r3, r2
 80080c6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	781a      	ldrb	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	785a      	ldrb	r2, [r3, #1]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	3302      	adds	r3, #2
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	3303      	adds	r3, #3
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	021b      	lsls	r3, r3, #8
 80080fe:	b29b      	uxth	r3, r3
 8008100:	4313      	orrs	r3, r2
 8008102:	b29a      	uxth	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	791a      	ldrb	r2, [r3, #4]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	795a      	ldrb	r2, [r3, #5]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	799a      	ldrb	r2, [r3, #6]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	79da      	ldrb	r2, [r3, #7]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	7a1a      	ldrb	r2, [r3, #8]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008130:	88fb      	ldrh	r3, [r7, #6]
 8008132:	2b09      	cmp	r3, #9
 8008134:	d95f      	bls.n	80081f6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008136:	2309      	movs	r3, #9
 8008138:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800813a:	2300      	movs	r3, #0
 800813c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800813e:	e051      	b.n	80081e4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008140:	f107 0316 	add.w	r3, r7, #22
 8008144:	4619      	mov	r1, r3
 8008146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008148:	f000 f8e8 	bl	800831c <USBH_GetNextDesc>
 800814c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	785b      	ldrb	r3, [r3, #1]
 8008152:	2b04      	cmp	r3, #4
 8008154:	d146      	bne.n	80081e4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800815a:	221a      	movs	r2, #26
 800815c:	fb02 f303 	mul.w	r3, r2, r3
 8008160:	3308      	adds	r3, #8
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	4413      	add	r3, r2
 8008166:	3302      	adds	r3, #2
 8008168:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800816a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800816c:	69f8      	ldr	r0, [r7, #28]
 800816e:	f000 f846 	bl	80081fe <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008178:	2300      	movs	r3, #0
 800817a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800817c:	e022      	b.n	80081c4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800817e:	f107 0316 	add.w	r3, r7, #22
 8008182:	4619      	mov	r1, r3
 8008184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008186:	f000 f8c9 	bl	800831c <USBH_GetNextDesc>
 800818a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	785b      	ldrb	r3, [r3, #1]
 8008190:	2b05      	cmp	r3, #5
 8008192:	d117      	bne.n	80081c4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008194:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008198:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800819c:	3201      	adds	r2, #1
 800819e:	00d2      	lsls	r2, r2, #3
 80081a0:	211a      	movs	r1, #26
 80081a2:	fb01 f303 	mul.w	r3, r1, r3
 80081a6:	4413      	add	r3, r2
 80081a8:	3308      	adds	r3, #8
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	4413      	add	r3, r2
 80081ae:	3304      	adds	r3, #4
 80081b0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80081b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081b4:	69b8      	ldr	r0, [r7, #24]
 80081b6:	f000 f851 	bl	800825c <USBH_ParseEPDesc>
            ep_ix++;
 80081ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80081be:	3301      	adds	r3, #1
 80081c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	791b      	ldrb	r3, [r3, #4]
 80081c8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d204      	bcs.n	80081da <USBH_ParseCfgDesc+0x120>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	885a      	ldrh	r2, [r3, #2]
 80081d4:	8afb      	ldrh	r3, [r7, #22]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d8d1      	bhi.n	800817e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80081da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081de:	3301      	adds	r3, #1
 80081e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80081e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d804      	bhi.n	80081f6 <USBH_ParseCfgDesc+0x13c>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	885a      	ldrh	r2, [r3, #2]
 80081f0:	8afb      	ldrh	r3, [r7, #22]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d8a4      	bhi.n	8008140 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80081f6:	bf00      	nop
 80081f8:	3728      	adds	r7, #40	; 0x28
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781a      	ldrb	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	785a      	ldrb	r2, [r3, #1]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	789a      	ldrb	r2, [r3, #2]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	78da      	ldrb	r2, [r3, #3]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	791a      	ldrb	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	795a      	ldrb	r2, [r3, #5]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	799a      	ldrb	r2, [r3, #6]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	79da      	ldrb	r2, [r3, #7]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	7a1a      	ldrb	r2, [r3, #8]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	721a      	strb	r2, [r3, #8]
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	781a      	ldrb	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	785a      	ldrb	r2, [r3, #1]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	789a      	ldrb	r2, [r3, #2]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	78da      	ldrb	r2, [r3, #3]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	3304      	adds	r3, #4
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	b29a      	uxth	r2, r3
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	3305      	adds	r3, #5
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	b29b      	uxth	r3, r3
 8008296:	021b      	lsls	r3, r3, #8
 8008298:	b29b      	uxth	r3, r3
 800829a:	4313      	orrs	r3, r2
 800829c:	b29a      	uxth	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	799a      	ldrb	r2, [r3, #6]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	719a      	strb	r2, [r3, #6]
}
 80082aa:	bf00      	nop
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b087      	sub	sp, #28
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	4613      	mov	r3, r2
 80082c2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	3301      	adds	r3, #1
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d120      	bne.n	8008310 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	1e9a      	subs	r2, r3, #2
 80082d4:	88fb      	ldrh	r3, [r7, #6]
 80082d6:	4293      	cmp	r3, r2
 80082d8:	bf28      	it	cs
 80082da:	4613      	movcs	r3, r2
 80082dc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3302      	adds	r3, #2
 80082e2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80082e4:	2300      	movs	r3, #0
 80082e6:	82fb      	strh	r3, [r7, #22]
 80082e8:	e00b      	b.n	8008302 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80082ea:	8afb      	ldrh	r3, [r7, #22]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	4413      	add	r3, r2
 80082f0:	781a      	ldrb	r2, [r3, #0]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	701a      	strb	r2, [r3, #0]
      pdest++;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	3301      	adds	r3, #1
 80082fa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80082fc:	8afb      	ldrh	r3, [r7, #22]
 80082fe:	3302      	adds	r3, #2
 8008300:	82fb      	strh	r3, [r7, #22]
 8008302:	8afa      	ldrh	r2, [r7, #22]
 8008304:	8abb      	ldrh	r3, [r7, #20]
 8008306:	429a      	cmp	r2, r3
 8008308:	d3ef      	bcc.n	80082ea <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	2200      	movs	r2, #0
 800830e:	701a      	strb	r2, [r3, #0]
  }
}
 8008310:	bf00      	nop
 8008312:	371c      	adds	r7, #28
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	881a      	ldrh	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	b29b      	uxth	r3, r3
 8008330:	4413      	add	r3, r2
 8008332:	b29a      	uxth	r2, r3
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4413      	add	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008344:	68fb      	ldr	r3, [r7, #12]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b086      	sub	sp, #24
 8008356:	af00      	add	r7, sp, #0
 8008358:	60f8      	str	r0, [r7, #12]
 800835a:	60b9      	str	r1, [r7, #8]
 800835c:	4613      	mov	r3, r2
 800835e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008360:	2301      	movs	r3, #1
 8008362:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	789b      	ldrb	r3, [r3, #2]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d002      	beq.n	8008372 <USBH_CtlReq+0x20>
 800836c:	2b02      	cmp	r3, #2
 800836e:	d00f      	beq.n	8008390 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008370:	e027      	b.n	80083c2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	88fa      	ldrh	r2, [r7, #6]
 800837c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2201      	movs	r2, #1
 8008382:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2202      	movs	r2, #2
 8008388:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800838a:	2301      	movs	r3, #1
 800838c:	75fb      	strb	r3, [r7, #23]
      break;
 800838e:	e018      	b.n	80083c2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f81b 	bl	80083cc <USBH_HandleControl>
 8008396:	4603      	mov	r3, r0
 8008398:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <USBH_CtlReq+0x54>
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d106      	bne.n	80083b4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2201      	movs	r2, #1
 80083aa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	761a      	strb	r2, [r3, #24]
      break;
 80083b2:	e005      	b.n	80083c0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d102      	bne.n	80083c0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2201      	movs	r2, #1
 80083be:	709a      	strb	r2, [r3, #2]
      break;
 80083c0:	bf00      	nop
  }
  return status;
 80083c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af02      	add	r7, sp, #8
 80083d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80083d4:	2301      	movs	r3, #1
 80083d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083d8:	2300      	movs	r3, #0
 80083da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	7e1b      	ldrb	r3, [r3, #24]
 80083e0:	3b01      	subs	r3, #1
 80083e2:	2b0a      	cmp	r3, #10
 80083e4:	f200 8158 	bhi.w	8008698 <USBH_HandleControl+0x2cc>
 80083e8:	a201      	add	r2, pc, #4	; (adr r2, 80083f0 <USBH_HandleControl+0x24>)
 80083ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ee:	bf00      	nop
 80083f0:	0800841d 	.word	0x0800841d
 80083f4:	08008437 	.word	0x08008437
 80083f8:	080084a1 	.word	0x080084a1
 80083fc:	080084c7 	.word	0x080084c7
 8008400:	080084ff 	.word	0x080084ff
 8008404:	0800852b 	.word	0x0800852b
 8008408:	0800857d 	.word	0x0800857d
 800840c:	0800859f 	.word	0x0800859f
 8008410:	080085db 	.word	0x080085db
 8008414:	08008603 	.word	0x08008603
 8008418:	08008641 	.word	0x08008641
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f103 0110 	add.w	r1, r3, #16
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	795b      	ldrb	r3, [r3, #5]
 8008426:	461a      	mov	r2, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f945 	bl	80086b8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2202      	movs	r2, #2
 8008432:	761a      	strb	r2, [r3, #24]
      break;
 8008434:	e13b      	b.n	80086ae <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	795b      	ldrb	r3, [r3, #5]
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fcc5 	bl	8008dcc <USBH_LL_GetURBState>
 8008442:	4603      	mov	r3, r0
 8008444:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d11e      	bne.n	800848a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	7c1b      	ldrb	r3, [r3, #16]
 8008450:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008454:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	8adb      	ldrh	r3, [r3, #22]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00a      	beq.n	8008474 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800845e:	7b7b      	ldrb	r3, [r7, #13]
 8008460:	2b80      	cmp	r3, #128	; 0x80
 8008462:	d103      	bne.n	800846c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2203      	movs	r2, #3
 8008468:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800846a:	e117      	b.n	800869c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2205      	movs	r2, #5
 8008470:	761a      	strb	r2, [r3, #24]
      break;
 8008472:	e113      	b.n	800869c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008474:	7b7b      	ldrb	r3, [r7, #13]
 8008476:	2b80      	cmp	r3, #128	; 0x80
 8008478:	d103      	bne.n	8008482 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2209      	movs	r2, #9
 800847e:	761a      	strb	r2, [r3, #24]
      break;
 8008480:	e10c      	b.n	800869c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2207      	movs	r2, #7
 8008486:	761a      	strb	r2, [r3, #24]
      break;
 8008488:	e108      	b.n	800869c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800848a:	7bbb      	ldrb	r3, [r7, #14]
 800848c:	2b04      	cmp	r3, #4
 800848e:	d003      	beq.n	8008498 <USBH_HandleControl+0xcc>
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	2b02      	cmp	r3, #2
 8008494:	f040 8102 	bne.w	800869c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	220b      	movs	r2, #11
 800849c:	761a      	strb	r2, [r3, #24]
      break;
 800849e:	e0fd      	b.n	800869c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6899      	ldr	r1, [r3, #8]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	899a      	ldrh	r2, [r3, #12]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	791b      	ldrb	r3, [r3, #4]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f93c 	bl	8008736 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2204      	movs	r2, #4
 80084c2:	761a      	strb	r2, [r3, #24]
      break;
 80084c4:	e0f3      	b.n	80086ae <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	791b      	ldrb	r3, [r3, #4]
 80084ca:	4619      	mov	r1, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fc7d 	bl	8008dcc <USBH_LL_GetURBState>
 80084d2:	4603      	mov	r3, r0
 80084d4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d102      	bne.n	80084e2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2209      	movs	r2, #9
 80084e0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	2b05      	cmp	r3, #5
 80084e6:	d102      	bne.n	80084ee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80084e8:	2303      	movs	r3, #3
 80084ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80084ec:	e0d8      	b.n	80086a0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b04      	cmp	r3, #4
 80084f2:	f040 80d5 	bne.w	80086a0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	220b      	movs	r2, #11
 80084fa:	761a      	strb	r2, [r3, #24]
      break;
 80084fc:	e0d0      	b.n	80086a0 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6899      	ldr	r1, [r3, #8]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	899a      	ldrh	r2, [r3, #12]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	7958      	ldrb	r0, [r3, #5]
 800850a:	2301      	movs	r3, #1
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	4603      	mov	r3, r0
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f8eb 	bl	80086ec <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800851c:	b29a      	uxth	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2206      	movs	r2, #6
 8008526:	761a      	strb	r2, [r3, #24]
      break;
 8008528:	e0c1      	b.n	80086ae <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	795b      	ldrb	r3, [r3, #5]
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fc4b 	bl	8008dcc <USBH_LL_GetURBState>
 8008536:	4603      	mov	r3, r0
 8008538:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d103      	bne.n	8008548 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2207      	movs	r2, #7
 8008544:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008546:	e0ad      	b.n	80086a4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	2b05      	cmp	r3, #5
 800854c:	d105      	bne.n	800855a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	220c      	movs	r2, #12
 8008552:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008554:	2303      	movs	r3, #3
 8008556:	73fb      	strb	r3, [r7, #15]
      break;
 8008558:	e0a4      	b.n	80086a4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b02      	cmp	r3, #2
 800855e:	d103      	bne.n	8008568 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2205      	movs	r2, #5
 8008564:	761a      	strb	r2, [r3, #24]
      break;
 8008566:	e09d      	b.n	80086a4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2b04      	cmp	r3, #4
 800856c:	f040 809a 	bne.w	80086a4 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	220b      	movs	r2, #11
 8008574:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008576:	2302      	movs	r3, #2
 8008578:	73fb      	strb	r3, [r7, #15]
      break;
 800857a:	e093      	b.n	80086a4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	791b      	ldrb	r3, [r3, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	2100      	movs	r1, #0
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f8d6 	bl	8008736 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008590:	b29a      	uxth	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2208      	movs	r2, #8
 800859a:	761a      	strb	r2, [r3, #24]

      break;
 800859c:	e087      	b.n	80086ae <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	791b      	ldrb	r3, [r3, #4]
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fc11 	bl	8008dcc <USBH_LL_GetURBState>
 80085aa:	4603      	mov	r3, r0
 80085ac:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d105      	bne.n	80085c0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	220d      	movs	r2, #13
 80085b8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80085be:	e073      	b.n	80086a8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d103      	bne.n	80085ce <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	220b      	movs	r2, #11
 80085ca:	761a      	strb	r2, [r3, #24]
      break;
 80085cc:	e06c      	b.n	80086a8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	2b05      	cmp	r3, #5
 80085d2:	d169      	bne.n	80086a8 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80085d4:	2303      	movs	r3, #3
 80085d6:	73fb      	strb	r3, [r7, #15]
      break;
 80085d8:	e066      	b.n	80086a8 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	795a      	ldrb	r2, [r3, #5]
 80085de:	2301      	movs	r3, #1
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	4613      	mov	r3, r2
 80085e4:	2200      	movs	r2, #0
 80085e6:	2100      	movs	r1, #0
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f87f 	bl	80086ec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	220a      	movs	r2, #10
 80085fe:	761a      	strb	r2, [r3, #24]
      break;
 8008600:	e055      	b.n	80086ae <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	795b      	ldrb	r3, [r3, #5]
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fbdf 	bl	8008dcc <USBH_LL_GetURBState>
 800860e:	4603      	mov	r3, r0
 8008610:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d105      	bne.n	8008624 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	220d      	movs	r2, #13
 8008620:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008622:	e043      	b.n	80086ac <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008624:	7bbb      	ldrb	r3, [r7, #14]
 8008626:	2b02      	cmp	r3, #2
 8008628:	d103      	bne.n	8008632 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2209      	movs	r2, #9
 800862e:	761a      	strb	r2, [r3, #24]
      break;
 8008630:	e03c      	b.n	80086ac <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	2b04      	cmp	r3, #4
 8008636:	d139      	bne.n	80086ac <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	220b      	movs	r2, #11
 800863c:	761a      	strb	r2, [r3, #24]
      break;
 800863e:	e035      	b.n	80086ac <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	7e5b      	ldrb	r3, [r3, #25]
 8008644:	3301      	adds	r3, #1
 8008646:	b2da      	uxtb	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	765a      	strb	r2, [r3, #25]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	7e5b      	ldrb	r3, [r3, #25]
 8008650:	2b02      	cmp	r3, #2
 8008652:	d806      	bhi.n	8008662 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008660:	e025      	b.n	80086ae <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008668:	2106      	movs	r1, #6
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	795b      	ldrb	r3, [r3, #5]
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f90c 	bl	8008898 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	791b      	ldrb	r3, [r3, #4]
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f906 	bl	8008898 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008692:	2302      	movs	r3, #2
 8008694:	73fb      	strb	r3, [r7, #15]
      break;
 8008696:	e00a      	b.n	80086ae <USBH_HandleControl+0x2e2>

    default:
      break;
 8008698:	bf00      	nop
 800869a:	e008      	b.n	80086ae <USBH_HandleControl+0x2e2>
      break;
 800869c:	bf00      	nop
 800869e:	e006      	b.n	80086ae <USBH_HandleControl+0x2e2>
      break;
 80086a0:	bf00      	nop
 80086a2:	e004      	b.n	80086ae <USBH_HandleControl+0x2e2>
      break;
 80086a4:	bf00      	nop
 80086a6:	e002      	b.n	80086ae <USBH_HandleControl+0x2e2>
      break;
 80086a8:	bf00      	nop
 80086aa:	e000      	b.n	80086ae <USBH_HandleControl+0x2e2>
      break;
 80086ac:	bf00      	nop
  }

  return status;
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af04      	add	r7, sp, #16
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	4613      	mov	r3, r2
 80086c4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80086c6:	79f9      	ldrb	r1, [r7, #7]
 80086c8:	2300      	movs	r3, #0
 80086ca:	9303      	str	r3, [sp, #12]
 80086cc:	2308      	movs	r3, #8
 80086ce:	9302      	str	r3, [sp, #8]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	9301      	str	r3, [sp, #4]
 80086d4:	2300      	movs	r3, #0
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	2300      	movs	r3, #0
 80086da:	2200      	movs	r2, #0
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f000 fb44 	bl	8008d6a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af04      	add	r7, sp, #16
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	4611      	mov	r1, r2
 80086f8:	461a      	mov	r2, r3
 80086fa:	460b      	mov	r3, r1
 80086fc:	80fb      	strh	r3, [r7, #6]
 80086fe:	4613      	mov	r3, r2
 8008700:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008710:	7979      	ldrb	r1, [r7, #5]
 8008712:	7e3b      	ldrb	r3, [r7, #24]
 8008714:	9303      	str	r3, [sp, #12]
 8008716:	88fb      	ldrh	r3, [r7, #6]
 8008718:	9302      	str	r3, [sp, #8]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	9301      	str	r3, [sp, #4]
 800871e:	2301      	movs	r3, #1
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	2300      	movs	r3, #0
 8008724:	2200      	movs	r2, #0
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 fb1f 	bl	8008d6a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b088      	sub	sp, #32
 800873a:	af04      	add	r7, sp, #16
 800873c:	60f8      	str	r0, [r7, #12]
 800873e:	60b9      	str	r1, [r7, #8]
 8008740:	4611      	mov	r1, r2
 8008742:	461a      	mov	r2, r3
 8008744:	460b      	mov	r3, r1
 8008746:	80fb      	strh	r3, [r7, #6]
 8008748:	4613      	mov	r3, r2
 800874a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800874c:	7979      	ldrb	r1, [r7, #5]
 800874e:	2300      	movs	r3, #0
 8008750:	9303      	str	r3, [sp, #12]
 8008752:	88fb      	ldrh	r3, [r7, #6]
 8008754:	9302      	str	r3, [sp, #8]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	9301      	str	r3, [sp, #4]
 800875a:	2301      	movs	r3, #1
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	2300      	movs	r3, #0
 8008760:	2201      	movs	r2, #1
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f000 fb01 	bl	8008d6a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008768:	2300      	movs	r3, #0

}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b088      	sub	sp, #32
 8008776:	af04      	add	r7, sp, #16
 8008778:	60f8      	str	r0, [r7, #12]
 800877a:	60b9      	str	r1, [r7, #8]
 800877c:	4611      	mov	r1, r2
 800877e:	461a      	mov	r2, r3
 8008780:	460b      	mov	r3, r1
 8008782:	80fb      	strh	r3, [r7, #6]
 8008784:	4613      	mov	r3, r2
 8008786:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008792:	2300      	movs	r3, #0
 8008794:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008796:	7979      	ldrb	r1, [r7, #5]
 8008798:	7e3b      	ldrb	r3, [r7, #24]
 800879a:	9303      	str	r3, [sp, #12]
 800879c:	88fb      	ldrh	r3, [r7, #6]
 800879e:	9302      	str	r3, [sp, #8]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	9301      	str	r3, [sp, #4]
 80087a4:	2301      	movs	r3, #1
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	2302      	movs	r3, #2
 80087aa:	2200      	movs	r2, #0
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 fadc 	bl	8008d6a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af04      	add	r7, sp, #16
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	4611      	mov	r1, r2
 80087c8:	461a      	mov	r2, r3
 80087ca:	460b      	mov	r3, r1
 80087cc:	80fb      	strh	r3, [r7, #6]
 80087ce:	4613      	mov	r3, r2
 80087d0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80087d2:	7979      	ldrb	r1, [r7, #5]
 80087d4:	2300      	movs	r3, #0
 80087d6:	9303      	str	r3, [sp, #12]
 80087d8:	88fb      	ldrh	r3, [r7, #6]
 80087da:	9302      	str	r3, [sp, #8]
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	9301      	str	r3, [sp, #4]
 80087e0:	2301      	movs	r3, #1
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	2302      	movs	r3, #2
 80087e6:	2201      	movs	r2, #1
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 fabe 	bl	8008d6a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af04      	add	r7, sp, #16
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	4608      	mov	r0, r1
 8008802:	4611      	mov	r1, r2
 8008804:	461a      	mov	r2, r3
 8008806:	4603      	mov	r3, r0
 8008808:	70fb      	strb	r3, [r7, #3]
 800880a:	460b      	mov	r3, r1
 800880c:	70bb      	strb	r3, [r7, #2]
 800880e:	4613      	mov	r3, r2
 8008810:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008812:	7878      	ldrb	r0, [r7, #1]
 8008814:	78ba      	ldrb	r2, [r7, #2]
 8008816:	78f9      	ldrb	r1, [r7, #3]
 8008818:	8b3b      	ldrh	r3, [r7, #24]
 800881a:	9302      	str	r3, [sp, #8]
 800881c:	7d3b      	ldrb	r3, [r7, #20]
 800881e:	9301      	str	r3, [sp, #4]
 8008820:	7c3b      	ldrb	r3, [r7, #16]
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	4603      	mov	r3, r0
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fa51 	bl	8008cce <USBH_LL_OpenPipe>

  return USBH_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b082      	sub	sp, #8
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	460b      	mov	r3, r1
 8008840:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008842:	78fb      	ldrb	r3, [r7, #3]
 8008844:	4619      	mov	r1, r3
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fa70 	bl	8008d2c <USBH_LL_ClosePipe>

  return USBH_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	460b      	mov	r3, r1
 8008860:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f836 	bl	80088d4 <USBH_GetFreePipe>
 8008868:	4603      	mov	r3, r0
 800886a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800886c:	89fb      	ldrh	r3, [r7, #14]
 800886e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008872:	4293      	cmp	r3, r2
 8008874:	d00a      	beq.n	800888c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008876:	78fa      	ldrb	r2, [r7, #3]
 8008878:	89fb      	ldrh	r3, [r7, #14]
 800887a:	f003 030f 	and.w	r3, r3, #15
 800887e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008882:	6879      	ldr	r1, [r7, #4]
 8008884:	33e0      	adds	r3, #224	; 0xe0
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	440b      	add	r3, r1
 800888a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800888c:	89fb      	ldrh	r3, [r7, #14]
 800888e:	b2db      	uxtb	r3, r3
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80088a4:	78fb      	ldrb	r3, [r7, #3]
 80088a6:	2b0a      	cmp	r3, #10
 80088a8:	d80d      	bhi.n	80088c6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80088aa:	78fb      	ldrb	r3, [r7, #3]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	33e0      	adds	r3, #224	; 0xe0
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	78fb      	ldrb	r3, [r7, #3]
 80088b8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80088bc:	6879      	ldr	r1, [r7, #4]
 80088be:	33e0      	adds	r3, #224	; 0xe0
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	440b      	add	r3, r1
 80088c4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80088dc:	2300      	movs	r3, #0
 80088de:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80088e0:	2300      	movs	r3, #0
 80088e2:	73fb      	strb	r3, [r7, #15]
 80088e4:	e00f      	b.n	8008906 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	33e0      	adds	r3, #224	; 0xe0
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d102      	bne.n	8008900 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	e007      	b.n	8008910 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	3301      	adds	r3, #1
 8008904:	73fb      	strb	r3, [r7, #15]
 8008906:	7bfb      	ldrb	r3, [r7, #15]
 8008908:	2b0a      	cmp	r3, #10
 800890a:	d9ec      	bls.n	80088e6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800890c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008910:	4618      	mov	r0, r3
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008920:	2201      	movs	r2, #1
 8008922:	490e      	ldr	r1, [pc, #56]	; (800895c <MX_USB_HOST_Init+0x40>)
 8008924:	480e      	ldr	r0, [pc, #56]	; (8008960 <MX_USB_HOST_Init+0x44>)
 8008926:	f7fe fc9f 	bl	8007268 <USBH_Init>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008930:	f7f8 f8b0 	bl	8000a94 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008934:	490b      	ldr	r1, [pc, #44]	; (8008964 <MX_USB_HOST_Init+0x48>)
 8008936:	480a      	ldr	r0, [pc, #40]	; (8008960 <MX_USB_HOST_Init+0x44>)
 8008938:	f7fe fd24 	bl	8007384 <USBH_RegisterClass>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008942:	f7f8 f8a7 	bl	8000a94 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008946:	4806      	ldr	r0, [pc, #24]	; (8008960 <MX_USB_HOST_Init+0x44>)
 8008948:	f7fe fda8 	bl	800749c <USBH_Start>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008952:	f7f8 f89f 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008956:	bf00      	nop
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	0800897d 	.word	0x0800897d
 8008960:	20000280 	.word	0x20000280
 8008964:	2000000c 	.word	0x2000000c

08008968 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800896c:	4802      	ldr	r0, [pc, #8]	; (8008978 <MX_USB_HOST_Process+0x10>)
 800896e:	f7fe fda5 	bl	80074bc <USBH_Process>
}
 8008972:	bf00      	nop
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	20000280 	.word	0x20000280

0800897c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	460b      	mov	r3, r1
 8008986:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008988:	78fb      	ldrb	r3, [r7, #3]
 800898a:	3b01      	subs	r3, #1
 800898c:	2b04      	cmp	r3, #4
 800898e:	d819      	bhi.n	80089c4 <USBH_UserProcess+0x48>
 8008990:	a201      	add	r2, pc, #4	; (adr r2, 8008998 <USBH_UserProcess+0x1c>)
 8008992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008996:	bf00      	nop
 8008998:	080089c5 	.word	0x080089c5
 800899c:	080089b5 	.word	0x080089b5
 80089a0:	080089c5 	.word	0x080089c5
 80089a4:	080089bd 	.word	0x080089bd
 80089a8:	080089ad 	.word	0x080089ad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80089ac:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <USBH_UserProcess+0x58>)
 80089ae:	2203      	movs	r2, #3
 80089b0:	701a      	strb	r2, [r3, #0]
  break;
 80089b2:	e008      	b.n	80089c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80089b4:	4b07      	ldr	r3, [pc, #28]	; (80089d4 <USBH_UserProcess+0x58>)
 80089b6:	2202      	movs	r2, #2
 80089b8:	701a      	strb	r2, [r3, #0]
  break;
 80089ba:	e004      	b.n	80089c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80089bc:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <USBH_UserProcess+0x58>)
 80089be:	2201      	movs	r2, #1
 80089c0:	701a      	strb	r2, [r3, #0]
  break;
 80089c2:	e000      	b.n	80089c6 <USBH_UserProcess+0x4a>

  default:
  break;
 80089c4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80089c6:	bf00      	nop
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	200000b4 	.word	0x200000b4

080089d8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b08a      	sub	sp, #40	; 0x28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089e0:	f107 0314 	add.w	r3, r7, #20
 80089e4:	2200      	movs	r2, #0
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	605a      	str	r2, [r3, #4]
 80089ea:	609a      	str	r2, [r3, #8]
 80089ec:	60da      	str	r2, [r3, #12]
 80089ee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089f8:	d147      	bne.n	8008a8a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089fa:	2300      	movs	r3, #0
 80089fc:	613b      	str	r3, [r7, #16]
 80089fe:	4b25      	ldr	r3, [pc, #148]	; (8008a94 <HAL_HCD_MspInit+0xbc>)
 8008a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a02:	4a24      	ldr	r2, [pc, #144]	; (8008a94 <HAL_HCD_MspInit+0xbc>)
 8008a04:	f043 0301 	orr.w	r3, r3, #1
 8008a08:	6313      	str	r3, [r2, #48]	; 0x30
 8008a0a:	4b22      	ldr	r3, [pc, #136]	; (8008a94 <HAL_HCD_MspInit+0xbc>)
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	613b      	str	r3, [r7, #16]
 8008a14:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a20:	2300      	movs	r3, #0
 8008a22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008a24:	f107 0314 	add.w	r3, r7, #20
 8008a28:	4619      	mov	r1, r3
 8008a2a:	481b      	ldr	r0, [pc, #108]	; (8008a98 <HAL_HCD_MspInit+0xc0>)
 8008a2c:	f7f8 fcc2 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008a30:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a36:	2302      	movs	r3, #2
 8008a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a42:	230a      	movs	r3, #10
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a46:	f107 0314 	add.w	r3, r7, #20
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	4812      	ldr	r0, [pc, #72]	; (8008a98 <HAL_HCD_MspInit+0xc0>)
 8008a4e:	f7f8 fcb1 	bl	80013b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a52:	4b10      	ldr	r3, [pc, #64]	; (8008a94 <HAL_HCD_MspInit+0xbc>)
 8008a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a56:	4a0f      	ldr	r2, [pc, #60]	; (8008a94 <HAL_HCD_MspInit+0xbc>)
 8008a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a5c:	6353      	str	r3, [r2, #52]	; 0x34
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]
 8008a62:	4b0c      	ldr	r3, [pc, #48]	; (8008a94 <HAL_HCD_MspInit+0xbc>)
 8008a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a66:	4a0b      	ldr	r2, [pc, #44]	; (8008a94 <HAL_HCD_MspInit+0xbc>)
 8008a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8008a6e:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <HAL_HCD_MspInit+0xbc>)
 8008a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	2043      	movs	r0, #67	; 0x43
 8008a80:	f7f8 fc3f 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a84:	2043      	movs	r0, #67	; 0x43
 8008a86:	f7f8 fc58 	bl	800133a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a8a:	bf00      	nop
 8008a8c:	3728      	adds	r7, #40	; 0x28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	40023800 	.word	0x40023800
 8008a98:	40020000 	.word	0x40020000

08008a9c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7ff f8d9 	bl	8007c62 <USBH_LL_IncTimer>
}
 8008ab0:	bf00      	nop
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7ff f911 	bl	8007cee <USBH_LL_Connect>
}
 8008acc:	bf00      	nop
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7ff f91a 	bl	8007d1c <USBH_LL_Disconnect>
}
 8008ae8:	bf00      	nop
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
 8008afc:	4613      	mov	r3, r2
 8008afe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7ff f8cb 	bl	8007cb6 <USBH_LL_PortEnabled>
}
 8008b20:	bf00      	nop
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff f8cb 	bl	8007cd2 <USBH_LL_PortDisabled>
}
 8008b3c:	bf00      	nop
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d12a      	bne.n	8008bac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008b56:	4a18      	ldr	r2, [pc, #96]	; (8008bb8 <USBH_LL_Init+0x74>)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a15      	ldr	r2, [pc, #84]	; (8008bb8 <USBH_LL_Init+0x74>)
 8008b62:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b66:	4b14      	ldr	r3, [pc, #80]	; (8008bb8 <USBH_LL_Init+0x74>)
 8008b68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b6c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008b6e:	4b12      	ldr	r3, [pc, #72]	; (8008bb8 <USBH_LL_Init+0x74>)
 8008b70:	2208      	movs	r2, #8
 8008b72:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008b74:	4b10      	ldr	r3, [pc, #64]	; (8008bb8 <USBH_LL_Init+0x74>)
 8008b76:	2201      	movs	r2, #1
 8008b78:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b7a:	4b0f      	ldr	r3, [pc, #60]	; (8008bb8 <USBH_LL_Init+0x74>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008b80:	4b0d      	ldr	r3, [pc, #52]	; (8008bb8 <USBH_LL_Init+0x74>)
 8008b82:	2202      	movs	r2, #2
 8008b84:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b86:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <USBH_LL_Init+0x74>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008b8c:	480a      	ldr	r0, [pc, #40]	; (8008bb8 <USBH_LL_Init+0x74>)
 8008b8e:	f7f8 fdc7 	bl	8001720 <HAL_HCD_Init>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008b98:	f7f7 ff7c 	bl	8000a94 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008b9c:	4806      	ldr	r0, [pc, #24]	; (8008bb8 <USBH_LL_Init+0x74>)
 8008b9e:	f7f9 f9cb 	bl	8001f38 <HAL_HCD_GetCurrentFrame>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7ff f84c 	bl	8007c44 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000658 	.word	0x20000658

08008bbc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7f9 f938 	bl	8001e48 <HAL_HCD_Start>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 f95c 	bl	8008e9c <USBH_Get_USB_Status>
 8008be4:	4603      	mov	r3, r0
 8008be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7f9 f940 	bl	8001e8e <HAL_HCD_Stop>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 f941 	bl	8008e9c <USBH_Get_USB_Status>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008c30:	2301      	movs	r3, #1
 8008c32:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7f9 f98a 	bl	8001f54 <HAL_HCD_GetCurrentSpeed>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d007      	beq.n	8008c56 <USBH_LL_GetSpeed+0x2e>
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d302      	bcc.n	8008c50 <USBH_LL_GetSpeed+0x28>
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d006      	beq.n	8008c5c <USBH_LL_GetSpeed+0x34>
 8008c4e:	e008      	b.n	8008c62 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]
    break;
 8008c54:	e008      	b.n	8008c68 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008c56:	2301      	movs	r3, #1
 8008c58:	73fb      	strb	r3, [r7, #15]
    break;
 8008c5a:	e005      	b.n	8008c68 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c60:	e002      	b.n	8008c68 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008c62:	2301      	movs	r3, #1
 8008c64:	73fb      	strb	r3, [r7, #15]
    break;
 8008c66:	bf00      	nop
  }
  return  speed;
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b084      	sub	sp, #16
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7f9 f91d 	bl	8001ec8 <HAL_HCD_ResetPort>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 f901 	bl	8008e9c <USBH_Get_USB_Status>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cba:	78fa      	ldrb	r2, [r7, #3]
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7f9 f925 	bl	8001f0e <HAL_HCD_HC_GetXferCount>
 8008cc4:	4603      	mov	r3, r0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008cce:	b590      	push	{r4, r7, lr}
 8008cd0:	b089      	sub	sp, #36	; 0x24
 8008cd2:	af04      	add	r7, sp, #16
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	4608      	mov	r0, r1
 8008cd8:	4611      	mov	r1, r2
 8008cda:	461a      	mov	r2, r3
 8008cdc:	4603      	mov	r3, r0
 8008cde:	70fb      	strb	r3, [r7, #3]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	70bb      	strb	r3, [r7, #2]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008cf6:	787c      	ldrb	r4, [r7, #1]
 8008cf8:	78ba      	ldrb	r2, [r7, #2]
 8008cfa:	78f9      	ldrb	r1, [r7, #3]
 8008cfc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008cfe:	9302      	str	r3, [sp, #8]
 8008d00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d04:	9301      	str	r3, [sp, #4]
 8008d06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	4623      	mov	r3, r4
 8008d0e:	f7f8 fd69 	bl	80017e4 <HAL_HCD_HC_Init>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 f8bf 	bl	8008e9c <USBH_Get_USB_Status>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3714      	adds	r7, #20
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd90      	pop	{r4, r7, pc}

08008d2c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d46:	78fa      	ldrb	r2, [r7, #3]
 8008d48:	4611      	mov	r1, r2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7f8 fde2 	bl	8001914 <HAL_HCD_HC_Halt>
 8008d50:	4603      	mov	r3, r0
 8008d52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 f8a0 	bl	8008e9c <USBH_Get_USB_Status>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008d6a:	b590      	push	{r4, r7, lr}
 8008d6c:	b089      	sub	sp, #36	; 0x24
 8008d6e:	af04      	add	r7, sp, #16
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	4608      	mov	r0, r1
 8008d74:	4611      	mov	r1, r2
 8008d76:	461a      	mov	r2, r3
 8008d78:	4603      	mov	r3, r0
 8008d7a:	70fb      	strb	r3, [r7, #3]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	70bb      	strb	r3, [r7, #2]
 8008d80:	4613      	mov	r3, r2
 8008d82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008d92:	787c      	ldrb	r4, [r7, #1]
 8008d94:	78ba      	ldrb	r2, [r7, #2]
 8008d96:	78f9      	ldrb	r1, [r7, #3]
 8008d98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008d9c:	9303      	str	r3, [sp, #12]
 8008d9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008da0:	9302      	str	r3, [sp, #8]
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	9301      	str	r3, [sp, #4]
 8008da6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	4623      	mov	r3, r4
 8008dae:	f7f8 fdd5 	bl	800195c <HAL_HCD_HC_SubmitRequest>
 8008db2:	4603      	mov	r3, r0
 8008db4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 f86f 	bl	8008e9c <USBH_Get_USB_Status>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd90      	pop	{r4, r7, pc}

08008dcc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dde:	78fa      	ldrb	r2, [r7, #3]
 8008de0:	4611      	mov	r1, r2
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7f9 f87e 	bl	8001ee4 <HAL_HCD_HC_GetURBState>
 8008de8:	4603      	mov	r3, r0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b082      	sub	sp, #8
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d103      	bne.n	8008e10 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008e08:	78fb      	ldrb	r3, [r7, #3]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 f872 	bl	8008ef4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008e10:	20c8      	movs	r0, #200	; 0xc8
 8008e12:	f7f8 f979 	bl	8001108 <HAL_Delay>
  return USBH_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70fb      	strb	r3, [r7, #3]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e36:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008e38:	78fa      	ldrb	r2, [r7, #3]
 8008e3a:	68f9      	ldr	r1, [r7, #12]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	00db      	lsls	r3, r3, #3
 8008e44:	440b      	add	r3, r1
 8008e46:	333b      	adds	r3, #59	; 0x3b
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00a      	beq.n	8008e64 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008e4e:	78fa      	ldrb	r2, [r7, #3]
 8008e50:	68f9      	ldr	r1, [r7, #12]
 8008e52:	4613      	mov	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	00db      	lsls	r3, r3, #3
 8008e5a:	440b      	add	r3, r1
 8008e5c:	3350      	adds	r3, #80	; 0x50
 8008e5e:	78ba      	ldrb	r2, [r7, #2]
 8008e60:	701a      	strb	r2, [r3, #0]
 8008e62:	e009      	b.n	8008e78 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008e64:	78fa      	ldrb	r2, [r7, #3]
 8008e66:	68f9      	ldr	r1, [r7, #12]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	00db      	lsls	r3, r3, #3
 8008e70:	440b      	add	r3, r1
 8008e72:	3351      	adds	r3, #81	; 0x51
 8008e74:	78ba      	ldrb	r2, [r7, #2]
 8008e76:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b082      	sub	sp, #8
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7f8 f93a 	bl	8001108 <HAL_Delay>
}
 8008e94:	bf00      	nop
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eaa:	79fb      	ldrb	r3, [r7, #7]
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d817      	bhi.n	8008ee0 <USBH_Get_USB_Status+0x44>
 8008eb0:	a201      	add	r2, pc, #4	; (adr r2, 8008eb8 <USBH_Get_USB_Status+0x1c>)
 8008eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb6:	bf00      	nop
 8008eb8:	08008ec9 	.word	0x08008ec9
 8008ebc:	08008ecf 	.word	0x08008ecf
 8008ec0:	08008ed5 	.word	0x08008ed5
 8008ec4:	08008edb 	.word	0x08008edb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]
    break;
 8008ecc:	e00b      	b.n	8008ee6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008ece:	2302      	movs	r3, #2
 8008ed0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed2:	e008      	b.n	8008ee6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed8:	e005      	b.n	8008ee6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008eda:	2302      	movs	r3, #2
 8008edc:	73fb      	strb	r3, [r7, #15]
    break;
 8008ede:	e002      	b.n	8008ee6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee4:	bf00      	nop
  }
  return usb_status;
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008efe:	79fb      	ldrb	r3, [r7, #7]
 8008f00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008f02:	79fb      	ldrb	r3, [r7, #7]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d102      	bne.n	8008f0e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	73fb      	strb	r3, [r7, #15]
 8008f0c:	e001      	b.n	8008f12 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
 8008f14:	461a      	mov	r2, r3
 8008f16:	2101      	movs	r1, #1
 8008f18:	4803      	ldr	r0, [pc, #12]	; (8008f28 <MX_DriverVbusFS+0x34>)
 8008f1a:	f7f8 fbcd 	bl	80016b8 <HAL_GPIO_WritePin>
}
 8008f1e:	bf00      	nop
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	40020800 	.word	0x40020800

08008f2c <__errno>:
 8008f2c:	4b01      	ldr	r3, [pc, #4]	; (8008f34 <__errno+0x8>)
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	2000002c 	.word	0x2000002c

08008f38 <__libc_init_array>:
 8008f38:	b570      	push	{r4, r5, r6, lr}
 8008f3a:	4e0d      	ldr	r6, [pc, #52]	; (8008f70 <__libc_init_array+0x38>)
 8008f3c:	4c0d      	ldr	r4, [pc, #52]	; (8008f74 <__libc_init_array+0x3c>)
 8008f3e:	1ba4      	subs	r4, r4, r6
 8008f40:	10a4      	asrs	r4, r4, #2
 8008f42:	2500      	movs	r5, #0
 8008f44:	42a5      	cmp	r5, r4
 8008f46:	d109      	bne.n	8008f5c <__libc_init_array+0x24>
 8008f48:	4e0b      	ldr	r6, [pc, #44]	; (8008f78 <__libc_init_array+0x40>)
 8008f4a:	4c0c      	ldr	r4, [pc, #48]	; (8008f7c <__libc_init_array+0x44>)
 8008f4c:	f000 f8ea 	bl	8009124 <_init>
 8008f50:	1ba4      	subs	r4, r4, r6
 8008f52:	10a4      	asrs	r4, r4, #2
 8008f54:	2500      	movs	r5, #0
 8008f56:	42a5      	cmp	r5, r4
 8008f58:	d105      	bne.n	8008f66 <__libc_init_array+0x2e>
 8008f5a:	bd70      	pop	{r4, r5, r6, pc}
 8008f5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f60:	4798      	blx	r3
 8008f62:	3501      	adds	r5, #1
 8008f64:	e7ee      	b.n	8008f44 <__libc_init_array+0xc>
 8008f66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f6a:	4798      	blx	r3
 8008f6c:	3501      	adds	r5, #1
 8008f6e:	e7f2      	b.n	8008f56 <__libc_init_array+0x1e>
 8008f70:	08009160 	.word	0x08009160
 8008f74:	08009160 	.word	0x08009160
 8008f78:	08009160 	.word	0x08009160
 8008f7c:	08009164 	.word	0x08009164

08008f80 <malloc>:
 8008f80:	4b02      	ldr	r3, [pc, #8]	; (8008f8c <malloc+0xc>)
 8008f82:	4601      	mov	r1, r0
 8008f84:	6818      	ldr	r0, [r3, #0]
 8008f86:	f000 b861 	b.w	800904c <_malloc_r>
 8008f8a:	bf00      	nop
 8008f8c:	2000002c 	.word	0x2000002c

08008f90 <free>:
 8008f90:	4b02      	ldr	r3, [pc, #8]	; (8008f9c <free+0xc>)
 8008f92:	4601      	mov	r1, r0
 8008f94:	6818      	ldr	r0, [r3, #0]
 8008f96:	f000 b80b 	b.w	8008fb0 <_free_r>
 8008f9a:	bf00      	nop
 8008f9c:	2000002c 	.word	0x2000002c

08008fa0 <memset>:
 8008fa0:	4402      	add	r2, r0
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d100      	bne.n	8008faa <memset+0xa>
 8008fa8:	4770      	bx	lr
 8008faa:	f803 1b01 	strb.w	r1, [r3], #1
 8008fae:	e7f9      	b.n	8008fa4 <memset+0x4>

08008fb0 <_free_r>:
 8008fb0:	b538      	push	{r3, r4, r5, lr}
 8008fb2:	4605      	mov	r5, r0
 8008fb4:	2900      	cmp	r1, #0
 8008fb6:	d045      	beq.n	8009044 <_free_r+0x94>
 8008fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fbc:	1f0c      	subs	r4, r1, #4
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	bfb8      	it	lt
 8008fc2:	18e4      	addlt	r4, r4, r3
 8008fc4:	f000 f8ac 	bl	8009120 <__malloc_lock>
 8008fc8:	4a1f      	ldr	r2, [pc, #124]	; (8009048 <_free_r+0x98>)
 8008fca:	6813      	ldr	r3, [r2, #0]
 8008fcc:	4610      	mov	r0, r2
 8008fce:	b933      	cbnz	r3, 8008fde <_free_r+0x2e>
 8008fd0:	6063      	str	r3, [r4, #4]
 8008fd2:	6014      	str	r4, [r2, #0]
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fda:	f000 b8a2 	b.w	8009122 <__malloc_unlock>
 8008fde:	42a3      	cmp	r3, r4
 8008fe0:	d90c      	bls.n	8008ffc <_free_r+0x4c>
 8008fe2:	6821      	ldr	r1, [r4, #0]
 8008fe4:	1862      	adds	r2, r4, r1
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	bf04      	itt	eq
 8008fea:	681a      	ldreq	r2, [r3, #0]
 8008fec:	685b      	ldreq	r3, [r3, #4]
 8008fee:	6063      	str	r3, [r4, #4]
 8008ff0:	bf04      	itt	eq
 8008ff2:	1852      	addeq	r2, r2, r1
 8008ff4:	6022      	streq	r2, [r4, #0]
 8008ff6:	6004      	str	r4, [r0, #0]
 8008ff8:	e7ec      	b.n	8008fd4 <_free_r+0x24>
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	b10a      	cbz	r2, 8009004 <_free_r+0x54>
 8009000:	42a2      	cmp	r2, r4
 8009002:	d9fa      	bls.n	8008ffa <_free_r+0x4a>
 8009004:	6819      	ldr	r1, [r3, #0]
 8009006:	1858      	adds	r0, r3, r1
 8009008:	42a0      	cmp	r0, r4
 800900a:	d10b      	bne.n	8009024 <_free_r+0x74>
 800900c:	6820      	ldr	r0, [r4, #0]
 800900e:	4401      	add	r1, r0
 8009010:	1858      	adds	r0, r3, r1
 8009012:	4282      	cmp	r2, r0
 8009014:	6019      	str	r1, [r3, #0]
 8009016:	d1dd      	bne.n	8008fd4 <_free_r+0x24>
 8009018:	6810      	ldr	r0, [r2, #0]
 800901a:	6852      	ldr	r2, [r2, #4]
 800901c:	605a      	str	r2, [r3, #4]
 800901e:	4401      	add	r1, r0
 8009020:	6019      	str	r1, [r3, #0]
 8009022:	e7d7      	b.n	8008fd4 <_free_r+0x24>
 8009024:	d902      	bls.n	800902c <_free_r+0x7c>
 8009026:	230c      	movs	r3, #12
 8009028:	602b      	str	r3, [r5, #0]
 800902a:	e7d3      	b.n	8008fd4 <_free_r+0x24>
 800902c:	6820      	ldr	r0, [r4, #0]
 800902e:	1821      	adds	r1, r4, r0
 8009030:	428a      	cmp	r2, r1
 8009032:	bf04      	itt	eq
 8009034:	6811      	ldreq	r1, [r2, #0]
 8009036:	6852      	ldreq	r2, [r2, #4]
 8009038:	6062      	str	r2, [r4, #4]
 800903a:	bf04      	itt	eq
 800903c:	1809      	addeq	r1, r1, r0
 800903e:	6021      	streq	r1, [r4, #0]
 8009040:	605c      	str	r4, [r3, #4]
 8009042:	e7c7      	b.n	8008fd4 <_free_r+0x24>
 8009044:	bd38      	pop	{r3, r4, r5, pc}
 8009046:	bf00      	nop
 8009048:	200000b8 	.word	0x200000b8

0800904c <_malloc_r>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	1ccd      	adds	r5, r1, #3
 8009050:	f025 0503 	bic.w	r5, r5, #3
 8009054:	3508      	adds	r5, #8
 8009056:	2d0c      	cmp	r5, #12
 8009058:	bf38      	it	cc
 800905a:	250c      	movcc	r5, #12
 800905c:	2d00      	cmp	r5, #0
 800905e:	4606      	mov	r6, r0
 8009060:	db01      	blt.n	8009066 <_malloc_r+0x1a>
 8009062:	42a9      	cmp	r1, r5
 8009064:	d903      	bls.n	800906e <_malloc_r+0x22>
 8009066:	230c      	movs	r3, #12
 8009068:	6033      	str	r3, [r6, #0]
 800906a:	2000      	movs	r0, #0
 800906c:	bd70      	pop	{r4, r5, r6, pc}
 800906e:	f000 f857 	bl	8009120 <__malloc_lock>
 8009072:	4a21      	ldr	r2, [pc, #132]	; (80090f8 <_malloc_r+0xac>)
 8009074:	6814      	ldr	r4, [r2, #0]
 8009076:	4621      	mov	r1, r4
 8009078:	b991      	cbnz	r1, 80090a0 <_malloc_r+0x54>
 800907a:	4c20      	ldr	r4, [pc, #128]	; (80090fc <_malloc_r+0xb0>)
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	b91b      	cbnz	r3, 8009088 <_malloc_r+0x3c>
 8009080:	4630      	mov	r0, r6
 8009082:	f000 f83d 	bl	8009100 <_sbrk_r>
 8009086:	6020      	str	r0, [r4, #0]
 8009088:	4629      	mov	r1, r5
 800908a:	4630      	mov	r0, r6
 800908c:	f000 f838 	bl	8009100 <_sbrk_r>
 8009090:	1c43      	adds	r3, r0, #1
 8009092:	d124      	bne.n	80090de <_malloc_r+0x92>
 8009094:	230c      	movs	r3, #12
 8009096:	6033      	str	r3, [r6, #0]
 8009098:	4630      	mov	r0, r6
 800909a:	f000 f842 	bl	8009122 <__malloc_unlock>
 800909e:	e7e4      	b.n	800906a <_malloc_r+0x1e>
 80090a0:	680b      	ldr	r3, [r1, #0]
 80090a2:	1b5b      	subs	r3, r3, r5
 80090a4:	d418      	bmi.n	80090d8 <_malloc_r+0x8c>
 80090a6:	2b0b      	cmp	r3, #11
 80090a8:	d90f      	bls.n	80090ca <_malloc_r+0x7e>
 80090aa:	600b      	str	r3, [r1, #0]
 80090ac:	50cd      	str	r5, [r1, r3]
 80090ae:	18cc      	adds	r4, r1, r3
 80090b0:	4630      	mov	r0, r6
 80090b2:	f000 f836 	bl	8009122 <__malloc_unlock>
 80090b6:	f104 000b 	add.w	r0, r4, #11
 80090ba:	1d23      	adds	r3, r4, #4
 80090bc:	f020 0007 	bic.w	r0, r0, #7
 80090c0:	1ac3      	subs	r3, r0, r3
 80090c2:	d0d3      	beq.n	800906c <_malloc_r+0x20>
 80090c4:	425a      	negs	r2, r3
 80090c6:	50e2      	str	r2, [r4, r3]
 80090c8:	e7d0      	b.n	800906c <_malloc_r+0x20>
 80090ca:	428c      	cmp	r4, r1
 80090cc:	684b      	ldr	r3, [r1, #4]
 80090ce:	bf16      	itet	ne
 80090d0:	6063      	strne	r3, [r4, #4]
 80090d2:	6013      	streq	r3, [r2, #0]
 80090d4:	460c      	movne	r4, r1
 80090d6:	e7eb      	b.n	80090b0 <_malloc_r+0x64>
 80090d8:	460c      	mov	r4, r1
 80090da:	6849      	ldr	r1, [r1, #4]
 80090dc:	e7cc      	b.n	8009078 <_malloc_r+0x2c>
 80090de:	1cc4      	adds	r4, r0, #3
 80090e0:	f024 0403 	bic.w	r4, r4, #3
 80090e4:	42a0      	cmp	r0, r4
 80090e6:	d005      	beq.n	80090f4 <_malloc_r+0xa8>
 80090e8:	1a21      	subs	r1, r4, r0
 80090ea:	4630      	mov	r0, r6
 80090ec:	f000 f808 	bl	8009100 <_sbrk_r>
 80090f0:	3001      	adds	r0, #1
 80090f2:	d0cf      	beq.n	8009094 <_malloc_r+0x48>
 80090f4:	6025      	str	r5, [r4, #0]
 80090f6:	e7db      	b.n	80090b0 <_malloc_r+0x64>
 80090f8:	200000b8 	.word	0x200000b8
 80090fc:	200000bc 	.word	0x200000bc

08009100 <_sbrk_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4c06      	ldr	r4, [pc, #24]	; (800911c <_sbrk_r+0x1c>)
 8009104:	2300      	movs	r3, #0
 8009106:	4605      	mov	r5, r0
 8009108:	4608      	mov	r0, r1
 800910a:	6023      	str	r3, [r4, #0]
 800910c:	f7f7 ff14 	bl	8000f38 <_sbrk>
 8009110:	1c43      	adds	r3, r0, #1
 8009112:	d102      	bne.n	800911a <_sbrk_r+0x1a>
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	b103      	cbz	r3, 800911a <_sbrk_r+0x1a>
 8009118:	602b      	str	r3, [r5, #0]
 800911a:	bd38      	pop	{r3, r4, r5, pc}
 800911c:	2000091c 	.word	0x2000091c

08009120 <__malloc_lock>:
 8009120:	4770      	bx	lr

08009122 <__malloc_unlock>:
 8009122:	4770      	bx	lr

08009124 <_init>:
 8009124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009126:	bf00      	nop
 8009128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912a:	bc08      	pop	{r3}
 800912c:	469e      	mov	lr, r3
 800912e:	4770      	bx	lr

08009130 <_fini>:
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	bf00      	nop
 8009134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009136:	bc08      	pop	{r3}
 8009138:	469e      	mov	lr, r3
 800913a:	4770      	bx	lr
